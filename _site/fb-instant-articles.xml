<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <description>
      属于大嘴的个人blog
    </description>
    
        
            <item>
                <title>关于csdn的采访</title>
                <link>http://localhost:4000/blog/2016/csdn-staffer/</link>
                <content:encoded>
                    <![CDATA[
                    <p>前几天在csdn的《程序员》杂志上发表了一篇关于我写的<a href="/2015/DFS.html">dfs</a>的文章。借
着这次机会，csdn的编辑钱兄邀请我上4月份的sdcc深圳场做一个演讲。为此，他们还专门
采访了我。刚开始他们准备让我在几个主题里面挑一个，后来我和他们说，这些主题我都可
以，他们可以随便选。钱兄就建议来一个综合的。我觉得这样也可以。然后就有了下文：</p>

<p><b> CSDN：请简单介绍下您和目前的工作，以及关注的领域。</b></p>

<p>徐海峰：大家好，我是阅文集团（由盛大文学和腾讯文学整合而成的集团）的首席架构师徐
海峰，大家可以叫我大嘴。我目前的工作主要在分布式存储、分布式计算、公司内部框架的
架构等工作。今年我还给自己加了一个工作项：推动我们的一些项目在GitHub上开源。</p>

<p>对于我自己来说，我一般比较关注分布式存储和分布式计算、高性能运算等。其实业务系统
的框架架构等工作很久之前就做过了，只是后来更关注分布式计算，所以现在我把它当成了
副业，我的主业主要还是高性能运算。</p>

<p><b> CSDN：您有着10年的互联网开发经验，您是如何走上技术这条路的？</b></p>

<p>徐海峰：为什么看见这个问题，我第一个想到的字就是“熬”？其实确实也只能说是熬吧。
开始的时候是技术不太过关，我就开始熬技术方面的。当时也傻乎乎的，办法也不多，就想
到买几本书看看。然后没想到看书竟然后来发展成了我的一个习惯。这10年来，我一直看书
，我霸占了我家的一个半书架，里面都是我的书。这还不算上被我淘汰掉的很多书。在技术
行业就是这样，等你技术ok了，你的机会就来了。还是那句话，熬着，磨练自己，机会只留
给有准备的人。</p>

<p><b> CSDN：您现任职于由盛大文学和腾讯文学整合而成的阅文集团，也曾在携程、5173工作
过，可否简要回顾下自己的工作历程，有什么心得和体会可分享？</b></p>

<p>徐海峰：先说一下这3家公司的区别吧！现在的公司阅文集团，因为我的自主性大一些，所
以可以干预很多地方，虽然现在属于刚刚开始，但底子算是比较好的；Ctrip，我当时去的
时候就是磨练心智的，Ctrip在当时比较古板，技术也是相对挺low的（所以待了11个月实在
受不了了，必须要走了）；5173的话比较自由，很多事情都可以很简单的完成，而且同事之
间关系很不错，我们到现在都一直在一起玩，我也在里面待的最久。</p>

<p>这么多年，我认为公司对人的关系挺大的，判断一家公司的好坏，不能单一的看付多少报酬
，虽然这是第一选择，但是还要看给你做多少的事情，你想做什么，到你能做什么，再到你
能实现什么是有一个很大的跨度的。如果这家公司能给你想法上的自由，行动上的支持那就
应该待的久一些。</p>

<p><b> CSDN：您目前是阅文集团的首席架构师，此前也是携程和5173的架构师，在每一个阶段
中您对架构是怎样的理解？以及您对于架构师是如何定义的？</b></p>

<p>徐海峰：我个人觉得架构挺简单的。我一直和我下面的人说，做架构要比用架构简单，因为
你是游戏规则设定者。你既是运动员还是裁判，你再干不过人家那就没法原谅了。另外，架
构好比画圆，不管你怎么画，最后总归要圆回来。当然一个架构的好坏还得看业务模式、人
员素质、使用便捷性等因数。</p>

<p>一个好的架构一般不是靠短期内做出来的，都是一步一步改出来，或者是总结前面发生的事
情再写出来的。</p>

<p>我现在说得好像挺简单，不过也有迷茫的时候，记得当时我做一个单点登录都要想很久。在
5173时，我认为技术就是无敌的，那时候刚刚接触分布式计算等技术，一切都是崭新的，充
满着诱惑，几乎每天都干到很晚。后来到了Ctrip发现原来技术差一些也行？其实在Ctrip我
算是闭关，在那里看了很多的书，有技术也有人文类的。一年时间也想通了很多的问题。</p>

<p>架构不仅和技术有关，还和人有关。一个架构除了完成既定系统任务还要兼顾开发者等。现
在我的同事经常说我喜欢在技术上“强奸”别人。其实完全不是这样，只是我想过几乎所有
的方式/方法，而且我选择了我认为最好的那种。既能做到架构的简洁，又能做到对于开发
者快速的接受。像架构这种东西，不是越灵活越好，我恰恰相反的认为，架构这种东西，特
别是需要靠别人编程配合完成的东西，越限制死越好。</p>

<p>架构师的定义，我还是觉得他既是裁判又是运动员吧。当架构师不难，难的是怎么让运动人
忘记你裁判的身份。我一直在公司说的一句话：</p>

<p>我真正的成功在于你们都应该不知道有我这个人存在。特别是在系统上线后，如果在没有我
的情况下，系统能正常运行，那我才算是牛。我也一直朝着这个目标努力。目前来看，在
Ctrip、5173这两个地方都实现了这个目标，我希望在阅文集团也能实现。</p>

<p><b> CSDN：您认为具备哪些素质才能成为是出色的架构师？</b></p>

<p>徐海峰：首先是要忍。一个公司的架构或者是技术线并不是一朝一夕来决定的，它有很多的
历史原因，也有很多的无奈之举。所谓的存在即合理，千万不要上来就去大刀阔斧的砍下去
，对于一些觉得不顺眼、不那么完美的事情要学会去接受，等待时机再干掉它；</p>

<p>其次是要自我进化。作为架构师，一般都是在公司内部技术比较牛的人。现在这个世界是日
新月异的变化着，作为一个公司的技术领航人员，在技术上必须要保持一定的先进性。时刻
需要进化自己，不断的补充新的知识；</p>

<p>再次代码能力不能丢。我一些朋友也是做架构师的，他们对我现在还在写代码觉得很吃惊，
而我对他们现在不写代码但是确是架构师也很吃惊。一个架构师连代码都不写了，难道就做
做Slides？画画图？然后开几个演讲？这就太颓废了一些。不仅对公司不好，对自己也不负
责任啊。</p>

<p>最后要学会忍受寂寞。牛的人都是寂寞的。往往一个挺好的事情，当你满怀信心的和同事们
说的时候，他们一脸的迷茫。几乎是没有人点头的，更不要说受到支持。这时候就要学会忍
受这种“寂寞”，并学会去处理这种“寂寞”。</p>

<p>总的来说，我还是认为架构师和管理者还是不太一样。架构师必须要首先做事情，然后再做
人，当然做事情的时候也要追求合理的方式方法。</p>

<p><b> CSDN：目前，阅文集团的架构是怎样的？可否简单介绍下阅文集团整体架构的一些架构
特点？以及作为架构师，您的工作重点有哪些？</b></p>

<p>徐海峰：说实话，阅文的架构还是比较乱的。毕竟是3家公司合并成的。目前我们的架构硬
性上来说简直可以开展览馆了。数据库有：MySQL、SQL Server、Oracle等；应用层有：
Java、PHP、C#、Python等，而业务系统还分属在不同的机房。这是没办法的事情，毕竟以
前是分属3家公司，现在合并了，这种历史预留问题是我们要面对的也是必须要解决的。</p>

<p>现在我们决定把数据库从Oracle和SQL Server上迁移到MySQL上。应用层基本上以后就只有
Java和PHP了，Java做Service，PHP做页面，各取所长吧。目前我们已经在推进这个事情了
，去年先把内容统一了，今年开始统一应用层和应用层的数据库等。毕竟饭要一口一口吃，
罗马也不是一天建成的。这种“乱”的现象正在一步一步的被改进，我相信用不了多久就能
统一吧。</p>

<p>我在阅文的时间其实刚刚2年，我是2014年4月15日入职的，那时候还叫腾讯文学。这两年来
，我一直在负责分布式存储和分布式计算的工作。第一年我一个人写了一个分布式文件系统
（DFS），后撰写的文章也发表在《程序员》2016年4月期上。然后抽空算是帮忙吧，贡献了
一个编程框架，叫Albianj。Albianj主要做分布式业务系统用，自带了分布式事务、OEM、
数据路由等功能，它可以让你用单机开发部署到线上，更改几个配置文件立刻就变成分布式
系统来运行，目前也在我们公司大规模的使用。上文中说到的业务系统的迁移就是使用
Albianj来完成的。后来配合内容中心的统一，我还写了一个id生成器，这就是我要在SDCC
2016深圳站之架构技术峰会上讲的，中间因为调度的需要，还开发了一个调度系统，比当当
开源的那个功能要多一些（当当的海峰会不会杀了阅文的海峰？）。从去年7月份开始，我
也开始接管团队，我们团队在做几个东西：一个RPC的通讯协议、Nameserver、LogDB等工作
。</p>

<p>我今年的工作重点应该不会放在具体的实现上了，我更多的会去做一些系统整体性的架构设
计等工作。还有就是开源的工作，我也一直在不停的推进这件事情。目前来看，上面提到的
几个东西都会开源。到时候欢迎大家去GitHub，一起讨论这些方案和实现。</p>

<p><b> CSDN：您如今是如何安排自己的新技术学习、研发团队管理、编程、生活等时间的？
</b></p>

<p>徐海峰：对于学习，我恰恰和别人相反。我不太去关注新的技术，我倒是挺喜欢那种老掉牙
的技术的。开始我是写C#的，后来我尽然去写了C。其实就像我喜欢用VIM或者是Emacs而用
不惯Sublime Text一样，我对于新的东西到不是那么的感冒。我一直觉得现在技术不管怎么
变化，都是从那些老掉牙的技术演化而来的，金矿还是在老掉牙的技术中。比如现在分布式
文件系统的存储技术，几乎和操作系统原理中的磁盘管理一模一样，只是加了很多平衡性、
一致性之类的算法，所以我现在在看汇编。对于汇编，我开始非常抗拒，但前几天的一个系
统Down掉让我重新重视了起来。很多时候，在Online环境中，你根本就是无法Debug，就算
用GDB也仅仅是把Dump文件拿下来，但那次我把源文件给弄丢了，不看汇编不行，所以我还
是下定决定好好的看看汇编。汇编也没有想象中的难，除了繁琐一些，别的都还好。也不知
道是不是我学的不精，还是还没深入下去，没到难的地方。</p>

<p>管理团队这个事情其实我已近很久没干了。去年开始又需要扮演这个角色了，我才捡了起来
。要说工作嘛，肯定是一个人的时候舒服，人多了黑管理者带来了比较多的乱七八糟事情。
我一般管理分为2部分：</p>

<p>首先在生活上，我会给与一定的照顾。对于一些可以变通的地方我也不是那么的强求。互联
网公司嘛，本来就是比较自由的，而且我们的工作还不太算是简单的业务实现，而是需要一
定的创造性的，所以在这个上面我一直比较松。另一方面，在技术上，我被我同事称为“魔
鬼”。我同事说我发起火来六亲不认（PS：我已经很少发火了）。我规定对于屡教不改的我
要惩罚。这算是我这里的“私刑”。第一次屡教不改的错误，解决方案抄100遍，第二次200
，依次类推。我觉得犯错误不要紧，谁能无过？关键是你是不是真的用心去记住这个错误。
我对待错误的态度是，第一次叫做不知道，第二次叫做不小心，千万不要有第三次，第三次
在我这里就是故意。既然你故意，那我就用故意的办法治你。我是公司内第一个让下属抄“
100遍”的上司。100遍这种惩罚虽然恶心、下流、卑鄙，但效果却是出奇的好。凡是抄过
100遍的人，至今还没有人抄200遍。编程和生活我还是放在一起说吧。因为我爱人和我说，
在我的生活中，没有生活。我是把爱好玩着玩着最后玩成工作的人。高中的时候就对编程很
感兴趣，后来找工作的时候发现除了编程我啥都不会，所以最后爱好变成了工作。也不知道
这到底算不算是我的优势，我可以花更多的时间在编程上。我觉得时间是一定的，所以你的
时间花在了这里，那么那里就会少一块。我经常性把编程和生活搞乱在一起的。我会在洗澡
的时候想问题，我会在出去玩的时候带着电脑，甚至去年7月份前同事结婚，我们一起去马
尔代夫，早晨起来我还坐在阳台上写代码。完了被朋友笑称：在扔美金写代码。也因为这样
，我觉得我无形中比别人多挤出来了一些时间吧！开始时没有什么效果，但是久而久之，效
果很明显。现在确实感觉知道的比一般的人多一些，贵在坚持啊！</p>

<p>好好准备，安安心心坚持，机会还是留给有准备的人。</p>

<p><b> CSDN：在本次SDCC 2016（深圳站）架构峰会上，您想分享的话题是？</b></p>

<p>徐海峰：这次我分享一个主题：id生成器。说到id生成器，没听过的会很诧异，这也好意思
拿出来说？知道一点的，会和你说Snowflake算法。Twitter的Snowflake算法确实不错，但
是我认为它还能做得更好。我们的id生成器是在统一内容时发现要用。以前我们也是用数据
库的解决方案，但统一内容中心的时候，数据库方案已经不能用了。当然我们也参考了
Snowflake，但是都被否决了。最后我决定自己来开发一个。开始没觉得有多难，其实本身
确实也不是很难，但是需要考虑的相关问题却要很多。一个小小的id，仅仅自是一个uint64
的值，里面却包含了很多的信息和对于取舍的考量。此次分享具体的包括：我们前期怎样使
用数据库生成id、我们为什么放弃Snowflake算法、再到后来我们自己的算法，以及此后我
们特有的排序id算法，来听一下你就知道。</p>

<p><b> CSDN：您最期待在SDCC 2016（深圳站）架构峰会上看到哪些内容？</b></p>

<p>徐海峰：我还是想看到更多的自创的东西，而不是使用的心得什么的。这不是说使用的心得
什么的不重要，也很重要，可以让很多人少走很多的弯路。但是技术的发展毕竟是靠创新的
。使用仅仅只是站在了巨人的肩膀上，我更喜欢看到更多的巨人自己站出来。</p>

<p>对于技术的纵向选择，我这个人并不挑食，只要是好的都可以接受。不管你是运维、DB、架
构，这些都可以相互借鉴。</p>

<hr />
<p>这是我得第二次被采访，上一次被采访是去年的11月份，sacc对我做了演讲之前的采访。
相比上一次采访，这一次显然更加的放松一些，说的话也多了一些。<br />
这些年来，技术圈内也是出现了很多的炒作现象。不是说不能炒作，而是说不能过分的
炒作。虽然我也认为我们现在的年代已经不是“酒香不怕巷子深”了。但是，我们也要在
一定的限制内来运行炒作。而不是泛泛而谈，硬是把死人给炒活了、把原本只是一个
程序员水平给炒成cto。</p>

<p>PS:话说上首页的感觉还是不错的！！！ <br />
<img src="csdn.jpg" alt="csdn" /></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2016/csdn-staffer/</guid>
                <description>
                    
                </description>
                <pubDate>Sat, 16 Apr 2016 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
        
            <item>
                <title>腾讯文学内容中心id生成器的设计与实现</title>
                <link>http://localhost:4000/blog/2015/idcreator/</link>
                <content:encoded>
                    <![CDATA[
                    <h3 id="名词解释">名词解释</h3>

<ol>
  <li>dfs: 分布式文件系统，具体的实现请参考 [这里] (/2015/DFS.html “分布式文件系统”)</li>
  <li>idc: idcreator的缩写，是指id生成器本身</li>
  <li>albianj: 我们开发的一个分布式业务统一框架 具体实现请查考<a href="/2015/albianj.html" title="分布式统一框架">这里</a></li>
  <li>数据路由: 业务系统中经常会用到的分库分表操作</li>
</ol>

<h3 id="摘要">摘要</h3>

<p>我们设计并实现了一个分布式的id生成器。它是基于linux操作系统的，面向我们几乎所有
的业务操作，为我们所有的业务提供对象的唯一标识，也为我们的错误号提供标示。虽然
id生成器被设计成运行在廉价的linux机器上或者是混搭在别的业务机器上，但是它依然为
我们提供了良好的可访问性和可伸缩性。后期因为业务的需要，我们也让id生成器为我们
提供了良好的完整性和一致性。</p>

<p>虽然id生成器比较简单，但是它确实出自于我们对于搭建一个分布式业务系统的实际需要
和我们对于搭建分布式业务系统的一个理解。它和我们搭建的dfs或者是albianj一样，并
不是出自于某些论文或者是高大上的理论。它更多的是被用来解决我们在系统中碰到的实
际问题，所以对于我们来说，它比某些开源或者是论文的更加的具有适应性、维护性和
可用性。</p>

<p>id生成器已经被部署到我们的内容中心系统中，最初的版本已经稳定的运行了9个月，中间
没有一次的down机事故。现在它也被用来改造我们以前的老系统，改造我们从oracle或者
是mssql迁移到mysql的过程。目前为止，我们的id生成器已经部署了2套，一共6台机器，
它为我们源源不断的输出我们需要使用的业务id。</p>

<p>本文档中我们会最终讨论我们现在id的生成方法和后期我们处理强增长模型id的解决办法,
还有现在的id生成办法和以前id的比较、我们使用id的方法等。当然，我们着重要介绍的
还是我们id生成器在分布式业务系统中的架构和特性。</p>

<h3 id="简介">简介</h3>

<p>我们开发idc的初衷是确实碰到了业务大数据的问题。我们的书、章、章节等动辄百万、千万、
甚至上亿的记录需要被最后存储到数据库中。就目前的数据量，如果使用简单的方案，只
能寻求商业数据库的支持，但对于一个互联网公司来说，商业的数据库会大大的增加成本
。我们继而选择了使用开源的mysql来作为底层的关系型数据的存储。但因为mysql的单表
压力远远无法满足我们现实的压力需求。我们只能对业务数据进行了拆分，继而变相的对
我们提出了数据路由的功能。</p>

<p>虽然数据路由的整体实现由<a href="/2015/albianj.html" title="分布式统一框架">albianj</a>负责并且实现，但
是数据路由的规则必须由我们根据业务设定。而设计数据路由的前提是我们必须要存在一个可以作
为<b>数据路由标识</b>的载体。同样是路由，如果是web的负载均衡路由一般就会使用客
户端ip等作为标识，但是类似的解决方案并不适用于我们的数据存储，因为数据库的路由
除了存储数据之外，还要考虑可以通过标识能定位位置，继而还能读取这些记录。所以我
们必须具有一个明确的、不会改变的、唯一的标识来配合数据路由。这个标识就是我们这
里要介绍的id。</p>

<p>我们为此设计并且实现了整个的idc。考虑到目前我们的现实情况，该idc除了具有高性能
的tcp接口和自定义的api外，我们还为此提供了一个语言无关性的http接口。和tcp的api
不一致之处在于tcp会单纯的返回id，而http的接口将会访问一个json对象，继而通过json
可以获取id或者是判断是否出现了访问错误。</p>

<p>虽然idc是分布式的结构，但是和dfs之类的存储类分布式系统相比还是差别非常大的。对
于dfs中比较强调的数据一致性、数据可恢复等等要求，在id生成器中基本上不需要太多的
考虑。这是因为存储需要保存我们提交的内容，而id它只需要和时间成正相关性即可满足
要求。但idc也需要遵循统一的分布式系统的一些规则。idc同样要满足分布式系统的高可
用性、高稳定性、单点无关性等要求。</p>

<p>在互联网行业，前期的考虑总觉得已经满足了需求。但是变化永远大于计划。在我们的idc
中，后来的需求还需要满足生成带有业务状态的id。这是我们的idc和别的idc有差别的地
方。在章节的顺序上，我们需要一个定步长并且只可递增不可乱序的id来满足我们的排序
要求。就这个要求，打破了我们前期对于idc的设计，我们对于idc增加了状态的管理，并
且设计了新的算法来满足此需求。</p>

<h3 id="设计目标">设计目标</h3>

<p>按照往常一样，我们也对我们的idc提出了一些设计上的原则和目标。遵守这些原则、达到
这些目标可以让我们的idc能更好的为我们所用。和以前的dfs和albianj完全不一样，idc
的目标确实比较多，但是它的目标一般都比较的清晰。因为相比它们两个已经设计完的组
件，idc的功能相对简单而单一，对于idc更多还是在性能和扩展性上存在一些实现上的难
度。</p>

<p>在上面的介绍中，我们重点介绍了我们的idc的背景和大概的用处，以及一些idc必须遵循
的规则。但是我们并没有说明我们的idc的设计构想。所以，下面我就讲一下我们的设计构
想。</p>

<ol>
  <li>
    <p>唯一性。从我们的idc中生成的id必须是具有唯一性的。并且是全站唯一的id。这样的id
可以很方便的得到它的业务信息。不管是对于数据路由还是对于业务排错都会具有一个清
晰的、可维护的id；</p>
  </li>
  <li>
    <p>短。idc生成的id必须要足够的短。最好是一个uint32的值，最长也不能长于uint64.一
来对于长于uint64的值存储将会是一个麻烦，另外运算也是需要借助移位等算法，对于编程语
言还无法使用语言内置的类型系统；</p>
  </li>
  <li>
    <p>生成的速度要足够快。这大家都很好理解。没有一个程序是不追求速度的。而且对于我
们的业务系统来说，id的服务是对应于一个分布式的结构。在可用性、可维护性上相比本
地生成或者是数据库生成会有一次的tcp交互时间。所以我们要确保在业务系统正常运行的
情况下，idc能快速的给业务系统提供服务。尽可能的减少因为生成id所需要花费的时间；</p>
  </li>
  <li>
    <p>id的运算要足够简单。这是吸取以前使用字符串来作为id的时候的一个教训。不管是应
用程序还是数据库，使用字符串作为id是可以“为所欲为”，但是在运算上不管是排序还
是hash都会比int类型的数据慢很多，或者是多步骤。所以我们生成的id要尽可能的满足于
简单，最好就是一个数字，这样计算可以直接进行，而且可以直接使用内置简单类型；</p>
  </li>
  <li>
    <p>id不仅仅是一个无意义的id，而是一个带有业务性质的id。这应该是一条“毁三观”
的目标。因为我们的数据库教科书上有一条明确的规则：实体id最好是不要带业务性质的
，仅仅起标识作用的id。但是这也仅仅只是写在教科书上罢了。其实真的很误人子弟，或
者说是跟不上时代。在现实系统中，一个没有业务意义的id在分布式系统中几乎是寸步难
行。不仅仅是不好维护，而且还很不好扩展，不能自由的做数据路由，也不能给开发者或
者是维护者一个明确的“望文生义”的提示。</p>
  </li>
  <li>
    <p>部分自定义位。idc中生成的id除了具有业务意义外，还必须具有一定的空间提供给业
务系统来进行自定义。业务系统中的业务路由也是强业务性质的，和业务结合的相当的紧密
，可以这么说，几乎每一个业务都会有一个不一样的数据路由的定制化功能。而我们需要
满足这些定制化功能。满足定制化功能的前提就是idc中生成的id并不是一个成品，而是一
个半成品。开发者可以通过这个半成品id进行业务加工，使其变成一个完整的、符合当前
业务需求的id；</p>
  </li>
  <li>
    <p>可识别。可识别，也就是可读性。我们认为这是id作为一个标识最应该具有的一个特性
。一个只可计算机识别不可人类肉眼识别的信息几乎是没有任何用处的。我们的idc中生成
的id必须不是那种只为了计算机而存在的。开发应用程序、维护应用程序的都是我们开发
者或者是维护者，本质上说都是人。我们把开发和维护作为头等大事来对待，而机器运行
程序，这是我们程序的附属品，只是碰巧我们写了一个机器可以运行起来的程序而已。首
要条件还是人类友好。</p>
  </li>
  <li>
    <p>对索引友好。这其实是我们开发idc第二个重要的原因。如果不要求索引，字符串是最
好的解决方式。但是字符串在排序上太差了，而这也会影响到数据库的速度。使用字符串
，插入数据的时候会对数据库的索引进行随即写入，而数据库最快的速度应该是尽量的避
免随机写，把随机写变成顺序写这样来提高速度。所以我们的idc中产生的id必须要满足这
个要求，也就是说，从一定意义上，idc中生成的id必须是有顺序的，是可以把对数据库
的随机写优化成顺序写的；</p>
  </li>
</ol>

<p>上面说了很多我们对于idc生成的id的各种设计目标。这仅仅是我们对于这个idc系统
一部分的思考和实践。但是对于我们idc本身，我们也会有一定的设计目标或者说是设计
规则，用来满足我们的idc对于业务系统的支撑。</p>

<ol>
  <li>
    <p>高可用性。我们的idc必须具备高可用性的特点。因为我们的idc被设计成分布式的方式
，又是被构建在廉价的linux普通服务器上，所以这些服务器具有易损坏的属性。但是我们
的idc集群不能因为服务器的损坏而不能为业务系统提供服务。我们必须设计一种或者多种
规则来规避单机down机的问题，从而达到整个集群的高可用；</p>
  </li>
  <li>
    <p>数据一致性：起初这并不是idc的一个必须的属性。因为idc被设计为无状态，仅仅与时
间相关，所以这部分被忽略。但是因为现实业务的需求，我们需要带有状态的idc，故数据
的一致性便成为了整个idc集群的一个标准特性，也是必须被满足的特性；</p>
  </li>
  <li>
    <p>单机承受能力：根据我们整个的业务系统中的业务压力，
引申出来我们的集群需要能支撑的一个量，这基本上就是我们的整个idc集群的最基础的应
对量。鉴于我们业务的发布量和发布态时间，我们的idc集群在前期基本上需要支持每秒5k
的QPS。在业务大量的导入后，预估计这个量在万的级别，应该不会超过百万。所以划分到
我们的单台机器，基本上在1w／s左右的qps即可扛住整个站点的压力；</p>
  </li>
</ol>

<p>最后，也是最重要的一点是，我们的idc必须能在经受住我们系统的同时，可以方便对idc
自定义规则。这是我们比较关心的，毕竟业务随时在变，数据随时都在增加，而我们的应
对策略也一直都在变更。在整个的idc架构中，我们必须要保证留取一块地方，给我们的生
成算法服务，它可以方便的进行自定义，可以方便的嵌入或者重写算法。</p>

<h3 id="架构">架构</h3>

<p>为了达到我们的设计目标，我们对于我们的idc进行了总体上的架构，并且对其架构进行了
细化切分。细分后的idc基本上等同于一个简单的tcp／http服务器。我们也对idc整体的功
能性上进行了细化。目前来说，我们主要的点有以下几个组成：</p>

<h4 id="高可用架构">高可用架构</h4>

<p>对于一个分布式的集群来说，高可用永远是一个不可回避的话题，也是一个必须达到的话
题。我们的idc也不可避免的需要高可用的架构设计。对于idc来说，相对来说数据比较少
，而且相互之间的关系也没有dfs那么的紧密。起初我们设计的idc压根就是无状态的集群
。所有的id都与也仅仅与时间有关。所以我们的idc被设计成平行的无状态结构。从架构上
来说有点像memcached，服务器没有任何的管理服务器或者是状态服务器来为这些idc集群
提供负载均衡、状态管理和故障转移。</p>

<p><img src="idc.png" alt="idc" /></p>

<p>但是和别的系统一样，业务总归是千变万化的，很多时候计划是赶不上变化的。没有多久
我们就需要一种强一致性的id，我们对于原有的idc集群需要一个重新的考量。为了不影响
现有idc的工作，我们在idc上增加了一个弱化的管理节点，它仅仅只是会管理集群中的idc
，而不会像dfs一样还要做一些负载均衡和故障转移的工作。所以这个增加的节点其实不能
叫做manager，而仅仅只是一个agnet的角色。因为我们这样一个特殊的agnet的架构，所以
对于我们的一致性问题也提出了一定的挑战，因为我们不能使用manager来平衡或者是分配
相同请求的master机器了。因为idc集群还是和以前一样都是平行的架构设计，所以就会带
来一个所有的idc都是master的问题。我们也确实使用一种算法规避了这个问题。具体的请
参考“一致性问题”。</p>

<p><img src="idc2.png" alt="idc2" /></p>

<p>对于一个没有管理节点的集群，我们原定使用的负载均衡的方式很简单，就两种。一种是
轮训，另外一个是一致性hash。但是一致性hash还是比较少使用的，特别是后来我们使用
了一致性算法后，几乎就不需要一致性hash饿的存在了，轮询就已经可以满足我们的要求
了。因为我们已经不需要知道master机器在哪里，或者是让一台idc机器通过选举变成
master了。这对于系统的简单行和idc集群的性能是一个很大的提升。而我们这个负载均衡
是在客户端实现的。所以对于我们的客户端来说，也是省掉了很多的东西，只需要做一个
简单的哨兵来去维护轮询的idc即可。</p>

<h4 id="id的可视化问题">id的可视化问题</h4>

<p>说到id的可视化问题，有过id生成算法使用经验的同学肯定会想到snowflake算法。
snowflake算法其实是一种偏向计算机的算法。它通过将一个数转变成二进制，然后通过计
算机的移位算法来解决问题。这也是大家经常会想到的解决方法。这种方式将计算速度看
的非常重要，而忽略了了一个问题：那就是人的问题。系统是由人写出来的，也是由人来
维护的。一个好的代码不仅仅只是写出来给计算机来执行的。而应该是写出来给人看的，
好巧不巧的偏偏海能给计算机运行。所以我们并没有使用类似于snowflake的算法，而是使
用了十进制来生成ID。</p>

<p>十进制，我们人类经常使用的一种记述算法。相比二进制，它更贴近我们的生活。以至于
到了我们人类一眼或者谁靠着简单的风格位数就可以区分出来数字的意义。这正是我们想
要一种方式，也可以称之为感觉。因为根据我们的经验，一般的id都是在数据路由中使用
，这个时候其实对于系统来说是二进制还是十进制没有什么差别，因为计算机都能处理，
我们人也不会去看；但是当我们维护人员要去看这个id的时候，往往都是在系统出现问题
的时候，这时候时间就会显得异常的宝贵，再加上当时哪种紧张的心理，如果这个id不是
哪种一眼就能看出来意思的id的话，往往会有很大的打击作用，进而会让维护人员产生更
大的焦虑症状。这并不是我们想要的。我们可以看一下以下的例子来感受一下：</p>

<p><b>9223  3720 3257 7650 688</b>这样的一个数字看起来还算相对整齐，但在系统中，它
看起来往往是这样的一个样子<b>9223372032577650688</b>,这就已经有点凌乱的。压根不
知道表示的是什么鬼。然而，按照snowflake算法，其实它的二进制应该是这样的：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>0111 1111 1111 1111 1111 1111 1111 1111
0000 0001 0001 0000 0100 0000 0000 0000
</code></pre>
</div>

<p>但是我们还是看不懂它表示的是什么意思，我们再对它进行移位计算，分别计算出来它的
各个位置上的值，其实它的真正的表示的值是这样的<b>2199023251472-264-0</b>(中间的
－是为了方便区分添加的)。敢问你现在是一种什么样的心情？</p>

<p>但是是不是这种二进制算法就没用？其实也不是。我们也使用了这种算法的变种，我们将
它使用在我们的排错异常号上，具体的可以请参考虾面的使用id章节。</p>

<h4 id="id模型">id模型</h4>

<p>在我们的业务系统中，我们的id最主要的作用还是作为数据路由的一个标识。所以我们的id
其实最终决定了我们的业务系统数据库存储是不是会均衡或者是趋向于均衡。这就决定了我们
必须要采用一种算法来确定我们生成的id是线性的。又因为我们的id需要对数据库索引的
友好，我们放弃了随机数的算法，而是使用了简单轮询的算法来生成id。</p>

<p>首先，放弃随机数算法是因为本质上我们没有办法确定随机数会对数据库索引友好。虽然
随机数可以满足线性这么的一个条件，但是先后生成的随机数的大小是我们没有办法决
定的,也就是说又50%的可能性后生成的那个随机数会比前面那个随机数小。这样的概率
显然太大，并不适合我们的要求。那么我们只能选择轮询这种算法。</p>

<p>其次：我们不会存储轮询的哨兵的值。这个取决于我们的id并不仅仅更我们的轮询数有关，
还和我们的时间有关。我们的id是在时间的基础上增加轮询数来共同决定一个id的主体，
所以对于我们来说，对于轮询数的单调一致性要求并没有想象中的高。所以也会出现下面
的这种情况：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>429497-9998-01-1-00
429498-9999-01-1-00
429498-0000-01-1-00
</code></pre>
</div>

<p>这个id中，第一部分是时间，第二部分就是轮询数。所以我们的id可能会出现这样的一个
情况：正如第二、第三两个id一样，因为递增到了一个临界值，又为了避免位数的溢出，
我们只能选择将id值的轮询数归0.这样的话，我们也可能会出现部分对索引不友好的情况
（后面生成的id小于前面生成的id）。但是这种情况只是小概率时间，因为这种情况只会
出现在1s之内，当跳过1s后，因为时间的真大，数的前半部分会变大，所以整个数也会变
大。这样就又回到了单调递增的条件下了。</p>

<p>这种id适合做分库分表，但是对于单表的排序id并不适合，所以我们还提供了严格递增的
算法。</p>

<p>严格的递增算法其实和轮询递增算法差不多，只是在我们的轮询数上做了一点点的改动。
我们把单调递增改成了秒内递增，溢出不饭号或者是从定向的方法。比如，生成的id号是
这样的：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>429496-0000-01-1-00
429497-0000-01-1-00
429498-0000-01-1-00
</code></pre>
</div>

<p>这样的号，会随着前面的时间或者是中间的轮询数单调递增。永远不会出现变小的问题。
但是这仅仅是单台情况下的表现，如果是分布式的情况下，也会出现问题。所以这个id
同样不适用于严格的递增情况。后面我们会讲到碰到需要严格的递增的时候我们的
解决办法。</p>

<p>这种id明显的看出来不适合按照轮询数来做数据路由。对于这种id，增长的曲线角度永远
是45，而且是每秒都会重新开始，所以就会导致这些id大概率的倾向于值小的路由。</p>

<p>综上所述：我们目前的两种id增长曲线如图：</p>

<p><img src="4.png" alt="idc4" /></p>

<h4 id="简单唯一性算法">简单唯一性算法</h4>

<p>唯一性在单机的系统中还是一个可以容易解决的事情。但是在分布式的系统中，唯一性对
于架构来说往往是一个挑战。终其原因会有很多，但是最大的问题就是：在分布式的系统
中没有一个精确的时钟。没有了精确的时钟，很多的解决方案就会失去作用，而且失去作
用的不仅仅是唯一性，可能的单调性也是一个问题。</p>

<p>一般解决这个问题的方案是在服务器集群中放一台时间服务器，所有的机器都会每隔一个
心跳时间去这台时间服务器上校验和更新时间。但是就算是再频繁的同步，这种精度也就
是在毫秒甚至是秒级别了。不会有比这个更精确的度了。所以严格的来讲，这不能作为很
好的一个解决办法。</p>

<p>我们的idc集群因为是分布式的也同样的存在这个问题。而我们也采取了一定的策略来去避
免这个问题。我们将我们的id设计成和时间、机器相关。这样一个带上机器编号的id，能
保证在整个的系统中唯一了。以此，我们的id方案为：</p>

<center>
<b>时间戳－轮询数－机器id－数据库位</b>  
</center>

<p>这种解决办法确实解决了这个问题。但是也有一个副作用。因为考虑到我们的id要放下很
多的业务性质属性，所以留给我们的机器id位就会变的很少。我们现在的情况下留给机器
id位的长度仅有一位，也就是说：我们的idc集群最多支持10台机器。看上去10台机器很少
，但是我们单机的承压在每秒10k。所以基本上我们集群的id生成量在每秒100k。这仅仅是
一种类型的数量，在我们的idc中，一种支持100种类型的id，所以我们整个集群的量大概
在每秒1kk。</p>

<h4 id="idc保存数据算法">IDC保存数据算法</h4>
<p>该来的还是会来的，只是设计的时候时候未到。我们开始的时候并没有考虑严格的带有递
增id的需求。但是这个需求在后面没多久就出现了。先来看看我们遇到的问题：我们在三
方内容合并的时候，为了迎合原来的各业务系统，不打破他们的使用规则，所以我们的章
节信息在正常的数据路由id使用的基础上，增加了一个排序id，这个id必须是严格递增的
，因为它代表了章节的前后次序。但是在我们的系统结构中，如下图，我们对于mysql使用
了读写分离的策略，那么问题来了，就算我的同步速度非常快，无限快，它也只是趋向于
实时，但并肯定就是实时的。也就是说同步是肯定要时间的，唯一的差别就是时间的长短
。这也就意味着可能会出现下面的情况：我们在master中插入一个正确编号的章节A，这时
候A还没同步到slave数据库，我们又要插入章节B，这时候我们需要一个编号，我们从
slave数据库中读取一个编号，这个编号是当时slave数据库中最大的编号，我们再加上步
长，其实这个编号和刚刚插入的章节A的编号是一样的。然后再插入master数据库，这时候
章节A和章节B的编号就会发生冲突。在我们的系统中，就会出现章节重复的问题。</p>

<p><img src="7.png" alt="idc7" /></p>

<p>这确实是一个架构上的问题。本质就是写入和读取并不是来自于同一个数据库，所以造成
了数据上的误差。这种问题的解决办法业余很多，以前我们使用的一种办法是在修改数据
或者是需要严格数据一致性插入数据的时候，都要在master数据库中先load一下数据，其
实我们设计的albianj确实也有这个功能，这样做的好处是简单明了。坏处是破坏了架构的
一致性，后期也有可能在代码上引起混乱。而且就一个排序号，这个对我们来说是可以避
免去master数据库load数据的，所以我们采取了另外一个方式：让idc支持这样的一个id生
成。</p>

<p>总体上来说，这样的需求也不是很难解决。但是因为章节是挂载到一本书的，所以这个id
只要在一本书内唯一并且按步长自增就可以了。没有必要做到全局唯一自增。这样的需求
其实更增加了我们的难度。如果只是全局内单调自增，那么我们只要记录下来一个id就可
以了；现在是每一本书都需要一个id序列，所以idc要为每一本书都记录下来它的id状态。
记录每一本书的算法采用了skiplist。我们将书的id作为唯一的key，当前编号和一些源信
息作为value。这样我们就构建了我们书数据中心的整个索引。每次更新或者查询都只是一
个skiplist的操作而已。</p>

<p>我们的skiplist通常情况下都是常驻内存的，所以搜索的时候性能并不是问题。而且我们的
item经过测算是一个很小的值，大概只有10b级别。所以256mb的内存就可以存放大概1kw的
item数据，所以不管是内存还是io都不是我们这个skiplist的瓶颈和消耗点所在。</p>

<p>多本书的问题解决后，我们解决状态的问题。我们给idc配备了一个后台的线程，每隔一个
固定的时间就会触发skiplist的IO化。IO线程会判断skiplist中的item的状态，将短期内
update或者是新增的item刷入到磁盘中。这样状态就会被保存下来。保存了状态后，每次
idc重启都会去判断是否有skiplist的持久化文件，如果有文件，就会先加载这些文件到内
存。如果没有文件，那么就去同逻辑组的idc中随便选取一台，同步skiplist的文件。然后
再加载。这种办法简单，有效。并不存在数据不一致的状态。这是因为我们在生成id的算
法上也会规避这个id状态的问题。</p>

<h4 id="有状态id算法">有状态id算法</h4>
<p>对于状态id的基本上情况下面已经介绍清楚了，但是我们到底怎么去生成这个id？这是我
们需要考虑的一个问题。其实仔细的分析这个id，貌似就是一个zookeeper就能解决的问题
。但是我们前面还有欠债，因为我们的idc已经上线，并且我们的idc是平行设计，并没有
master的角色。所以这就给我们提出了新的问题，怎么样在全是master的情况下，能生成
一个唯一id？</p>

<p>提到zookeeper，我们肯定知道它决定谁是master的算法，也就是选举算法。这个算法被我
们采用，但是我们采用这个算法并不是产生一个master的idc，而是产生一个最大的id。如
下图：</p>

<p><img src="3.png" alt="idc3" /></p>

<p>我们将zookeeper的集群启动选举变成一个常态。将每一次的请求都泛化成选举操作。当然
这仅仅出现在这种严格id的情况下，并不影响别的id的生成。所以它也并不会因为特殊的
需求而给整个集群带来性能的颠簸。我们平行的idc设计导致了每一台机器都可能会接收到
请求，所以我们干脆把这些接收到请求的机器全部当成master机器，然后他们会根据客户
端传输来的bookid得到目前当前机器上的id值，先预加上步长，然后会发送请求到集群中
的每一台idc，接到请求的idc也会根据bookid得到当前的id，然后加上步长，直接返回给
发送端机器，发送端机器拿到id后会和自己的做对比，选取最大的id作为当前这次批号的
id，然后把这个id再次通知到集群中的idc，他们会根据这个id和当前的本机id比较，如果
传输来的id更大，更新当前的id；反之不更新，直接返回。发送端接收到整个通知ok的消
息后，返回给客户端当前的id。这个id即是当前最大的id。</p>

<p>有时候会发生一本书同时发章节的情况，这样我们idc集群可能会有2台机器同时接收到同
一id的申请，也就是所谓的并发，这样也不是不能处理。首先，从业务上来说，对于同一
个id的处理是不是可以被接受？如果不可以，那么我们在业务层就需要使用分布式锁的方
式来规避这个问题；如果业务上这种同时发生也是可行的，那么到我们的idc端是有可能碰
到前后不一致的情况，因为我们的idc集群对于同时到达的同一id的请求，采用的是“类彩
票”方式，也就是所谓的“比手速”，谁先进入idc集群谁就是前面的那一个，后进入的就
是后面那一个。这并不是idc的问题，而是idc其实也无法决定谁先到达这个难题。</p>

<h4 id="id长度问题">id长度问题</h4>

<div class="highlighter-rouge"><pre class="highlight"><code>数据路由: 343429497-9998-01-1-00
有状态id：20160423-000-00-000100
</code></pre>
</div>

<p>看一下这两个数字，对于一个uint64类型的值来说，最大的数是1844 6744 0737 0955 1656，
应该是20位，而我们的数字缺只有19位，少了一位这是为什么呢？</p>

<p>这其实是idc的一个坑，很多时候并不会碰到，但是当碰到的时候可能就已经来不及了，而
且现象会非常的奇怪。这个问题就是曾经被老生常谈的：溢出。我们的千几位是被时间占
用的，而时间会随着年代的久远越来越多。就算我们不以1970－01-01作为起始时间点（其
实我们也是这样做的），我们按照站点上线的时间点作为一个起始点，那么一个uint32的
值也是有限的，如果我们取的时间精度再高一些，值会更大。而其实溢出会更快，因为我
们看一下uint64的最大值，最高位是18XXXXXXXX,所以只要最高到19XXXXXX就会溢出。所以
为了避免这个问题，我们只能把整个id的值缩短到不管怎么变化，都不会过它的最高第二
位。这样，就永远也不会溢出了。所以我们想到了直接缩掉一位，也就是将最大值直接取
1/2，这样就不会溢出了。</p>

<p>这里还提到一个问题，这样设计的idc到底可以用多少时间？其实这个时间非常的长，用
int32最大的值来算，基本上我们的idc使用的年限在175年左右。到176年的时候就会溢出。</p>

<h3 id="id生成器的id和传统id的比较">id生成器的id和传统id的比较</h3>

<p>传统上，我们经常会使用数据库的自增int作为对象的唯一标识，稍微符合现在的系统设计
原则的就会使用GUID／UUID等字符串唯一标识，再进步一些就会自定义一个字符串的唯一
标识，这个字符串不仅仅满足唯一性还会增加一些业务的标识。不管使用何种的算法，它
都和我们对于id的需求又较大的差距，那么这些差距到底表现在哪些方面呢？</p>

<h4 id="和数据库生成id相比">和数据库生成ID相比</h4>

<p>数据库生成id的方案现在基本上只有2种方案：一种是直接int自增，步长为1；另外一种也
是int自增，但是步长可以自定义，一般步长定义成数据库表的个数。</p>

<p>int自增、步长为1的方案其实是扩展性最差的方案。首先：它的事务性要求很高，插入数
据和获取id必须在一个事务中操作，否则id就有偏差的可能。第二个步长固定，无法对应
现在互联网大数据的分库分表操作。这个方案一般都会被用在传统企业的数据库设计中，
因为他们的数据库一经设计基本上不太会变更。</p>

<p>那么第二种步长可自定的方案(如下图)是对上一种方案的优化。将步长设置成数据库表的
数量可以解决当前的数据库分库分表的问题，也减小了数据库的压力。当步长严重依赖于
数据库的表数量，在扩展的时候还需要更改表的设置，从运维和dba的角度来说，其实相当
的不方便。而且对于业务来说，因为步长固定，又为了数据的均衡性，只能选择loop的算
法来进行数据路由。</p>

<p><img src="9.png" alt="idc9" /></p>

<h4 id="和字符串id相比">和字符串id相比</h4>

<p>使用字符串的方案一般也是有两种：一种是GUID／UUID，另外一个是自定义字符串。GUID
／UUID一般情况下是不太可能会碰撞的，所以唯一性倒是能保证的。对于数据路由，一般
是将GUID／UUID做一个hash，然后取模，使用GUID／UUID的很少使用loop等数据路由算法
，也不太好做。又因为GUID／UUID没有业务性质，所以也很难按照业务类型做数据路由。
和数据库生成id一样。所以也在GUID／UUID的基础上产生了自定义字符串id的算法。</p>

<p>自定义字符串id一般使用的也是32位长度id。只是可以根据自己的实际情况来给这32位长
度的字符串赋值。这种的字符串的算法一般会使用本地生成，带上机器信息、类型、时间
戳、顺序号。这样的id可以保证唯一性，也可以满足复杂的数据路由功能。但是没有办法
排序，对数据库索引也不友好。</p>

<p>不管是GUID／UUID还是自定义字符串，总体来说都不是很对我们的需求，我们将它们的优
缺点罗列了一个表：如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">序号</th>
      <th style="text-align: center">优点</th>
      <th style="text-align: center">缺点</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">自定义性强，可以根据实际情况自己定义</td>
      <td style="text-align: center">String有点太长了</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">可以轻松的实现复杂的数据路由算法</td>
      <td style="text-align: center">String截取部分内容或者是整体的hash运算<br />都会有额外的消耗</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: center">自定义算法id有人类识别度，<br />而且后期运维也方便</td>
      <td style="text-align: center">UUID/GUID没有业务性质，人类识别度不高</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">本地生成，无事务性、也无延时</td>
      <td style="text-align: center">一样无可排序性，对索引和写入都不友好</td>
    </tr>
  </tbody>
</table>

<h3 id="我们使用id的方法">我们使用id的方法</h3>

<p>idc服务器生成的id在我们的系统中已经被广泛的使用。在我们的业务系统中，所有的业
务对象的id都是由idc生成的。我们使用这些id进行了我们的数据路由的设计和实现。目前
的数据路由基本上在单数据库1000张表起。我们的idc和albianj相互配合，完成了我们整
个复杂业务层的数据层。</p>

<p>我们也不单单将id使用在数据路由中，还将id使用在排错中。这也是一种以前几乎很少会
使用的解决方案，目前使用下来，运行良好。还未出现异常情况。</p>

<p>下面我们将讨论我们的id使用方案，这仅仅是我们使用的方法而已，并不是标准。根据idc
的id，可以很方便的根据自己的业务来决定自己的数据路由规则。</p>

<h4 id="数据路由">数据路由</h4>

<p>idc生成的id，不管是自增id还是章节唯一id，至少都保证了3个我们经常会使用的元素：
时间戳、序号、库位。在业务系统中，经常会被使用的数据路由算法有几种：根据时间划
分数据库和表，比如将一个月分成3部分，1-10的放在01表中、11-20放在02表中、21号以
后的放在03表中，这样每个月就产生3张表；使用序号的方式有很多，最常见的是使用取模
或者是最后几位确定，比如我们的分表位是3位长度，那么可以表示0-999的数据，这样可
以把一张表分成1000张分表，获取分表位的数值，根据这个数值推出来这个数据应该放在
那张表中，再插入数据。</p>

<p><img src="5.png" alt="idc5" />
<img src="6.png" alt="idc6" /></p>

<p>至于库位。其实就是数据库的编号。这个编号也是经常会被忽视的地方。原因是很多时候
，我们其实也可以根据分表位的数值来推导出来应该将数据放在那个表里。但是这种方法
的问题在于。如果我们要扩展数据库，那么我们只有导数据，将数据先重现平衡，然后再
提供服务的一种办法。虽然我们也可以使用“类二叉树”的方法将导数据的量减小一半，
但是依然挺烦人的。所以我们抛弃了这种做法，我们在我们的id上留了2个位置，专门来给
我们的数据库指定位置。这样我们的数据库在扩展的时候可以不用动我们的历史数据。这
也是我们特殊的业务决定的。一般的业务可能不适合使用这套方法。因为这样的做法可能
会将热数据全部放到新加上来的db中，而我们没有这个问题。所以我们在设计的时候可以
不用考虑这个问题</p>

<p>还有一种数据路由的方式是根据类型来划分。这也是经常需要使用的一种方法。所以我们
在自增的id上增加了类型的位，已方便数据层使用类型进行数据路由。但是我们在章节唯
一id上却没有相应的类型位，这是因为章节自增id其实是我们id的一个垂直细分，也就意
味着只要使用这种id就一定明确的知道你在使用哪种类型的数据，所以这样的意思就是暗
示使用者可以明确的知道正在使用的id用途。所以并不需要类型id。</p>

<h4 id="异常排错">异常排错</h4>

<p>这应该是我们特有的一种id的使用方法。它主要解决两个问题：</p>

<ol>
  <li>将系统内部的异常或者是错误信息给报给了客户，引起信息外泄，导致数据不安全；</li>
  <li>定义一个全局的类似于linux的errno的机制，后期需要维护这个列表的成本太高，并
不是一个很好的解决方案；</li>
</ol>

<p>我们经过仔细的考虑，我们觉得对于一个系统来说，过滤异常只要知道异常类型就可以了；
对于异常信息，不应该报给客户，或者说少报给用户，但是系统却必须完整的记录下来，以
方便后期的排查。所以其实非常的简单，对于我们来说，我们只要构建一个桥梁，将报给用户
的信息和系统内部的信息连结上，然后提供给用户的只是简洁的信息，系统记录详情即可。
这样我们就设计了一个这样的id，它甚至不需要使用十进制，二进制的snowflake算法都一样
能达到目的。因为它只要唯一性，只要能和系统内部一一对应起来即可。</p>

<p><img src="8.png" alt="idc8" /></p>

<p>我们使用这种策略，当发生问题的时候，我们只需要问客户要一个id号，然后使用这个id
号到我们的系统中去查询，即可确定用户当时到底发生了什么问题。这个id仅仅相当于这
个用户一个系统级的sessionid而已。</p>

<h3 id="总结">总结</h3>
<p>我们重新设计和实现了一个完整的、分布式的id生成器。它设计的过程中，我们也碰到了
各种各样的为题，但是最后我们还是一一解决了。</p>

<p>这个id生成器相对来说还是简单的，但是通过这次的idc设计和实现，我们觉得我们最大的
收获是不迷信“高大上”的算法和“高大上”的公司，踏踏实实的根据自己的业务来自己
实现一个符合我们自己业务的id生成器，即保证了我们的业务系统顺利的完成上线，又锻
炼了我们解决实际问题的能力。</p>

<p>这个id生成器到目前为止已经在公司内部稳定的运行了9个月多，中间没有一次出现问题和
异常，可以说我们很好的完成了任务，也更深层次的解决了分布式系统的问题。</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2015/idcreator/</guid>
                <description>
                    
                </description>
                <pubDate>Mon, 23 Nov 2015 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
        
            <item>
                <title>腾讯文学内容中心分布式统一框架的设计与实现</title>
                <link>http://localhost:4000/blog/2015/albianj/</link>
                <content:encoded>
                    <![CDATA[
                    <h3 id="摘要">摘要</h3>
<p>我们设计并开发了内容中心统一的分布式开发框架。我们把它取名为albian，
albian是基于java的（故以下简称albianj）。他主要是面向海量数据处理、海
量数据访问、并解决互联网开发中经常会碰到的数据海量增长问题，也一并解决
互联网开发团队中，开发人员的水平参差不齐的问题。albianj还应当具有良好
的伸缩性和可定制性。他设计并且运行在简单的
web容器中，比如tomcat或者是jetty，也可以运行在application类型的应用中，
但是它依然提供了企业级开发应该具备的一切效能。</p>

<p>从业界来说，目前成熟的框架有很多，但是从EJB因为复杂性而被大多数公
司放弃后，spring+Hibernate在业界成为了事实上的标准。总体来说
spring+Hibernate可以解决掉企业开发的很多问题，但是在互联网行业，在快速
开发、海量数据处理和快速迭代引起的统一问题面前，这个组合还是有或多或少
的问题。所以我们最后决定自己开发一个适合我们自己的框架出来，来解决sh组
合不能很好的解决的问题。</p>

<p>虽然albianj和sh有很多的相似性，可能很多的功能都是重复的实现，但是毕竟
albianj实际来自于我们对于掌控业务和掌控代码的现实需求，所以它更面向于
我们的实际情况，而不是来源于开源组织对于系统的理解或者是某篇论文对于系
统概念的理解。这样，也就意味着albianj相比sh会更实用，并且能给我们带来
更好的可用性和可维护性。</p>

<p>albianj的使用满足了我们在业务上对于程序代码控制和功能上对于处理海量实
时数据的需要。目前albianj已经使用在我们的生产环境中，主要为内容中心提
供数据的存储和读取之用。目前它一共被部署在上百台的机器上，来完成对于几
十台数据库的各种不同模式的访问。</p>

<p>在本文章中，我们主要阐述我们设计和开发albianj的一些观点和一些策略选择
的原因，以及我们是怎么设计和实现albianj的，最后我们会列出实际情况下我
们的开发效率和性能数据。</p>

<h3 id="简介">简介</h3>
<p>albianj主要完成的任务就是统一程序员的工作，让程序员在统一的口径
下完成他们的工作，这仅仅是一个长远的战略目标；更现实的目标是alabianj必
须提供一套简单的机制在应对对于拥有复杂部署结构的后端数据库的访问和在数
据量增长的过程中，方便的切合数据的再划分等等功能。在开源的项目中，我们
考察了guzz和hbm shared，但是前者过于复杂，导致我们迷失在了配置文件中，
而且对于他显式的指定数据路由有一定的不可接受；而后者，它仅仅只是一个补
丁，而且这个补丁的质量真的令人堪忧，不支持分布式事务这是完全不能接受的
事实，而且当使用数据路由之后，分布式事务肯定是无法避免的、肯定会有所需
求的重要功能。所以我们综合的考量下来，决定自己来设计并完成整个框架系统。</p>

<p>对于albianj，其实它和市面上提供的各种开发框架功能类似，最最基本的功能
也仅仅只是IoC和ORM，所以从这2个方面可以看出，我们还是在追求对于OO的控
制。但是albianj不仅仅只是完成这些功能，它更多需要强调一致性。不仅仅是
数据的一致性，而是对于程序员写代码的一致性和可控性，兼具对于各种
albianj中主键的一致性和可控性；其二，它还需要解决一个大多数的框架都没
有解决的问题，那就是数据路由的能力。简单而一致的数据路由功能可以快速的
开发大数据量的业务，并且也可以在短时间让自己的系统重新适应并且无缝的连
连接已经重新切分好的数据。相比传统的开发框架，我们在设计和开发albianj的时候就已经
额外的考虑了更多的内容，并在其中进行了有的放矢的选择，引申出了和以往不
同的开发思路，也实现了我们开始对于albianj设计时制定的目标。</p>

<p>首先，albianj和别的框架不一样的核心点是“单维性”，简单来说就是一种需
求只会一种办法来解决，轻易不会出现第二种办法。就算为此牺牲一定的编程便
利性，albianj也需要守住这个底线。所以这个模式就和spring或者诸如此类的
框架有质的不同，一方面我们没有必要为了迎合新的概念或者新的技术频繁的对
albianj进行升级和改造，另一方面，我们也没有必要为了多功能而引入不必要
的复杂税。从程序员写代码的角度来说，他们也仅仅只需要学会一种途径就可以
依葫芦画瓢似的解决类似的问题。这样的结果就是代码会无比的统一，熟悉
albianj过后开发也是无比的迅速。这一点是albianj一直在追求的，也是一直在
遵循的一个必须准则。albianj所有的功能都是建立在这个标准之上的。</p>

<p>其次，和别的框架一样，我们必须也需要使用配置。但是我们和别的框架不一样
的地方是我们没有“约定优于配置原则”。在稍早之前，随着java对于xml的配
置越来越依赖，导致了很多的java程序员40%的时间在写代码，另外的时间都在
写配置或者是copy配置。后来随着各种抱怨的产生，遂订立了一个规则，就是坑
爹的“约定优于配置”。这个出发点其实和hbm的sharing是一样的，它仅仅只是一
个补丁而已。其实我们经过10多年的互联网开发，总结了一下，我们认为，目前
xml的配置一部分是因为功能的复杂而决定了，另外一部分是被滥用了，两点相
加造成了目前的这种境况，然而为了前面的失误，后面加入了一个补丁（约定优
于配置）来解决这个问题。其实并没有真正的解决问题。所以albianj在设计的
过程中就是尽量的对配置做减法，仅仅保留必要的配置，但是在配置和一致性、
可维护性冲突的时候，我们选择了一致性和可维护性，放弃了对于配置精简的需
求。</p>

<p>第三：albianj是所有组件的总称。其实它里面包括了多个不同功能的组件。对
于这些功能性组件，除了基本kernel以外，所有的组件都是被设计成插件式的。
我们采用了一键安装和尽量透明使用的策略。在一些需要使用的地
方只需要配置项加上某些配置，功能会自动启用。这样在保证解决问题一致性的
同时对程序员又不失开发上的便捷。对于我们的整个系统来说，它不仅仅解决了
开发效率的问题，更是解决了年久失修这个困扰我们团队已久的问题。</p>

<p>第四：albianj对于我们团队来说，还解决了团队中开发人员水平参差不齐的问题。因为
albianj恪守一致性的原则，只要对albianj使用得当，写出来的代码几乎是一个
模板刻出来的，不管程序员的水平是应届生还是具有开发经验的程序员，几乎写
的代码大同小异。在关键的数据路由等功能性问题上，albianj提供的解决方案
是提供一些接口来供程序员使用，程序员要做的事情就是实现这些接口而已，中
间并没有除此之外的任何代码需要程序员来完成。</p>

<p>最后：最重要的一点是，albianj的完成是我们整个团队在互联网开发10多年来的
经验结晶。它容易设计并且容易完成，而且因为它是为我们量身定做的，所以在
使用上并不存在任何碍手碍脚的地方。总体上的架构因为全部是我们自己从头开
始搭建，所以解决bug或者易用性问题也是一件非常简单的事情。我们并没有因
为整个albianj的开发而导致业务的延期，相反在业务的开发中，我们不时的发
现albianj改进的点，对此我们加以了改进，生成的效率也有所提升。我们进行
了逐一的更改和优化。这些更改和优化也会一并在这篇文章中体现。</p>

<h3 id="设计概述">设计概述</h3>

<h4 id="目标">目标</h4>

<p>在上面的介绍中，我们简单的介绍了albianj的一些设计的思想和准则。并且我
们声明了albianj在系统存在的地位和它的一些基本功能。在这一节中，我们将
详细的说明albianj设计的目标和对我们的挑战。在设计和实现的过程中，我们
印证了一些我们初定的目标，在项目使用和实施的过程中，我们也根据我们实际
的情况对于初定的目标进行了一定的筛减和优化。</p>

<ol>
  <li>
    <p>首要的目标就是一致性。在开始设计albianj的时候就把albianj的一致
性作为极致的追求来实现。我们认为在一个软件的声明周期内，一致性起到
的作用不仅仅体现在代码的可读性上，而且更有利于后期的软件的可维护性
上。特别当团队的人员开始流动的时候（其实我们一直觉得人员的流动是无
法避免的），拥有一致性和可维护性的软件会拥有更长的生命周期。而且一
致性不仅仅体现在可维护性上，还有更多的是可以节省前期程序员的工作量
和降低bug出现的机率。</p>
  </li>
  <li>
    <p>albianj必须可以应对海量数据的访问。在现在的互联网系统中，海量的数据
和高并发的访问已经变得越来越普遍。对于庞大的系统来说，应对海量数据和
高并发流量的策略就是拆分。所以本质上，albianj其实需要面对上百台甚至
是上千台的后端服务器，他们可能是分布式的存储，也可能是关系型的数据
库，或者是后端的业务接口服务器。albianj可以提供一种简单而有效的方法
来应对那么多的机器。实际的情况其实并不仅仅只是这么简单，因为albianj本
身就在分布式的环境中，它需要部署在成百上千台服务器上，以提供最基本
的框架服务。</p>
  </li>
  <li>
    <p>作为一个开发框架，albianj必须要可以随时来应对机器的增加和损坏。
albianj必须在有限的时间内来应对机器的部署改变，而不需要更改代码或者
仅仅只是更改有限的配置。传统来说，就算机器一切安全而稳固，整个服务
也会因为数据量的增加而需要重新审视架构和机器的部署。更多的时候是需
要拆分数据和移动数据，而albianj需要在面对复杂的架构调整的时候，轻易
的来应对问题。从而让系统重新稳定架构的成本降到最低。</p>
  </li>
  <li>
    <p>作为整个系统的最基本的底层，albianj需要适应更多功能的快速加入。并且
在albianj的规范内快速的形成组件化，做到即插即用的效应。这不仅仅只是
代码级别所考虑的事情，更多的是需要在设计的过程中就注意对于新功能添
加的便捷性。也就是说需要从头就开始考虑以后的可扩展性，做到一致性、
可维护性、可扩展的平衡和兼得。</p>
  </li>
  <li>
    <p>albianj作为这个内容中心的框架，也必须要对程序员做到尽可能的友好，又
必须考虑一些敏感信息对于系统安全的影响，在这两者之间取得相应的平衡，
来达到albianj最好的亲和性和安全性。这个挑战不仅仅在于对于albianj的
使用上，更多的是需要平衡团队内部参差不齐的开发者的编程水平。</p>
  </li>
  <li>
    <p>因为albianj是从头开始搭建的一整套完整的框架，所以难免会出现bug或者
是开发者觉得使用不是那么顺畅的地方。albianj还必须提供一整套的完备机
制来第一时间解决bug或者是易用性的问题。</p>
  </li>
</ol>

<p>在总体的设计思想上，albianj的挑战非常的严峻，特别是对于一致性的特别的追求和
对于安全性、易用性、可扩展性之间平衡的需求不是一点点的难度。然而，不管
怎么样，最后还是需要具体的细化到各个技术点的目标上才可以告别空中楼阁，
才会有落地实现的机会，所以我们又对albianj在技术上定下了一些目标，这些
目标组合起来，可以实现上文提到的一些对于albianj的期望。</p>

<ol>
  <li>
    <p>首先为了解决一致性问题，我们必须使用一致的方法来实现各种功能。albianj
必须设计和实现一套OOP编程机制，其中包括接口、实现、配置之类的相关标准。
albianj还必须设计和实现一套代码的命名标准、代码的相关逻辑组织标准。
必须建立和实施一套我们使用albianj的标准和方法。因为
我们的业务代码最后都会建立在albianj上，所以必须要夯实作为基础的
albianj和相关的规则规章，我们才有可能实现严格的一致性需求。</p>
  </li>
  <li>
    <p>对于albianj来说，它其实是一整套我们经常使用的功能性工具集的集合，所
以务必要做到在不损失alabinaj整体性的同时，使用合理的切分方法
来设计和实现albianj的各个子功能集。所谓合理的方法，其实无非也就是系
统的划分原则，在albianj中，我们使用了”统一依赖、各自管理、各自实现、
减少干涉”的原则，我们给这个原则取了一个名字：边界原则。具体的办法就
是各自实现自己的功能，尽可能的减少子系统间的相互依赖，尽可能的减少
跨系统的生命周期内的依赖。</p>
  </li>
  <li>
    <p>albianj不推荐并且放弃了“惯性原则”，albianj使用显式的声明来完成所有的功能
性配置或者是代码的编写。每个人的受教育程度不同、开发经历也不一样、
对待系统的认知和视角也各不相同，所以基本上是无法真正的做到大家
在同一个认知水平上来处理事务，也就是说“惯性原则”中最重要的“惯性”对
整个团队来说基本上是无法实现的。所以必须要提供一种技术或者
是一种机制来约束这个开发者各自的”惯性“，已达到对于整个系统拥有
一个一致的惯性的理解。</p>
  </li>
  <li>
    <p>albianj作为大家使用的一个功能性集合，必要还要做到albianl自身必须要
保持简单，并且要做到因为albianj的存在，可以隐藏albianj的后端的业务
部署关系。不管是业务集群还是数据库集群。开发者
只要认为使用了albianj就可以简单的把整个系统当成单机系统一样的开发和
测试。</p>
  </li>
</ol>

<h4 id="架构">架构</h4>
<p>在设计albianj之初，其实并没有一个非常明确的对于架构的标准。我们一
致的认为架构的设计实现与架构的层次类别区分并不是由某些理论或者是某篇论
文或者是某个观点来进行的，而是在真正的实现过程中，随着功能点的增加和实
现的代码逐渐的增多，会自然而然的去对整个的系统进行审视和调整，这部分的
工作会一直循序渐进的继续下去，永远不会停止下来。</p>

<p>到目前为止，albianj已经演化成了具有8个子功能集的大架构。它们之间
并无复杂的依赖关系，除了简单的依赖于同一个kernel以外，别的所有的依赖都
是按需而定的。</p>

<p><img src="all.jpg" alt="all" />
&lt;/br&gt;</p>

<p>在框架开发发展了这么多年的今天，对于一个框架来说，寻找一个架构上标新
立异的机会几乎不可能了。而不同在于在使用的便捷性和框架的设计出发点。albianj主要面
向的就是互联网的开发，这是一个基本的立足点。所以，albianj框架首先
不会是大包大揽的功能性集合，对于一些互联网不会用到的功能一律的进行
生删减，但是对于关心的问题，albianj也结合我们自己的实际情况和需求解决
掉了。从而分门别类划分的这几个功能性子集基本上已经代表了albianj所能精简
的极限了。下面会依次的对这些功能性子集做出解释，并且对于没有被albianj
选择的可能的选型做出取舍的原因。</p>

<h4 id="kernel">kernel</h4>
<p>作为整个albianj的核心，它有2部分组成。一部分是albianj基本上都需要
用到的公共功能；另外一部分也是albianj都需要用到的，并且是更加重要的、
满足我们对于管理service需要的ioc功能。</p>

<p>先说公共功能。这部分包括了很多的功能性的封装，包括但是不仅仅局限于hash
算法、输出型参数、日期操作、网络基本接口、反射基本接口、运行时栈信息、
加密解密安全、数据验证接口、xml解析等功能。他们是所有的albianj功能集可
能会使用到的，但是我们又无法给他们分开归类的功能。我们把这些功能统一的
放到kernel下面的公共功能集下面，以供albianj使用。</p>

<p>这部分的功能对于albianj的使用者来说，也可以被直接拿来使用，但是更多的时
候，除了验证机制以外，别的功能基本上都不太用得着。所以对这个功能包不清楚或者不
知道它的存在并不影响合理的使用albianj。</p>

<p>对于ioc功能来说，这是整个albianj的核心。其二，对于使用albianj作为开发
框架的业务系统来说，也是它们的核心。ioc都是提供了一个控制反转的功能。
将我们的接口和实现分开，然后根据自己的需要加载实现。传统的ioc（比如
spring）会有n多种的注入方式，初始化参数、接口、属性等等。但是
albianj仅仅使用一种方式：接口方式。选取这个方式的主要原因有以下几个方
面：</p>

<ol>
  <li>
    <p>albianj认为提供多种的注入方式会引起代码的混乱和配置的文件的复杂度，对
于可维护性来说，过多的解决方案可能会适得其反。当有多个同事同事使用
多种方法时，虽然它们的方法方案被限制在一个框架内，相互之间还是会增加
学习成本，维护成本；</p>
  </li>
  <li>
    <p>选择接口注入的方式是因为albianj需要对于service进行控制。在比较了一些注
入方式后，接口注入是最适合albianj的一种方式。为了更好的管理
各个service和以后的扩展（这会在下一点中有详细说明），albianj必须要干扰
service的初始化和使用过程。albianj需要给每个service标注它的生命周期，
已提供包括惰性加载之类的各种功能；</p>
  </li>
  <li>
    <p>上面讲到以后的扩展。对于albianj来说，目前的service都是在本地运行的，
不会出现remoting的调用，也不会出现微服务的模式。但是互联网的世界瞬
时万变，现在不需要不代表以后不需要，为了让albianj活的更长久，又更强
的生命力，albianj的ioc功能是被设计成可扩展的。以后如果需要加入
remoting的过程调用，对于albianj来说也仅仅是只需要修改service初始化
部分即可，并且当加入remoting调用后，生命周期和惰性加载将会更加的适
用。</p>
  </li>
</ol>

<p>对于albianj的ioc来说，它仅仅只是需要一个配置文件来控制，配置好name，接
口和实现，除了配置以外，albianj还要求所有的service都必须实现
IAlbianService接口，如果是使用默认的albianj的service功能，为了方便，
albianj也提供了FreeAlbianService的基类。这些规则都满足以后，开发者就可以根
据albianj提供的方法从ServiceRouter中根据配置的name获取service就
可以了。剩下的事情都是由albianj内部来完成。</p>

<p>所以albianj的kernel提供了一个解析xml的功能，albainj会把配置在config文
件夹中的配置文件根据实际启用的功能集来加载和解析xml。但是albianj的xml
解析仅仅是提供了最基本的接口功能，因为每个配置文件的格式都是不一样的，
所以具体的解析配置文件的工作被丢给了实际的功能集来完成，这样一来方便了
开发者对于albianj的二次开发，二来也是大大的节省了albianj本身的代码和人
力成本。</p>

<p>那么现实的问题是那些service从哪里来？这些service是在albianj启动的时候
根据你的配置已经进行初始化了。显然albianj使用了单例模式对service进行了
控制。albianj在使用的时候需要使用者在进程启动
的时候显式的调用albianj的启动函数，已启动并且初始化整个albianj环境。这
部分的启动不仅仅初始化albianj的kernel，更是初始化了使用albianj的所有已
配置的service和所有已配置的功能，包括后面会讲到的数据路由、ORM、配置等
等。为了更快的启动albianj和进程，albianj的加载方式还提供另外的一种异步
加载功能。但是使用albianj必须在albianj加载后使用。异步加载仅仅是提供了
进程可以在加载albianj的同时加载它所需要的另外的一些功能。</p>

<p>albianj的kernel除了提供最重要的这两部分之外，在kernel内部还提供了线程
池和异常处理，也定义和实现了log接口（关于log后面会有详细的叙述）。线程
池的作用主要是提供异步的数据操作，这部分会在ORM和缓存部分为使用和提及，
而异常是整个albianj的基础组件。这里所提及的异常是经过完善后的异常，
和程序直接抛出的异常并不是完全相同。这里的异常将会包括比原始异常更丰富
的堆栈信息，它主要面向的是程序员开发和业务处理过程中的日志，让开发者或
者是运维更快速的确定发生异常的地点和原由。</p>

<p>就目前来说，albianj的service已经足够我们使用，当面对的压力变大，系统
需要扩展的事情，只要扩展FreeAlbianService的生命周期实现功能就可以
了。albianj给每个service都定义了一个生命周期，状态依次是：</p>

<ol>
  <li>
    <p>Normal：表示service刚刚构建出来，还不能被albianj初始化，并且不能被
直接使用；</p>
  </li>
  <li>
    <p>Initing：表示service在构建出来后正在执行albianj的初始化功能，在这里
你可以初始化刚刚生成的service，典型的例子是当service作为微服务提供
的时候，在这里可以想nameservice注册service；</p>
  </li>
  <li>
    <p>Running：表示service已经在正常运行状态，使用者可以通过albianj框架调
用这个service；</p>
  </li>
  <li>
    <p>UnLoading：表示service正在被卸载，一般来说，这步除了设置状态和卸载
initing的时候加载的资源就没有什么了，但是如果这个service作为微服务，
那么需要在这里把service从nameservice中注销掉；</p>
  </li>
  <li>
    <p>Unloaded：表示service已经卸载完毕，正在等待GC回收。service到这一状
态后，它将不能被albianj调用，所以这一状态对于开发者来说是透明的；</p>
  </li>
</ol>

<p>albianj的ioc是albianj所有功能的基础，通过简单而可靠的方式实现的ioc为
albianj提供了最大的方便。在扩展性方面，albianj也给了开发者在统一的基础上最大
的自由。下面的所有albianj组件都是建立在albianj ioc的service模型的基础
上。所以搞清楚albianj的ioc，基本上就搞清楚了albianj的一半。</p>

<h4 id="datarouter">DataRouter</h4>

<p>数据路由其实设计和实现albianj的初衷，也是花费那么多的力气，重新找一个
轮子的最基本的动力。上面提到的kernel其实也是因为
数据路由的存在而设计和实现的，kernel的最初功能只是为了管理数据路由中使
用到的service，但是在实践中发现这部分其实也是整个系统所需，才开始认真的重
新设计和重构了原本属于DataRouter的这部分，然后把它单独的作为一个功能开
放给开发者。</p>

<p>我们设计和实现数据路由很大一部分的原因是：目前没有找到一个合适我们实际
情况的路由组件。数据路由：它主要完成的功能是当开发者对数据库进程操作的时
候，数据路由可以根据配置的路由信息把查询或者是数据提交到正确
的目的地。这些目的地包括但是不仅限于数据库，还有可能是一个分布式的存储，
或者是一个nosql的数据存储服务。目前互联网的现状是，几乎每个公司对于数据库的路由功能相对来说迫
切程度比较大，但是找了一下开源，结果还是挺失望的，发现并没有一个简单而
有效的数据路由可以直接拿到使用。连可以拿
来做二次开发的都没有。那么在无路可走的时候，我们开始自己设计和实现数据
路由。</p>

<p>结合我们的实际情况，首先的问题就是数据存储的异构性。目前我们大量使用了mysql作为主力
存储，mysql确实也因为优异的性能表现扛住了压力，但是这不代表我们
仅仅会在mysql上做开发，可能也会引入别的数据库，比如oracle。所以albianj的
数据路由必须要支持异构的数据存储。在支持异构存储的情况下，后面的扩
展才不会大动筋骨。</p>

<p>其次，根据实际情况，albanj的数据路由必须要支持存储的运维部署。比
如支持双写模式、读写分离模式等等。更高的需求是这些运维模式的支持必须是
无缝的，对于开发者来说是透明的。在支持存储部署模式的情况下，albianj还必须
做到简单而有效的支持数据的迁移等等后期的维护问题。这样在目前我们的运维
人手和DBA人手都不是很充足的情况下，可以做到尽量简单的维护我们的系统，
节省我们的人力成本。</p>

<p>再次，albianj的数据路由必须可以随心所欲的进行控制。比如路由的开启和关
闭，或者是路由的重定向等等。只要存储的数据已经到位的情况下，albianj的
路由必须可以在第一时间进行系统的支持。这部分也需要对开发者透明，仅仅需
要运维的改动就可以实现。</p>

<p>然后，albianj的数据路由还必须支持数据的完整性。对于所有的系统来说，数
据的完整性是必须的要求之一，也是最重要的要求之一。因为数据路由的加入，
使得其实对于开发者来说，后端数据库已经被屏蔽了。后端的数据库是不
是采用分布式部署等等信息全部被屏蔽掉，所以albianj必须要替开发者在
albianj的层面上解决这个数据的完整性问题。这个完整性问题在分布式数据库
的时候被扩大，原本的事务被扩大成分布式的事务，也就是说albianj也要必须
能支持分布式的事务。</p>

<p>最后：也是albianj的一直坚持的一点，在支持这么多的功能的时候，必须要做
到统一。必须要做到配置上的统一、代码级别上的统一。</p>

<p>经过前期实际的项目实施，albianj的数据路由被总结成4种情况:</p>

<ol>
  <li>
    <p>最简单的一种是直接把一个对象保存到路由指定的数据库.
<img src="dr1.png" alt="直接保存对象" /></p>
  </li>
  <li>
    <p>稍微复杂一点的是需要同时保存多个对象到各自指定的路由数据库，典型的
操作是在保存一个对象的同时再保存一份日志.
<img src="dr2.png" alt="保存多个对象" /></p>
  </li>
  <li>
    <p>再复杂一点的保存多份，也就是多写.<br />
<img src="dr3.png" alt="多写" /></p>
  </li>
  <li>
    <p>最后是albianj必须还有路由sql语句的能力，而不仅仅是路由数据对象.
<img src="dr4.png" alt="路由Sql" /></p>
  </li>
</ol>

<p>上面的饼已经画的足够的大，现在是实现这个饼的时候了。把空中楼阁落地。
首先确定的一点是这个庞大的数据路由必须在我们的albianj内部实现，
而不是使用类似于mysql proxy这种组件。最简单的原因就是proxy这种组件只能
解决相关的单一类型数据库的问题，它不能解决所有数据库的问题。也就是说不能解决
在扩展中需要的异构数据存储的问题。那么唯一能剩下的就是在JDBC的时
候做手脚了。先来看一段简单代码：</p>

<blockquote>

  <div class="highlighter-rouge"><pre class="highlight"><code>cmdText="INSERT INTO User01 Values....";
connString = "database=db1;user=root...."
Connection c = new Connection(connString);
SqlCommand cmd = new SqlCommand(c,cmdText);
SqlTransaction tran = c.getTransaction();
try {
    tran.begin();
    cmd.Exec();
    tran.commit();
} catch() {
    tran.rollback();
}finally{
    c.close();
}
</code></pre>
  </div>
</blockquote>

<p>这基本上就是实现一个JDBC最简单的模型，我们需要在这段代码中绣出花了，
让这朵花能支持albianj的数据路由功能。仔细看这段代码，其实除了cmdText和
connString这两句以外，别的代码都是已经被公式化的，也就是没办法更改。
而这两句的是仅仅是能定义的两句。其中cmdText中的表名和connString中的
database值是能自定义的，那么现在的问题就是怎么样通过一个规则来
确定我们这里表名和basedata的值。其实这个规则就是确定数据路由。在
albianj中，因为albianj位于底层，albianj只是调用路由规则，并不定义
路由规则，路由规则都是有开发者定的，所以现在的问题又变成了怎么样来
调用规则？</p>

<p>在调用规则之前，还要确定一个事情：在哪里调用规则？或者说为了什么而
调用规则，一个很明显的问题是不可能让程序员自己直接去写JDBC代码，所
以albianj必须要提供一套对象和数据库的映射，那么ORM也就被引进进来了。有了
ORM，又需要更改表名，那么一个地方已经找到了，就是在数据对象转成Sql
语句的时候把表名给拼出来。那么最后一个问题，database的问题，在什么
时候确定database的值？database的使用是在连接数据库的时候，所以必
须要在连接数据库之前确定这个值。而数据库又和路由相关，所以在确定路
由的时候就可以确定database的值。那么最后，albianj演变成路由3部曲：</p>

<p><img src="dr5.png" alt="路由选择" /></p>

<p>对着这3部的路由选择，在albianj中也提供了一个基类来完成实现这个功能。
在albianj中，FreeAlbianObjectDataRouter基类就是这个实现类，在通常的情
况下，开发者只有继承这个类就可以了，对于自己的路由需求，可以通过这个类
里面的不同的方法来实现，这个类一共提供了6个方法，分成2组，一组提供给读
服务，另外一组提供给写服务。但是仅仅是这个基类还无法完成albianj提到的路由
功能，整个的路由功能必须还需要配置文件的配合。其中drouter.xml就是配置
路由的配置文件，drouter根据每个对象来定义它的路由，在发生数据操作的时
候这些路由会被albianj自动调用；还有一个配置文件是storage.xml，这是配置
所有数据库连接的文件，这里的配置信息需要和drouter.xml中的路由配合起来
使用。</p>

<p>albianj在这里并不会牵涉到实际的业务数据路由拆分策略，这是因为具体的拆分策略都
是需要根据自己的实际业务来决定，而albianj只是要实现一个可以实现这种策
略的机制而不是具体的事实策略，所以这部分将不会在本文中出现。</p>

<h4 id="orm">ORM</h4>

<p>在albianj中，因为一些异构数据库的问题，要实现数据路由，必须要依靠ORM来
解决这个问题，那么现在，我们开始说说ORM。</p>

<p>在albianj中，ORM也是被作为一个基本的组件实现。但是albianj中的ORM和很多开源框
架的ORM有很多功能上的取舍。albianj对于ORM进行了精简，已保留albianj最需要
的部分为前提，把所有不相干的功能全部删除掉。所以albianj中的ORM其实仅仅
只是一个对象和关系数据库的实体和表结构映射和相关操作。它并不提供在ORM层面处理复
杂的对象间关系依赖的问题，它也没有涉及到很多的ORM都会存在的多种功能，
比如查询方言等等。这部分的工作有的被albianj转嫁给了程序员来完成，有的
直接就是不在albianj的设计理念之内，所以被删除了。而被转嫁的部分，在
albianj的设计理念中，可以让程序员更好的完成业务开发，也可以更好的处理数据的加载等
问题，虽然在工作量上看似增加了开发者的工作，其实对于系统整体来说，这部
分的工作可以让开发者更好的应对业务问题和系统压力问题。</p>

<p>但是albianj的ORM集成了上文提到的DataRouter，albianj主要是为互联网开发
而设计和实现的。对于albianj来说，解决大并发和海量数据显然要急迫于解决复
杂而吃力不讨好的ORM中的对象问题、全功能问题等等。也因为加入了DataRouter，albianj必
须要重新设计ORM的数据一致性功能。</p>

<p>数据一致性的问题在ORM中可以简单的转换成事务的一致性问题。当数据库只有一台的
时候或者数据都塞在同一个数据库的时候，数据库可以解决掉事务
的一致性问题，但是当需要使用分布式数据库的时候，显然单机的事务已经
无法满足系统对于数据一致性的要求，所以albianj必须引进能在多台数据库服务器
之间可以保证数据一致性要求的技术。在albianj中，这种技术使用了二次提交
来完成。</p>

<p>在albianj中，每一次的数据库访问被成为是一个job，这个job仅仅与现
实业务相关，和albianj需要访问的数据库实例的数量没有关系。或者说albianj
可以在一次job中访问多个数据库实例。所以，job在abianj中其实是一个分布式
事务的控制中心，它对多个数据库实例的事务进行了抽象和统一接管，但是job
不直接管理各个数据库实例的事务和链接，这部分的工作被albianj交给了task
来处理。在一个job中，需要操作的数据库实例一一对应于task。task接管了对
于数据库实例的操作和事务过程。从而可以让albianj支持分布式事务。</p>

<p><img src="dr6.png" alt="分布式事务结构" /></p>

<p>albianj的分布式事务并没有采用并行策略，也没有采用嵌套策略。而是同时采
用了这两者的结合体。因为分布式事务的性质决定了在一些极端的是情况下，数
据库中的数据还是会有可能存在不一致的情况。这是采用分布式事务的时候无法
避免的问题。但是albianj也进行了最大程度的去规避这个严重的问题。albianj直
接使用分布式锁搭配上job-task结构就可以处理规避掉这个问题。</p>

<p>albianj在对操作数据的接口中，置入了通知机制，当albianj的事务发生错
误的时候，首先是自动的去回滚，但是当发生了硬件级别的错误后，比如断电等
等问题，那么这时候自动的回滚无济于事，所以albianj会通过通知机制来通知
到系统的维护人员，维护人员会对于这个数据进行回滚。那么在这个回滚的时间段，
albianj的锁服务（下面会讲到锁服务）一直锁定着资源保存事务发生时的状态，最
后会由维护人员把这个资源释放。这种极端的情况几乎是不太可能发生的。现实
中，因为业务的特殊性问题，albianj目前服务的严重的资源抢占情况比较少，
所以这套流程还没有真正的派上什么用处，但是albianj为分布式事务提供了这
种机制，以满足以后系统扩展所带来的数据一致性问题。</p>

<p>显然，albianj的分布式事务对于使用的环境要求是相对比较苛刻的，而且产生
的效果并不一定能达到100%的事务完整性。但这并不是我们故意为之，而是因为
分布式事务本身的不可控性导致的。分布式的不可控性到目前为止其实都没有一
个非常完善的机制来解决，而是尽量的使用各种策略方法来规避各种问题，以达
到事务的一致性。</p>

<p>那么是不是就没有一种办法来作为替代，来解决这种不可控性？所谓：魔高一尺，
道高一丈。方法总比苦难多。所以前辈们又研究出来另一种方案来替代albianj
所使用的方法，这个方案总结下来就是：拆分-重试-记录。</p>

<p>我们把它称为“记帐”模式。把整个的事务切
分成多个单个事务，最后由job把这些事务的对象发送到一组消息机器。这时处
理方式分成两部，前台直接给用户返回提交成功；服务器开始自己的工作。服务
器端会有一组机器不停的去取消息中的数据，
取到数据后就执行，并且每次都记录下取到的数据和版本号等等信息，这些信息
用来作为判重的依据，这样依次的执行队列中的消息，当执行过程中发现异常的
时候，还是自动的去回滚消息，如果发生硬件级别的问题，也是通过通知机制来
强行的恢复数据。</p>

<p><img src="dr7.png" alt="记账式事务" /></p>

<p>记帐方式相比albianj方式的优点是它可以重试，可以在网络不是那么稳定的环
境中进行安全的事务，而albianj事务的解决方案其实就是一锤子买卖。它无法
实现在网络不稳定的情况下进行不断的重试来
实现分布式事务。但是albianj说使用的方法的成本更低，性价比相对第二套方案更高，对
于开发人员来说，也是相对更加的方便。所以我们最后采用了目前这种直接通过
job和task的抽象，然后管理数据库实例连接和事务的方式。</p>

<p>事务的问题解决后，albianj开始设计和实现数据访问接口。在albianj中，
对于数据的访问一般都是通过JDBC来处理，目前albianj提供的接口有mysql和
sql server的。当然也可以很方便的就实现oracle的。对于一个数据层操作来说，
也就是简单insert、modify、delete和select功能。这些功能都需要albianj
使用反射和配置文件配合解决。这里的配置文件是persisten.xml。它是一
个数据实体结构和数据库表结构一个对应关系的文件，albianj提供了对于字段
各种属性的配置，比如是否主键、长度、数据类型等等。每个albianj使用的实
体必须在这里登记以便albianj引擎可以在启动的时候加载这些实体的信息，然
后供后面的ORM使用。这个配置文件还提供了和缓存的集成，可以通过使用一个
cached的配置节就让实体自动的支持缓存的操作。这样我们在albianj的
persisten层也要提供一个对缓存支持的操作，所以就有了find簇函数和load簇
函数的区分。find簇的函数表示先查找缓存，当数据无法在缓存中找到的时候，
在调用load簇函数从数据库中直接获取。</p>

<p>为了给程序员提供最大的方便，albianj还集成了save方法。简单来说就是当这个
实体的数据数据库中存在的时候就更新，没有的时候就执行插入操作。那么这就
牵涉到两个问题：怎么让albianj知道数据是不是在数据库中存在？还有一个：
如果更新，怎么知道数据库中的数值和目前保存的数值有什么改变？</p>

<p>要解决这些问题，albianj对所使用albianj的对象进行了统一的接管和管理。
albianj提供一个IAlabianObject接口，来完成对象的统一工作。按照惯例，
albianj也提供了一个基类FreeAlbianjObject供开发者使用。在albianj中，更
多的会被推荐使用FreeAlbianObject基类而不是IAlbianjObject。因为使用
IAlbianObject开发者还必须要自己实现albianj制定的规范，而这个规范
FreeAlbianObject已经实现了，所以没必要再实现一次。而且自行实现还有考虑
不周或者是实现失误的风险，还不如直接使用FreeAlbianObject方便。那么这个
接口到底提供了什么功能呢？它包含了一个IsNew属性，这个属性属于albianj的
kernel属性，开发者是无法更改的，这个属性标明了实体对象是否是新创建或者
是从数据库卡中获取获得。另外这个接口还定义了一个私有的map来管理这个实
体原来版本的值（如果有的话），在albianj执行ORM的时候，albianj会通过这个
map中的值和对象中的值进行比较来确定哪些字段需要更新。那么这也说明了从
另外一个角度来说，当有对象需要更新的时候，必须先从数据库中先load一下最
新的数据，然后才能去使用已经发生更改的对象来更新数据库。</p>

<p>另外一种特殊的情况发生在读取的时候，读取数据的时候并不一定都是通过对象
的唯一Id来获取，虽然albianj推荐使用唯一id。所以albianj提供了IFilterCondition来
实现对于数据的筛选，为了更快的满足业务，albianj还提供了
IOrderByCondition接口来提供对于数据的排序。这是albianj为数不多的不OO的
地方，也是albianj认为为了节省劳动力而可以变通的地方。</p>

<p>albianj的ORM重点并不在于实现全部的ORM功能，它删掉了诸如延迟加载等等很
多原本属于ORM的功能，但是却独树一帜的和数据路由功能结合在了一起。
albianj的ORM通过合理的工作分配和调度，使用最小的代价实现了最大的实用价值。</p>

<h4 id="分布式锁服务">分布式锁服务</h4>

<p>在albianj的设计中，分布式锁服务是从开始就被认为是一个极其重要的主键。
但是因为业务实际情况，导致了在整个系统中，发生资源抢占的情况并不突出，
可以说是几乎不存在，这是特殊业务导致的，并不是albianj本身的问题。
但是我们也确实考虑了分布式锁服务的机制，并且认为还是很有必要实现它，以
保证在一些极端的情况下，数据仍然保持绝对的一致性。我们将会在下一篇的文章中详细的
论述我们的分布式锁服务的构建，这块和分布式存储一样，是一个单独的组件，
详细请查看分布式锁服务的文章。</p>

<h4 id="对象唯一id生成器">对象唯一ID生成器</h4>

<p>albianj作为在分布式系统场景下使用的一个基本开发框架，id生成器也是一个
必备的功能。作为一个在分布式系统这个特定条件下的说使用的id，这个id必须
满足几个特点：</p>

<ol>
  <li>
    <p>id必须唯一，这个好像是废话，但是确实是id的最主要的功能；</p>
  </li>
  <li>
    <p>id必须要自带业务功能，必须要做到“望文生义”，必须看见id就能知道这个
id所表示的意思；</p>
  </li>
  <li>
    <p>id必须是可以有一定的规律的，这个规律id生成器能自己实现最好，如果这
个规律有很强的业务性质，id生成器无法实现，那么也要流出空余的槽位；</p>
  </li>
  <li>
    <p>id必须能明确的携带它的生成信息，以方便发生问题时第一时间定位现场；</p>
  </li>
  <li>
    <p>id必须满足业务和数据存储的需要，必须要在合理的范围内生成；</p>
  </li>
</ol>

<p>根据上面的几点，albianj一共设计了3种id生成器，一种生成的id是给log
使用的，这部分会在log部分中详细说明。剩下的2种id生成器一种是albianj自
带的，它所生成的id是一个32位长的字符串；另外一种是一个单独的由c写成的
服务，它所生成的id是一个int64的值。</p>

<p>字符串的id直接由albianj生成，它依赖albianj自带的kernel属性文件，位
于config目录下。这个字符串由4部分组成：</p>

<p>4位长的machineid-7位长的appname-14位长的时间（精确到秒）-4位长的随机数</p>

<p>对于machineid和appname来说，它们如果长度长于规定的值将会被截取，如果长
度长于规定的值，会在左边进行pad操作。这样，albianj就可以保证控制生成的
id一定是32位的长度。这个生成的字符串起初被设计用来作为对象在数据库中的
字段，因为字符串的扩展性和自定义性实在太好了，他的诱惑实在太大，但是当
用字符串作为主键的时候，引起的性能问题也相比int会慢好几倍，所以最后
albianj放弃了用字符串作为对象唯一标识的做法，但是这个id被用在了job上，
他被用来标识job，让job在整个系统中唯一，并且也被用来处理当系统发生异常
的时候，让运维可以快速的通过id定位事发现场，进行进一步的处理。</p>

<p>我们在albianj真正用来做对象唯一标识的是int64的整数型id。整数的id相对于
字符串来说肯定是能快上好几个数量级的，特别是在索引筛选的时候。所以
albianj最后选择了用这个方案来解决对象唯一性问题。</p>

<p>整数型的id也采用了2种方式。一种是二进制按位移动构建的，另外一种是10进
制，采用乘法的方式实现的。二进制的方案是实现简单，保证不会溢出，但是程
序易懂人类难理解。10进制的方法实现也简单，但是如果保证不溢出的话需要精确
的计算，还有一个是逼格不够高，总是觉得有点土，但是好处是人类能看懂，而
且很容易的就能分辨出来。不管是二进制还是十进制，他们的实现思想都是一样
的，就是按照位数进行左移。</p>

<p>一个数由4部分组成：时间戳、生成id的machineid、id的类型、随机数
。二进制的数前32位是时间戳，接着8位是machineid，然后是10位的类型，最
后是10位的随机数。而十进制的组成是按照真实的数据位来划分的，真实的数据
位就是十进制为一位，而十进制为了规避int64的最大值问题，还必须要舍去掉
最高的一位，所以一共就只有19位，而又因为兼容原来的数据类型而不至于更改
所有的数据库表，所以我们的id还是能带符号的，这样就被减少了一位，所以一
共就只有18位可以供使用。所以十进制的id是：32位二进制的时间戳转换成十进
制后左移（这里是直接按照十进制移动，而不是二进制，下同）9位，然后接3位
machineid的值左移6位，再接4位随机数左移2位。最后的2位空出来是为了给程
序自定义数据路由使用。这里没有type对吧？因为在我们的系统中，有明确对象
类型的对象才会使用十进制数的id来区分，id生成器已经最后空出来了2位，就
是给开发者自己标注使用的，所以这里的十进制id是没有显式的加入type信息的，
因为对我们的业务来说，这些type都是已经被定义并且被固定的。而且也不用担
心id会重复的情况，不一样的type会使用不同的id随机数槽进行计算，就算在单
位时间内生成同样的两个id，也因为type的不同，他们不会被保存在同一个数据
库中作为同一个类型对象的主键，所以并不冲突。但是为了后期在使用上有
更大的自由使用幅度，albianj的id生成器也有一种后4位递增的规则id，以保证当业
务需要使用hash或者是取模运算做数据路由的情况，这种情况还在id中加入了
type的值。</p>

<p>为了更好的数据库性能，albianj的id生成器生成的id都是自增的，但是它
并不保证在相对狭小的时间内递增，而是保证在一大段的时间内单调递增，这个
一大段的时间可以确立在1s-2s这个时间段。这也就是说并不能把id生成器生成
的id用来做时间向量。但这并不会极大的影响数据库的性能，
从理论的角度出发，可能会让数据库的索引有分页，断页的操作，但是从实际的
情况来看，基本上对于数据库的影响是没有的，所以可以放心大胆的这样设计和
实现。</p>

<p>在设计的时候，albianj的id生成器是接入nameservice，使用nameservice来保
证id生成器的高可用性，但是在实践的过程中，发现其实id生成器主要依赖的仅
仅是一个时间戳，albianj可以把生成的id看成是一个时间向量，而id生成器服
务是一个无状态的服务，所以最后albianj放弃了原来接入nameservice的计划，
而是使用了平行部署+负债均衡的方式来实现了id生成器的高可用性。</p>

<p>albianj实现id生成器的时候采用了短链接的方式，也提供了长连接的方式，但
是默认和推荐使用短链接。这是和我们现实的环境有关的，albianj面对的服务
器集群有可能是跨机房部署的，在大内网内，长连接相对短链接来说不是那么的
稳定，使用短链接可以有更高的健壮性和可用性的保障。</p>

<p>为了更好的使用id生成器，也为了兼容现实中正在使用的多语言情况，albianj
还给id生成器集成了一个restful服务，通过restful服务，可以满足所有站点对
于唯一id的需求，也大大的方便了隐藏后面的id生成器集群。</p>

<h4 id="log系统">log系统</h4>

<p>作为一个要在分布式系统中运行的框架，日志系统是一个必备的功能。不管是开
发人员还是运维人员，但系统出现问题的时候首先是由监控系统发现，但是监控
系统一般只能是发现问题，并不能诊断问题的原因，这时候就需要日志来帮忙。
日志：它是系统在线上运行时的黑匣子，通过日志往往可以救我们一命。</p>

<p>albianj的日志还结合了异常处理系统。对于抛出问题的异常，albianj会详细的记
录堆栈信息，以便后期的维护和检查使用。albianj也顺带解决了可能的信息泄
漏问题，类似于java中经典的tomcat抛出的带有内存信息的提示信息和c#报出的
“黄页”。albianj解决这个问题的方式是使用2种不同的方言来分别给出信
息.当发生异常或者是发生错误的时候，albianj定义了一个总体的、模糊的、概
述性的信息以提供给用户，而会把详细的堆栈信息记录到我们的日志系统。两者
之间通过使用上文讲到的id生成器生成的id和一些干扰的id作为关联，以方便运
维人员方便的定位到底是哪台服务器出了问题。albianj并没有使用类似于linux中
的errno的机制来逐个的定义错误，这是因为errno实在太难控制和管理，随着时
间的推移，项目需求的增长，团队的各种变迁，最后如果使用使用errno，首先
得有一个相关的冗长的文档来解释，其次是必须再专门派一个人去维护整个文档
和所有的errno的定义。而这里说出现的异常信息或者是错误信息，作为客户并
不需要具体的出错原因，而只是仅仅可以在报告错误的时候能有一个标识，而对
于系统来说，根据这个标识就可以查找到日志，这样就可以获取出错的信息，仅
此而已。而对于如果是相同的异常或者错误，使用类型或者是通过出错的地点就
可以知道是不是同一个异常，所以根本没有必要用类似于errno这样的重型机制
来解决异常和错误的问题。</p>

<p>albianj的log基于log4j实现，这样做的好处是大大的方便和节省了很多代码量
的开发，第二个好处是log4j几乎实现了所有的日志可能发生的记录行为。这两
点满足了albianj对于系统的需要。当albianj启动的时候，就会去建立日志文件，
当日志增大到一点的size后就会被切分到另外一个新建立的日志文件。建立的文
件名上都有新建的时间点，以便查找的时候可以尽可能方便的定位。</p>

<p>目前因为人手的问题，albianj的日志还是散布在各自的服务器上的，这给日常
的运维带来了一些额外的工作，并且也并不是那么的智能化和自动化。后期，我
们将会设计和开发一个logdb。logdb不仅仅会统一而集中的收集和管理各种日志，并且允许
在收集日志的时候加入需要的一些特殊业务。logdb已经在考虑之中，后续会有
logdb的文章被推出来。</p>

<h4 id="缓存系统">缓存系统</h4>

<p>在现在的互联网企业，几乎没有一家敢说自己可以不用缓存，我们当然也不例外。
在设计和构建albiaj的时候，也把对缓存系统的支持作为一个必不可少的组件加
以了考虑，作为albianj一贯要求的标准，在实现albianj对于缓存支持的同时，
尽可能的做到albianj所强调和坚持的一致性原则。经过努力，albianj不但把对于
缓存的支持实现了，而且还做到了对于开发者来说绝对的一致性和未曾强调的一
键使用。</p>

<p>在现今的互联网大环境下，缓存最大的使用场景就是在数据库之前架设，用来把
相同请求的数据暂存在内存中，然后在单位时间内或者是某事件未触发的情况下，
供客户端请求，以减少客户端大量的并发请求被直接发送到数据库，导致数据库
扛不住压力而down机。在albianj中，缓存主要的用处也是在于缓存数据库的数
据，减少对于数据库的请求。但是albianj并不会牵涉到缓存层的物理部署，也
不会直接实现缓存，而是作为一个客户端来使用缓存。</p>

<p>albianj主要支持的是分布式的redis。albianj内置了redis的客户端，并在
redis的客户端上进行了二次开发，以让albianj满足对于缓存的需求。albianj
的缓存依赖于config中的cached.xml配置文件，在这个配置文件中，可以配置
redis的服务器信息，也可以配置redis的部署情况信息，albianj都会对此加以
支持。但是albianj并不支持redis的集群功能。这是albiaj使用缓存的出发点决定
的。albianj只是使用缓存作为一个缓冲，而并不是拿来做存储，虽然redis也有存
储的功能。所以这部分数据的定位应该是易失且可失数据，不存在也不会干扰程
序的正常运行，如果要做高可用，一个多主+各主一个master就可以实现了，如
果需要合理的利用各台机器，那么就必须要重新在客户端层再增加一个负载均衡
层，使用算法执行多写主操作，现在有开源的组件可以使用，但是相对来说代价
有点大，所以albianj只使用最小的功能就可以满足albianj对于缓存的需要。</p>

<p>在albianj中，最大的需求就是在ORM中缓存数据。albianj在persisten.xml中增加
了一个cached的配置节，可以通过这个配置节让albianj接管的对象打开缓存功
能，开发者借助这个配置节就可以让albianj自动的实现缓存功能。ORM在使用缓
存的时候因为是要发生网络连接、发送数据等等步骤，所以ORM中集成的缓存功
能被设计了异步执行。从而可以不用担心对于主流的业务造成影响。</p>

<p>还有一种情况是开发者必须要自定义缓存，可能存储的不是直接从ORM中取出的
数据，而是已经经过业务加工的数据。那么albianj也考虑到了这点，albianj也
暴露了直接操作缓存的接口，以供开发者实现自己的缓存目的。</p>

<p>albianj还支持本地缓存，然后本地缓存一般不推荐使用。本地缓存经常会越用越大，
内存也容易溢出。但是albianj还是设计并且实现了它。使用LRU机制对于本地缓
存进行了瘦身处理，还规定了缓存的最大大小来强制性的约束缓存的使用。
albianj实现本地缓存的主要目的是给albianj本身自己用的。在albianj中，由
于实现的需要，中间存在很多的反射等调用。每次调用反射都是一件很浪费性能
的事情，所以我们需要使用本地缓存把这些信息缓存起来。而这些信息又不大，
远远小于内存溢出的阀值，也远远小于我们定义的缓存的最大大小。所以
albianj可以安全的使用本地缓存来给自己提供性能上的提升。</p>

<p>总的来说，albianj不是真正的去实现一个缓存服务器，而是将目前大家都使用
的缓存服务集成到albianj内部，以供其使用。albianj的缓存集成既可以实现对
于自身功能的需求，又对开发者提供了一致的接口，并且透明化的处理，而且还
未定制化暴露了接口。从albianj的一站式定位来说，缓存的集成再次体现了
albianj所强调的统一化。</p>

<h4 id="配置系统">配置系统</h4>

<p>作为一个IT从业者，当系统发生故障的时候，经常需要我们快速而准确的去排除，
而且一个很重要的前提是不能让现在已经上线的系统停止下来。这就像是一架飞
机正在正常的飞行，突然引擎出现了问题，这时候需要机械师现场排除故障，而
且不能让飞机降落更不能让飞机掉下来。其中的难度当然是可想而知。正是因为
有了这种需求，我们才需要一个可以在系统运行的时候，可以动态改变系统运行
方式的一种方法，而这种方法对于albianj来说，就是内置一个配置系统。</p>

<p>albianj的配置分为两部分，一部分是albianj依赖的xml配置，它主要负责为
albianj的正常运行提供原信息。这部分的配置目前是无法在运行时更改的，如
果要更改必须停止服务。albianj解决xml配置是提供了一个统一的接口：
IAlbianServiceParser。同样，albianj也提供了一个FreeALbianServiceParser
来保证统一性。但是albianj没有提供一个完整的解析xml的算法，而是提供了一
个完整的xml的parser类：AlbianXmlParser。开发者可以自定义自己的xml解析
接口，解析xml的格式。然后通过使用AlbianXmlParser类来完成对于xml的解析。
这部分信息除了本地加载还可以提供远程加载服务，使用远程加载，可以间接的
实现配置重置，但是我们并没有对这个功能加以很多的测试，所以并不推荐使用。</p>

<p>重点要讲述的另一部分：动态配置。albianj使用数据库作为动态配置的持久化
层，使用albianj提供的缓存系统作为抵挡高并发的解决方案。albianj的动态配
置为树形结构，级数最多支持6级。理论上每个节点都可以有任意数量的子节点，
并且子节点还可以继续派生子节点，每级子节点都可以作为叶子节点存在，作为
叶子结点的值可以是除二进制外的任意类型。</p>

<p>albianj为配置系统的使用提供了各种不同的接口，包括简单运维的接口也一并
提供了。albianj将动态配置的管理分为：初始化，运行中两部分。结束之所以
不加以考虑是因为albianj使用的是主动+被动的缓存策略，放弃了更改通知这一
原先流行，现在已经落后的策略。需要使用albianj的动态配置系统，必须在第
一次使用的时候或者是缓存集体失效的时候初始化缓存，这一步经常被称之为”
充缓存。albianj还为了解决缓存的集体失效问题，对于不同类型的缓存或者对
于不同用处的缓存做了不同的过期时间处理，对于不经常变动的缓存直接进行了
不过期处理。albianj会自动的发现和使用缓存，和开发者无关。</p>

<p>然后，当缓存失效的时候，albianj会自动的去再次从数据库中获取值并且加载
到缓存中。当albianj的动态配置项发生变动的时候，albianj也会主动的去更新
缓存中的配置项，如果此次通知失败，albianj提供了一个可以控制到具体缓存
项的接口，以维护者或者运维人员手工的去更新缓存。</p>

<p>主动缓存和被动缓存的使用使albianj放弃了原始而容易引起不一致性的通知机
制更新配置项的方法。目前的很多项目基本上都是基于zk来进行动态配置项的一
致性管理，但是因为网络的问题或者是环境的问题，zk其实是无法保证一定会更
新到缓存的，一旦无法更新到缓存，那么就会引起配置项的不一致性。也有团队
使用自己的消息队列来完成一致性的管理，鉴于我们以前使用的经验，这也不是
万无一失的，以前在5173的时候，我们就会经常因为动态配置项不一致而重启我
们的服务器，因为除了重新加载一遍所有的配置项，基本上没有什么办法来应对
这个麻烦的异常。</p>

<p>albianj的动态缓存在数据库中被分成6个表，每个表存储一级节点的值。对于最
后的5，6节点表来说，数据可能会面临好几个级数的增长。这对于使用albianj
的配置系统来说也不是问题。albianj本身自带路由功能，所以可以方便的将数
据量过于庞大的表进行拆分，只是albianj对于动态缓存的策略是使用父节点进
行拆分，所有同一父节点的子节点必须全部存储在一个表中，以方便albianj加
载数据。</p>

<p>因为动态配置项对于整个系统的重要性，我们对于动态配置项表还增加了一定的
记录处理。每个表都增加了lastmodify，lastmender，createtime，author等信
息，以方便查找最后一个更新的人员来问询更改的目的。也为了方便的对于动态
配置进行控制，albianj还为配置节点信息增加了enable的字段，以方便管理人
员快速的开关该配置项；最后，albianj的动态配置项都不会被删除掉，而是由
albianj进行了“软删除”处理，albianj对于动态配置项增加了isdelete项，以方
便此项控制。</p>

<p>为了更好的识别动态项，albianj特意在id生成器中申请了id为00的id作为动态
配置项的id，以方便维护。</p>

<h4 id="restful服务">Restful服务</h4>

<p>restful是目前为止albianj所支持的最后一个组件。它是我们的内容中心刚刚起
步的时候才被提起，后来慢慢的被使用的越来越多，直到目前，内容中心和我们
内部的一些接口基本上都走了这个内置的restful。</p>

<p>对于restful，albianj开始其实并无多大的需求，腾讯内部有一个微服务的服务器，
使用tcp来完成内部的通讯，同时带有负载均衡等等功能。但是由于这样或者是
那样的原因，使用起来各种的不便，而内容中心的主要职责是提供一致的接
口，所以其实微服务并不太适合网站的开发，而是适合类似于手机或者是内部的
多任务管理的使用场景。而网站，还是restful这种多服务器平行部署比较适合，
一来比较简单，二来维护和扩展也相对方便。</p>

<p>所以albianj设计和实现了restful的服务。restful的内部构建其实很简单，只
要就是一个类似于MVC的模式，而对于restful来说，V只有两种可能的情况：xml
或者是json，所以这部分基本上就相当于省略了。所以对于restful来说，就是
简单的controller和action。albianj基于jetty二次开发了servlet，重新实现
了doget个dopost接口，并且albianj通过kernnel的集成，使用kernnel提供的
service管理功能，将restful的service全部管理了起来。对于每个action，
albianj提供了AlbianRestfulActionAttribute来标识，每个action还提供了一
个verify的接口，以方便对于每个action进行访问的有效性验证。</p>

<p>为了开发者更好的体验，albianj统一了action的函数签名，albianj提供了一个
访问上下文的AlbianRestfulActionContext对象来管理对于action的访问。
action context中包含了当前上下文的resuest、response、sessionid等等信息，
这些信息都是通过jetty或者是客户端提供而得到了。</p>

<p>当restful的接口返回的时候，对于开发者而言也很简单。albianj也对接口的返
回进行了统一。albianj在action context对象中开放了一个result的属性，开
发者只要将返回值正确的设置到这个属性albianj将会自动的进行返回处理，直接
对开发者进行了透明化的隐藏。</p>

<h3 id="成效">成效</h3>
<p>内容中心是第一个真正全面的使用albianj的项目。因为我们的一些业务的特殊性（比如我
们对于资源的面对经常是无抢权更新的），albianj在一些完整性或者是一致性
上都做了相关的一些让步。做出让步并不是指albianj不能做到，而仅仅是为了
系统的简单，我们对于albianj进行了裁剪。但是一些基本的功能和一些基本的
要求，albianj还是一丝不苟去实现的。</p>

<p>使用了albianj后，我们统一了开发者的代码规范，我们也统一了我们维护系统
的一致性。但是在实际的研发过程中，其实并没有给开发者带来更多的在开发时
间上的紧迫感，相反，还可以为开发者赢得相对宝贵的时间。因为albianj在
persisten上做了大量的工作，使得开发者可以完全的不同考虑后端数据库的部
署和数据的拆分对于系统的影响。如果使用标准的三层架构，那么DataAccess层
其实albianj已经帮开发者解决掉了。而对于开发者来说，增加分布式锁，编写
业务性质的数据路由服务，配置albianj的基础配置文件这3项是不管使用什么技
术或者组件，由于系统结构的变迁，这是省不掉的。</p>

<p>因为albianj对于persisten层的精益求精，导致了开发者在开发分布式数据库的
程序的时候几乎是0成本的。而且对于后期的扩展性也有极高的支持。对于分不
分表经常出现的需要重新平衡数据的情况，虽然albianj并不能解决掉这个问题
（因为这个问题主要和业务相关，和albianj并无任何的关系），但是albianj可
以在通过更新几个配置文件不动一行代码的情况下就给予完全的支持。</p>

<p>对于使用albianj的系统，系统的维护也变得相对的简单和快速。因为albianj不
停的强调和强化统一，并且albianj也提供了一站式的开发解决方案，所以对于
开发者来说，他只需要在合适的地方填空合适的代码就基本上可以完成复杂的业
务开发。而对于系统本身来说，因为albianj是为我们量身定做的，而且从设计
上就强调了可维护性，所以整个系统都不会出现复杂税的现象，所有的主键也都
是“一键式”启用的，对于开发者来说，很多的功能都是透明性存在的。</p>

<p>我们对于使用albianj的开发者也进行了实验。参加这个实验的有两个人：一个
是A，刚刚毕业的硕士，没有任何的经验；另外一个是B，起先毫无java经验开发php的开发
者。他们使用的结果如下：</p>

<p>A： 1天上手，2个小时就可以正常使用；
B： 2天上手，2个小可以正常使用；</p>

<p>后来我们分析，A快于B主要是因为A其实在学生时代其实有java的经验，所以上
手比较快，而B其实满脑子的PHP思想，要一下子转变还是比较困难一点的。但是
不管怎么说，这个结果可以说明，使用albianj都可以快速的属性，进而可以快
速的开发系统。</p>

<h3 id="总结">总结</h3>

<p>我们之所以设计和实现albianj并不纯粹是因为好玩，更不是为了重新发明轮子。
但是不得不说，我们设计和实现albianj是更好的发明了互联网圈内的轮子，这
个轮子可能缺了一个幅，有可能采用了真空胎的结构，所以可以说，它只能很舒
服的被适用于互联网开发内，对于企业的开发，其实并不是那么的合适。</p>

<p>从我们设计和开发albianj，其中可以说明几点：</p>

<ol>
  <li>
    <p>现在的开源为了有更好的覆盖面，它们已经被加入了更多的功能使用场景，
但是对于一些特定的场景，特定的一些痛点，往往缺乏有针对性的支持，所以现
在来说，其实使用开发的成本已经越来越高了，使用开源软件，特别是这种开发
框架类的，不但要有使用的能力，甚至还要有阅读代码和二次开发的能力。</p>
  </li>
  <li>
    <p>albianj在实现过程中使用的一些技术，也并不是很难或者是很潮的技术，更
不是那种能拿出来唬人的技术，只是一些平平常常的，就像家常菜一样口味
的技术。这说明其实框架的开发并没有那么难，更没有那么神秘，一般的开
发者完全可以自行的来实现。</p>
  </li>
  <li>
    <p>albianj在设计和实现的过程中，放弃和裁剪了很多的功能，只实现了我们需
要的功能。这说明一个框架的好坏，甚至是好用不好用并不能指望于这个框
架的功能是否完全，而是这个框架是否适合你的使用场景。一个简单、好用、
适用、够用的框架才值得去用。</p>
  </li>
  <li>
    <p>作为开发一个总体上的框架，一致性和可维护性必须从设计开始就要加以考
虑，并且在实现的时候必须加以一丝不苟的执行。这样设计和开发出来的框
架才能让开发者快速的熟悉和使用，让代码的管理者对于后期的业务扩展和
重构更加的自信。所以在前期，就算99%的技术和时间都花在一致性和可维护
性上也不为过。</p>
  </li>
  <li>
    <p>对于开发者怕出现bug的问题，其实有句话叫做：多做多错，少做少错。但是
你不能仅仅因为怕出错就不去做。所以从设计和开发albianj的真实实践中，
我们总结出一个开发伦理：如果不能解决所有的bug，那么就必须提供一个可
快速修复bug的机制。</p>
  </li>
  <li>
    <p>作为一个管理者，有效的控制是必须要追求的。从系统实现的角度来说，要
做到有效的控制，必须要做到统一性和单维性。统一性保证方法的实现和维
护，单维性保证实现的时候能不偏离方向。</p>
  </li>
</ol>

<p>最后：技术是不能解决掉所有问题的，技术最多能解决掉70%的问题，剩下的30%
是需要靠管理来进行制约的。技术可以解决一切问题，但不是一切问题都可以被
技术解决的。</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2015/albianj/</guid>
                <description>
                    
                </description>
                <pubDate>Thu, 05 Nov 2015 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
        
            <item>
                <title>腾讯文学内容中心分布式文件系统的设计和实现</title>
                <link>http://localhost:4000/blog/2015/DFS/</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="关键词解释">关键词解释</h2>
<ol>
  <li>逻辑集群：具有相同groupname和syncgroup的storage机器组成的集群。</li>
</ol>

<h3 id="摘要">摘要</h3>
<p>我们设计并实现了一个分布式文件系统(以下简称DFS），它是基于linux的文件系统，并面向大规模数据
存储、海量数据访问、具有良好可伸缩性的文件系统。DFS设计运行在廉价的linux系统中，但是它依然
为数据提供良好的一致性和完整性。</p>

<p>虽然DFS和业界很多的分布式文件系统有很多的相似性，但是它还是更面向我们当前遇到的一些业务的实际
问题。并不是构建在某些论文或者大理论之上，所以它对于我们来说他拥有更好的业务适应性、维护性和可用性。</p>

<p>DFS的出现完全满足了我们对于分布式文件系统的要求。它现在已经部署到我们的线上系统中，来给我们的书库
提供存储和访问的能力。目前为止，我们已经小规模的实验性部署了9个数据节点，存储了600g的数据，但是现在
线上数据还在源源不断的导入进DFS，保守估计前期将会有超过1T的数据用DFS来存储。目前还有一个业务也将会
部署到我们的DFS上，保守估计这个系统会有20T左右的数据。</p>

<p>本文档中，我们主要讨论DFS对于文件在分布式应用中的架构和特性，最后会列出我们的测试数据。</p>

<h3 id="简介">简介</h3>
<p>我们的DFS系统目前的业务主要用于存储文章的章节内容。对于一个阅读性质的网站，其中最大的存储量就是由
作家生成的文章。这些文章量大并不适合使用传统的关系型数据库存储。将文章在系统中抽象，它仅仅是一个对象，
所以我们首先想到了将它存储在某个固定的文件系统中。但是目前很少有文件系统能保证水平扩展的能力，可以增加
机器来解决数据量和访问量的问题。对于数据来说，它还应该具备维护数据的完整性、一致性的能力。
也许开源中，最合适的就是FastDFS了，但是它同组内完全镜像的方式对我们来说无法接受，
它不能实现增加机器就可以平滑的增加我们的性能和吞吐量。</p>

<p>所以我们自己设计并完成了一套DFS，我们的DFS在一些基本的要求上，和别的分布式文件系统都有很多一致的追求目标,比如：数据的完整性、
一致性、数据的恢复能力、可伸缩性、可靠性、可用性、以及成本问题。但是它也有区别于别的分布式文件系统的地方：
比如不需要兼容任何的公共接口，不需要考虑文件的索引问题。所以我们在设计的初期就对DFS采取和别的分布式文件系统
不一样的策略，并进行了折中的一些选择，引伸出了完全不同的设计和实现思路。</p>

<p>首先，我们的DFS不需要保存信息的元数据。在我们的整个系统中，文章的内容只是文章的一个属性，而并不是文章的
全部信息，所以在关系型数据库中保存文章的属性信息是在所难免的。所以这种模式就决定了我们可以将这个分布式文件系统
做成类似于KV的结构模式。也是因为没有元信息，整个系统的架构将会大大的简化。相比于google的GFS或者是apache开源的
HBase，去掉了metedata服务器，整个系统唯一的单点隐患被剔除掉。可用性上也得到了很大的提升,而相对于DFS系统本身，
我们通过key可以精确定位所需要的内容。</p>

<p>其次，和GFS一样，我们认为我们的磁盘是很容易毁坏的，所以数据的完整性和安全性是很重要的一个命题。第一个版本我们
采用实时同步和单盘恢复的两种同步方式来解决。在同步的过程中也有可能出现同步不完整或者同步出错的情况，这个情况将会
在下一个版本中采用出错同步再次同步的方式来解决，相对于同步完的数据，在下一个版本中还会有数据的完整性校验机制来解决
数据可能会引起的完整性问题。</p>

<p>第三，我们的DFS和传统的DFS一个很大的不同就是我们的数据将会面临经常被更改的情况。不仅仅只是尾部增加操作，而是不知
修改位置的增删改操作兼具。又因为没有了元数据信息，所以我们的存储内容必须自带元信息，而且必须给用户给与适当的放大或者缩小
的功能和方便，所以我们合理的将文件稀疏化，合理的放置了文件的空洞来解决频繁的增删改问题。</p>

<p>第四，放弃了系统级别的元信息导致内容自带自解析信息，所以对于我们来说，数据的一致性也是一个需要解决的问题。没有了
元信息服务器，我们没有了可以唯一控制文件被线程安全的写入的机制，我们也无法控制同步中对于同一部分内容先后执行次序的问题，
这一节将会在数据一致性模型中详细讨论。</p>

<p>第五，我们的DFS不需要缓存，因为DFS的内容是稀疏性质存放，而且章节内容也是随机读取的，所以这部分的内容应该是由业务来承担，
而不是DFS自身来承担。DFS仅仅需要做好数据的存储、安全、唯一、备份功能就可以了。</p>

<p>最后，我们不需要兼容任何的标准或者是接口，包括posix的api，这样就对我们的DFS进行很大的简化，并且我们的dfs基于linux的文件系统，
所以我们没有必要要深入到linux的内核进行对于vnode或者是inode是控制。我们只需保证我们的DFS能在linux系统io接口的标准上安全而唯一的
存放、访问就可以了。</p>

<h3 id="设计概述">设计概述</h3>
<h4 id="目标">目标</h4>
<p>在上面的介绍中，我们介绍了一些DFS相当于市面上通常的DFS所存在差异和相同点。在设计满足我们所需要的DFS的过程中，
我们的设计目标既有已经被证明可行的，也有相当一部分是需要自己的摸索的。可谓是机会和挑战并存。之前，我们也提到了
一些我们的设计目标点，这里我们讨论一下我们的设计目标。</p>

<ol>
  <li>
    <p>整个系统必须可以简单而容易的水平扩展，尽量做到增加机器就可以完成系统的存储量和系统的吞吐量的提升，而且这部分工作必须
让系统自动来完成，随着机器的增多，我们的人手将无法从容的应对手动管理机器的行为。</p>
  </li>
  <li>
    <p>系统也必须支持一定界限之内的垂直扩展，类似于增加磁盘挂载点、增加磁盘容量等等操作也必须要在系统给与支持，并且这个支持完全
是自动化的;</p>
  </li>
  <li>
    <p>系统必须是由廉价的机器组成的，所以机器的失效应该是经常发生的一个故障，在整个的系统中，这个故障将被看做是一个正常的系统事件，
系统必须能快速（30s之内）的发现这个异常，并且将访问避开这个发生故障的机器;</p>
  </li>
  <li>
    <p>系统必须充分发挥每一台机器的性能，简单的主从模式并不是我们的首选，我们更需要多主的模式来应对海量的访问；</p>
  </li>
  <li>
    <p>系统必须支持大小文件的存储和访问。我们的业务存储数据量基本都是文章内容，一般在KB级别，但是也会有一些完本的数据等需要存放，
所以我们的存储将会变成MB级别，对于这两者我们必须都进行支持，对于GB级别的大文件，腾讯有TFS来使用，而且效果不错；</p>
  </li>
  <li>
    <p>系统必须保证数据的安全性和数据的一致性。这一点不需要太说明，几乎每个系统都需要保证这2点；</p>
  </li>
  <li>
    <p>系统必须支持数据的频繁更改，对于DFS来说，modify总是最难实现的，它不仅仅会引起文件的空洞问题，更是数据一致性的杀手。很多的DFS
不从根本上支持modify功能，它们把modify认为是一次新的insert，然后通过版本号或者类似的方法来确定先后顺序，最后再通过合并减少文件空洞
并且解决掉数据的一致性问题；但是我们的业务决定了我们必须要面对这个问题，相对于我们都把modify认为是insert，我们的磁盘浪费实在
太大，得不偿失；</p>
  </li>
  <li>
    <p>机器的增加、磁盘的增加或者挂载点的增加，都不会让数据进行再平衡。在分布式系统中，数据的再平衡往往是耗时最长的工作，而且控制度也
不是非常的准确，经常需要多种措施一起才能保证数据的平衡和一致，所以在我们的系统中，除了灾难恢复或者同步以外，不存在任何的数据再
平衡现象；</p>
  </li>
  <li>
    <p>还有一个不得不吐槽的问题，内部的网络总不是那么的好，经常会出现波动的情况，所以我们的系统必须可以承受一定的网络颠簸，这里
不仅仅是对于客户端到存储这个链路来说，而是整个的DFS系统内部，也要对网络的通讯进行一定的考虑，从而可以让系统之间的分布式状态机
能顺利的运行。</p>
  </li>
</ol>

<h4 id="架构">架构</h4>
<p>为了达成目标，我们对DFS进行了最简化的设计。和目前的大家经常和使用的DFS不一样，我们的DFS去掉了元数据功能，但是保留了该服务器节点(
以下我们统称这个节点为tracker）。这点很像FastDFS。简化掉存储元数据的原因我们在上面曾经论述过，简化
后的服务器只剩下了tracker和存储服务器（以下简称storage）。</p>

<p><img src="./2.png" alt="arch" /></p>

<p><br />
tracker的主要用途从存储元信息变成一个状态控制服务器和负载均衡服务器，或者说它成了一个类目录服务器。一方面它主要和系统中的storage配合，对storage进行健康检查和状态维护；
另一方面，tracker还需要对客户端的访问进行路由工作。这样的无元数据的设计不仅仅只是从根本上解决了元数据导致的单点问题，
而且还大大的减轻了数据的完整性在系统中的压力，从实现的角度，也大大减少了代码量，
使tracker节点变成一个可任意水平扩展的节点，从而解决了系统中最不稳定的一环.</p>

<p>相对tracker来说，storage的工作将会复杂很多，它不仅仅要做文件系统本身的“增删改查”工作，还需要肩负一个同步的工作。为了简单，我们把storage
的存储文件只做镜像同步，不做相对复杂的打散再存储工作。也为了尽量合理的利用机器并且可以快速的通过增加机器的方式来达到我们对于存储量和性能的提升，
我们对同组内的storage进行了分片处理，也就是逻辑集群。在同一个组内，分成一定量的syncgroup，每一个syncgroup内部的服务器是镜像的，不同的syncgroup内的storage之间是
平行的，在同步上不存在任何的关系。这一设计在维护的时候增加了一个人工的syncgroup工作，但是它简化了同步打散的算法，最重要的，增加机器不需要移动原先
的数据，使得几乎可以认为增加机器就是在增加DFS的存储量和吞吐能力。</p>

<p>storage的改变不会迁移数据，也会导致性能的热点问题。新加的storage负载可能不够，但是老的数据被频繁的访问。对于我们来说，老的数据基本上都是被用来做读取之用，
业务的服务可以规避掉这个问题。对于写来说，本身就不会有太多的请求，所以这样的设计是我们所能接受的，对于我们这种特殊的需求，这并不是一个问题。</p>

<p>不管是tracker还是storage，它们在linux中都是一个用户层面的进程，并未涉及到系统的内核，它们也都有自己的api，并没有为了兼容poixs等接口带来复杂度。
这样的设计方便了以后的维护和管理，也方便了实现的时候，只要考虑DFS本身的问题即可，无需为一些“杂事”而分心。</p>

<h4 id="进程内部结构模型">进程内部结构模型</h4>
<p>在DFS内部，除了storage的sync模块和storage的心跳模块发起请求的部分之外，余下所有的功能全部依赖于一种线程模型，我们把它称之为module。<br />
module模型主要是把进程分成逻辑上隔离的3个部分，mainsocket module、network module和task module。</p>

<p><img src="4.png" alt="metedata" /></p>

<p><br />
为了socket accept的简单，DFS把mainsocket module设计成单线程module，该module只负责接收main socket的连接，然后获取DFS中的jobcontext对象，
将请求通过负载均衡算法发送到network module。</p>

<p>network module为线程池设计，但是在mainsocket module中，经过负载均衡算法的发送，它保证了一个socket只会被一个network module的线程处理，
所以这里的处理是线程安全的。DFS会根据socket buffer的实际大小和服务器设置来决定读取数据，并且把数据依附在taskcontext对象上，和jobcontext一起
通过负载均衡算法发送到task module。</p>

<p>task module和network module一样也是线程池设计，同样发送到task module后的处理也是线程安全的，task module是整个任务真正被处理的地方。不管任务
是否执行的正确，task module都会装配好回复client使用的response信息，然后按照原路返回给network module，network负责将response信息发送给client。</p>

<h4 id="类目录服务">类目录服务</h4>
<p>上面提到我们节省掉“元数据”信息，然后整个设计都变成了“无中心化”设计，那也就意味着在DFS中不会存在目录服务。但是为了满足DFS容灾的需求，我们设计了一种轻量级的类目录服务。
这种服务不会具体的提供到数据存储的目录或者是文件，而仅仅是提供存储的服务器。又因为我们的逻辑集群内的storage之间是镜像的，所以也不会存在数据迁移的问题，虽然省略掉了元数据
这一块，但是我们还是可以用这种类目录的方式定位到我们的storage。</p>

<p>我们的定位服务有点类似于ceph的CRUSH算法，只是我们的算法没有ceph那么的灵活，一些ceph设置灵活的条件被我们固定了下来，
所以就不会像ceph那样有很多的条件因素来决定。在我们的定位服务中，永远只会有一个满足条件
的storage被返回，以驱动数据的访问。这还是得益于我们的逻辑集群内镜像的设计，它不存在把数据打散或者是重新平衡的问题，只要逻辑集群内的storage都保证会完全镜像，
所以返回一个storage也足以应对我们的需求。</p>

<p>在处理满足条件的storage之中，我们也会根据实际的情况对storage进行筛选。在tracker中，所有的storage都被保存成一种hashtree结构，通过groupname和syncgroup来分组，
然后通过心跳、磁盘大小等等物理条件和设置的平衡策略来选择唯一满足的storage给提供服务。这样的设计简化了算法，并且也保证了系统的事务性。</p>

<h4 id="存储模型">存储模型</h4>
<p>在我们整个系统中，文章只是一个对象。但是在DFS中，文章的内容虽然也是对象，但是它还是被分成了2种：一种是大文件，一种是小文件。
对于文件的区分，我们会通过配置设定一个阀值决定。</p>

<p>大文件将会作为sinalefile单独存储。它不会有带有别的信息，唯一需要使用的信息是lastmodifytime，这部分会在访问和同步中涉及。</p>

<p>对于小文件，DFS会把这些零零散散的内容合并成一个chunkfile，在合并内容的同时，也把零零散散的随机IO变成了顺序IO。这样不仅仅解决了海量小文件
对于系统压力的问题，也解决了随机IO导致的性能低下的问题，一举两得。相对于singlefile，chunkfile内的内容存储就不一样了。DFS无法简单的只存储
内容，所以我们在内容前面给每一个需要存储的内容加了一个metadata。metedata主要存储了文件的存储日期、是否被删除、最后更新时间，总长度，实际使用长度
，等等一序列的数据元信息。但是这些属性里面最重要的是一个类似于MVCC的值，在DFS中是opver，操作版本，它解决了版本问题。</p>

<p><img src="3.png" alt="metedata" /></p>

<p><br />
对于DFS来说，它关心是文件的名字，不管是singlefile还是chunkfile，DFS只会受限于名字不能产生冲突。所以文件名必须带上storage的machineid。machineid是在
group内部唯一的。文件名带上machineid后，首先，它能确保文件的归属问题，可以把唯一范围缩小到单机，但是在单机内部还不能保证文件的唯一性，所以，我们给文件名带上另外的
一些信息，包括但不限于创建时间、顺序数、线程ID号。至少由这4部分组成的文件名才能确保该文件在DFS系统内唯一。</p>

<p>对于storage，我们首选使用的是多而小的磁盘，这样可以让系统的并发达到最大化。而对于整个系统来说，我们又必须要支持磁盘的大容量。所以我们增加了多挂载点的功能，
原则上，每台storage机器最多可支持256个挂载点，这些挂载点会根据一定的规则进行数据的平衡策略。通常采用的是轮询的策略，也支持最大剩余空间等等策略，这部分
可以根据自己的需要自己来决定。对于多挂载点的支持，唯一的要求是同一逻辑集群内，必须做到镜像。</p>

<p>对于磁盘的剩余空间，我们也会做相应的处理，DFS并不会使用全部的磁盘空间来存储数据，具体最后剩余多大的空间也会让系统的使用者根据实际的使用情况来确定，一般
我们的推荐值是大于4G，这个数字并不是信口开河设置的，而是根据storage和tracker时间的心跳时间差和单位时间内最大上传量计算所得。如果想把剩余空间缩小，
那么可能需要先把心跳时间差缩小（现在是30s），这样会导致过于频繁的心跳检查，对tracker会照成一定的影响。</p>

<h4 id="数据一致性问题">数据一致性问题</h4>
<p>在分布式系统中，数据的一致性问题是被比较多的提及和难以解决的点。一般数据一致性出现问题的地方在于数据的版本控制和数据同步上。一旦在数据的版本控制上
出现纰漏，几乎数据的同步是肯定会发生一致性问题的。所以要解决数据一致性的问题，主要的工作还是在数据的版本控制上。</p>

<p>对于DFS，刚刚上面讲到我们使用类似于MVCC的opver来解决这个问题。那么我们到底怎么解决这个问题？和为什么要这样解决这个问题呢？</p>

<p>首先，来看singlefile，对于singlefile来说，它不需要版本控制，它是一个单独的实体，有就有，没有就没有，不会存在对于它的版本。 版本的冲突一般发生在modify的情况下，
只有执行modify，数据才会对同一个文件块进行覆盖。但是对于singlefile来说，它被更改就是先上传一个新的singlefile，然后把原来的siglefile删除掉，所以在这种情况下不存在问题。那么还有
一种情况，如果原来是一个singlefile，然后需要更新的是一个小文件阀值定义的内容，这时候DFS还是先上传一个新的chunkfile内容，然后把老的删除，以后的版本控制就会
按照chunkfile的版本控制来进行，所以singlefile是不需要做版本控制的，只要在同步的时候检测一下该文件是否还存在，然后根据实际的需要进行同步。</p>

<p>那么对于chunkfile来说，opver相对就很重要的。为什么需要opver而不是使用最后更新时间戳呢？这是因为在分布式系统中，时间是不确定的。
每个计算机都有它自己的物理时钟，而且时钟会经常性的发生偏移，又不能完美的同步它们。所以多台storage时间多多少少会有一些时间不同步的问题，如果当A机器的
某一个内容被更新后就down机，然后cleint马上再次对这一块的内容进行修改，因为A已经down机，所以请求会给落到同组内的B机器上，
而B机器接受再一次的更新，但是因为B机器的时间慢于A机器，这时候，其实B的版本更新，需要覆盖A的版本，但是时间戳是A的更晚一些，所以就会出现版本的问题。也有会认为你
更新的时候判断一下你提供的lastmodifytime和chunkfile的元数据中的lastmodifytime是否一样？这种做法不是不可以，但是在没有原子钟的情况下不是那么的稳妥(如果我们在系统
已经运行了几天后才发现时间差别很大，我们调整时间后，我们的数据怎么办？），所以我们最后还是放弃了这个做法。</p>

<p>我们使用了opver，它是一个单调递增的值。其实opver就是一个时钟向量(注意：虽然它名字叫时间向量，其实和时间没啥关系，它只是一个操作单向自增而已)，
相对于lastmodifytime来说，它的优点是在各自的storage之间，不会出现误差，并且可控。同样是上面的A和B机器之间的例子，
对于opver来说，因为它只可能保持单调递增，所以它不会出现时间戳被回拨的问题。我们在更新或者同步的时候，只要简单的对比opver就可以了。在同步的时候，当需要同步的数据opver
大于被同步数据的opver时，我们就认为需要同步的数据是最新版本，我们同步这块数据即可。</p>

<h4 id="线程安全">线程安全</h4>
<p>为了达到多线程性能的最大化，我们设计了一个多线程安全模型。总体上来说，就是对象线程化。</p>

<p>在多线程的环境中，最大的性能消耗就在于处理资源竞争的锁上面，所以怎么样避免这个锁的出现就成为了性能优劣的一个大问题。在这点上可以选择的技术方案也不是那么多，除了CAS
好像就没有什么合适的。但是CAS在这里其实不是那么的适用。所以我们就想到了对象线程化。又为了更好的优化性能，我们又加上了对象池的概念，把对象线程化的范围只缩小到
在该对象被访问使用期间。</p>

<p>对象线程化的具体是每当有访问进来的时候，DFS会根据访问的不同分发到不同的服务器。一般来说，insert操作会被随机的分配，但是删改查的操作就会被通过一个算法分配到一个task module中
的线程进行处理，这样通过task module中的loop进行操作排队，这些操作永远都是被串行化的，所以这些操作之间不会对同一块数据进行并发的操作，以此来达到访问操作串行化。</p>

<p>当然，仅仅使用这个办法还无法彻底解决数据的线程安全和资源的竞争锁问题，它还需要在写入磁盘的时候用磁盘的文件进行配合。使用同样的方法，我们将磁盘的文件也进行线程化，
对于singlefile，它不需要任何的线程化的控制；对于chunkfile文件，它的线程化处理方法就是每个线程对应一个文件，直到将这个文件写满，否则一直写这个文件。这样的做法解决
了在数据落入磁盘时的竞争锁的问题，但是它并不是完美的。对于停机的时候，因为chunkfile就会被关闭，然而它已经申请但是未被写入数据的部分大小将会形成文件空洞，而且这个文件空洞
是无法避免和再次利用的，所以这部分的损失将有我们系统直接忽略。</p>

<p>这里另外还牵扯到一个chunkfile的文件大小问题。相对于DFS来说，chunkfile的大小并无多少影响，我们只是需要从磁盘的使用率和系统调用的性能出发来合理的确定一个值。
目前我们使用的值是64mb，这个数字来源于我们区分singlefile和chunkfile的阀值，我们把小于1mb的数据划分入chunkfile，大于1mb的数据被认为是大文件，使用singlefile存储。
而64mb相当于最少存储64个文章章节，我们认为这种系统调用开销我们还算能接受。当从目前的实际使用情况来看，我们的当章节数据量远远小于1mb，一般就是kb级别，所以下一个版本中，
我们的chunkfile可能会成倍的缩小，应该会在4mb-8mb之间。</p>

<h4 id="文件空洞问题">文件空洞问题</h4>
<p>我们的DFS和一些开源的DFS最大的不同就是对于modify的支持。一些开源的DFS基本上不会考虑modify的支持，比如leveldb等等。它们是通过版本号然后合并的方式来规避掉对于modify的直接支持。
这样对于这些DFS来说，他们就不太会存在一个比较棘手的文件空洞问题。</p>

<p>文件空洞，因为DFS支持更改，删除这些操作的原因，导致文件内容断断续续,不会形成一整块。虽然对正常的使用影响不是那么的大，但是对于性能还是有一定的影响，
文件空洞这个问题只会存在在chunkfile中，对于singlefile，它是单独的文件，整个的都会去交给系统去处理。所以singlefile不需要我们去考虑。对于使用空间的问题，
对于我们这种支持频繁modify功能的DFS，空间的浪费还是一个比较可观的量，所以我们必须要解决这个问题。</p>

<p>在我们的DFS中，解决这个问题的方法分成2步走：</p>

<ol>
  <li>
    <p>对于每次的insert操作，我们都会预留了一部分的空间给modify的支持。这个预留空间的量可以通过相对的业务来决定。目前支持绝对值或者百分比增量。
一般的增量在第一次量的20%左右，我们进过几次业务的观察，发现20%这个量是合适的。对于我们的DFS磁盘来说，也是我们可以接受的一个值。
扩充20%之后，后面的每次modify只要量不超过这个值直接使用这块空间，不需要再次申请空间。从性能角度来说比不上顺序写（其实这时候是随机写），
但这样写的方式还是一个我们可以接受的。</p>
  </li>
  <li>
    <p>对于modify操作增量超过阀值的情况，我们只能重新申请空间，但是以前的那一块空间也不能浪费，浪费的话就会出现文件空洞，所以我们会有一个管理这个废弃空间的skiplist，
当insert的时候，我们会优先使用这些废弃的空间，来达到消除文件空洞，合理利用空间的效果。</p>
  </li>
</ol>

<p>对于顺序写和随机写这个问题，从性能角度来说，顺序写远远好于随机写，但是不管怎么样，就算把所有的随机写全部改成顺序写，也都会出现1bit的随机读写（需要把isdelete置位），所以
性能的开销倒并不是那么的大，如果使用顺序写+版本号，后续使用合并的功能替代掉，</p>

<h4 id="数据完整性">数据完整性</h4>
<p>对于分布式系统来说，数据的完整性一直是一个非常头疼的问题。不仅仅如此，对于系统来说，数据完整性也是一点都不能出差错的地方。</p>

<p>对于单台机器之内的数据完整性，前面已经有过比较详细的叙述，这里不会给与太多的讨论。下面，我们主要讨论一下多机之间的数据完整性问题。</p>

<h5 id="日志">日志</h5>
<p>对于所有的完整性来说，日志都是一个关键时刻救命的一票。我们的DFS也不例外，在我们的DFS中，数据完整性相关的日志分为2类：binlog和synclog。</p>

<p>为什么没有常见的redo？对于我们的DFS来说，它并不存在多数据刷入磁盘的时间间隔问题。因为它完完全全是一个KV的数据库，没有各种RMDB的繁琐的操作，更
没有事务的概念，对于DFS的操作就是直接对某一个值的操作，不存在恢复数据这一说。</p>

<p>binlog主要记录了对于DFS的增删改操作，根据不同的操作，记录的格式和内容不一样。</p>

<p>synclog主要记录了对于DFS同步的时候，已经同步到的记录。synclog的格式和binlog一致。可以认为synclog是binlog在remote machine上的一个备份文件。</p>

<h5 id="同步">同步</h5>
<p>DFS的同步分为2部分组成。一部分是通常意义上的同步，主要的目的是完成运行时同一syncgroup内部的数据镜像问题；另外一部分因为DFS的特点，在设计的时候
我们就认为DFS的机器是易损坏的且不可能完全通过本机磁盘恢复的，所以我们增加了一个单盘恢复功能。它主要用来在磁盘出现问题，或者机器出现问题的时候，
或者增加机器的时候，数据重新自动平衡自用。</p>

<p><b> 实时同步</b></p>

<p>对于实时同步，我们的DFS使用的是gossip算法。通过遍历本机binlog，把数据采用push的方式同步到remote storage。这些remote storage必须拥有同样的groupname
和syncgroup，具体的原因上面已经有过论述。因为我们的DFS总体上就是“去中心化”的设计，所以每台storage在成为master的同时又都扮演slaver的角色，所以在同步
的时候，并没有一个固定的参照来作为标准，这里我们使用了自创的“分布式同步状态机”来完成。</p>

<p>分布式同步状态机，其实就是各storage都会维护一个同步状态，在storage启动的时候或者是重新启动同步的时候做状态机的校验。因为网络、同步延迟和同步方式的关系，
我们统一将remote storage上的状态做为当前同步的起始点，本地storage获取remote storage上的状态后，才会构建同步状态机。</p>

<p>为了简单，同步只是发生在storage之间，实际上并没有tracker任何实际性的事情。tracker在整个同步中不会充当任何的角色，它仅仅是为storage提供了一个获取remote storage
的功能，类似于提供了目录服务。storage会周期性的获取remote storage信息，然后通过获取的remote storage来构建同步。</p>

<p>同步数据会随着binlog的日志一并发送给remote storage，remote storage会在处理完同步后，把日志记录到synclog，以表明已经接受此信息的同步。synclog不仅仅只是
显式的提供信息确认功能，它还在单盘恢复中充当极其重要的角色。</p>

<p>因为实时同步根据binlog文件的增加来完成同步功能，所以可能会在文件属性更改的窗口期发生延迟现象。目前还没有找到更好的方式来解决这个办法，也许使用一个内存内的
变量会是一个比较好的方式，目前这个方案还仅仅在构思阶段，并未进入我们实际的系统。</p>

<p><b>单盘恢复</b><br />
单盘恢复对于DFS来说是一个很好的补充。从系统设计的开始，我们的目标就是把廉价的磁盘组合起来，组合成可以存储大容量的设备。但是这些廉价的磁盘不可避免的会经常发生
损坏或者下线的情况，所以磁盘损坏后数据的修复工作变得极其重要。而且随着机器的增多，手工的完成这部分工作显然是非常不能被接受的，这也就意味着这部分必须自动化的完成。
这就是单盘恢复的由来，它给系统带来了完整性，解放了运维的痛苦。</p>

<p>单盘恢复和实时同步采取的算法大同小异，也是使用gossip的方式。但是单盘恢复并不采用push方式，而是采用了相反的pull方式来执行。究其原因：对于实时同步来说，如果是采用
pull方式，那么我们必须要进过2次的通讯才能完成一条记录的同步，而采用push方式只需要一次合并后的通讯就可以解决问题，显然push方式更合适。而且对于实时同步，salver机器
并不知道需要同步的数据和时间点，所以由master主动发起同步更合适。但是单盘恢复就不同了，我们认为单盘恢复发生的条件是本地的磁盘损坏了，需要重新把这些数据从同一syncgroup
内的机器上同步过来，那么对于发生单盘恢复的机器来说，本地是存在以前的同步记录的，所以这时候我们是知道需要同步的数据具体有那些的，而且不管是pull还是push方式，都是需要
同样的网络通讯次数（同样是1次）才能同步一条数据，所以这里使用pull方式更合适。</p>

<p>当然凡事都有以外，如果DFS的日志文件丢失怎么办？这一点对于我们的DFS来说并不是灾难，我们在执行单盘恢复之前会首先检查我们的synclog和binlog在不在，如果不在先同步synclog
和binlog，把这些文件同步过来之后，再通过这些文件恢复数据。只是唯一不好处理的是，我们必须校验所有的synclog和binlog，以免发生synclog和binlog不一致的情况，导致数据
同步不完整，引起系统数据不完整的情况。</p>

<p>对于单盘恢复来说，并不是完全的“无中心化”设计的。它必要的时候必须要有一个storage充当master，来提供synclog和binlog的同步和数据的同步。这种情况只发生在一个逻辑集群（
同一group，同一syncgroup）内多机发生故障。这种时候当发生故障的机器无法满足同步的需要的时候，必须要一个master机器作为标准来提供一句。虽然DFS的设计对于机器的启动顺序不做
限制，但是这里的情况下，一般都是第一台online的机器作为master机器，这是需要注意的地方。</p>

<p>单盘恢复也支持同步中间停机，不管是在同步日志文件阶段还是在同步数据阶段，如果需要，可以随时将正在同步的机器切下线，系统并不会发生问题，也不会丢失前面已经同步的工作。
在单盘恢复结束后，一般还会接上实时同步，从最新的状态点开始把同步时间差之内的数据同步掉，达到完整的一致性后把系统切换上线。</p>

<p>单盘恢复的时候相比实时同步更为简单，因为它不必存在分布式状态机机制，也不必实时的检查remote storage状况，只是一个简单的多storage之间的通讯而已，这大大的简化了单盘
恢复功能的实现，也减少了同步这一棘手问题发生故障的概率。</p>

<h4 id="运行时状态">运行时状态</h4>
<p>storage在整个集群中并没有任何的状态，都是对等的角色，但是这并不代表它自己本身就没有任何的状态。每一台的storage都是一台有状态的机器，对于一直运行的storage来说，它也是
一个作为状态机存在。开始的设计初衷就有单机可以随便上下线的功能。我们并不限制单机的状态，但是我们必须可以让单机在重启的时候恢复到之前的状态，然后运行。</p>

<p>在这个过程中，为了保持机器的状态，我们设计了几个状态保持文件来保持状态。这些状态文件分为两类，一类是从头到尾一直存在的，属于机器状态的元信息；一类是运行过程中才会存在的
状态，只要这个过程执行完毕，这些文件将自动被删除，典型的应用就是在单盘恢复的时候，这些文件是不会长久留存的。</p>

<h4 id="机器的改变和数据迁移">机器的改变和数据迁移</h4>
<p>在我们的DFS中，机器数量的改变不会发生数据的迁移。这是我们从一开始就完全确定的一个设计方案。我们把我们的DFS设计成一个巨大的集群，但是在这个大集群内部会被分割成几个相互
之间独立的，并无任何关系的逻辑集群。这些逻辑集群只是显式的处于一个大集群中而已，其实他们之间是不会发生任何的相互之间的状态、文件的关系的。数据的迁移只会发生在逻辑集群内部。</p>

<p>这些逻辑集群并不是由系统随意决定的，也不是由像ceph那样的由crush算法来决定这些逻辑集群，而是这些机器被安放到大集群内部时就已经被标明了属于的逻辑集群，是我们显式的给与这些机器
的一个属性。那么也就是说其实这些逻辑集群内部的确定也确定了另外一个重要的事情：一个文件会被备份的份数。因为逻辑集群内部是镜像的，所以这个备份分数就是逻辑集群的机器数-1，也就是说
这个备份数也会因为逻辑集群的人为指定而变成人为确定。</p>

<p>这样的做好的坏处是人为决定因素太多，但是带来的好处是在机器数量发生变化的时候，数据不会发生迁移（注意：这里只是说不会发生迁移，但是相互之间的备份还是会发生的）。这种数据量的备份
已经是最小化的节省了数据平衡的时间，也不会额外的带来数据迁移带来的压力。在我们的设计中，我们认为这是我们所能接受的最低底限了。</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2015/DFS/</guid>
                <description>
                    
                </description>
                <pubDate>Thu, 24 Sep 2015 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
        
            <item>
                <title>使用linux的lsof和pmap解决fd和内存泄漏</title>
                <link>http://localhost:4000/blog/2015/slove-fd-and-mmap-overfolw/</link>
                <content:encoded>
                    <![CDATA[
                    <p><br />
最近dfs开发到了最后的调试阶段，进过了艰苦卓越的斗争，终于还是解决了几个fd泄漏
和内存泄漏的问题。这里把一些经验记录下来，以备后患。<br />
那么先介绍一下dfs，dfs分为两部分，tracker和storage。
tracker只负责负载均衡和调度。storage负责数据
的存储和同步,基本的信息就是这样。</p>

<p><br /></p>
<h4 id="现象">现象</h4>
<ol>
  <li>dfs的storage在单机运行的时候没有问题，不管是upload，delete还是modify或者find都没有
任何问题，可以一直工作到磁盘塞满；</li>
  <li>当存在多storage的时候，前期可以正常工作，但是进过了一段时间的运行，就会出错，
进程不会产生dump文件，但是日志会抛出errno=24,然后退出。</li>
</ol>

<h4 id="初步诊断">初步诊断</h4>
<p>通过errno得到信息，首先初步判断可能的问题是fd的泄漏，并且结合dump文件没有生成
而且还有log，那么说明我们已经捕获到这个问题。还有一个可能的原因是本身服务器设置
就有问题，比如fd设置的过小。但是基本上80%还是怀疑泄漏。现在的问题是，你知道了
问题的可能原因，但是你不知道问题出现的地方。fd泄漏是open了fd但是没有关闭，log的
信息提示是在你open的时候才提示的，所以log的地方并不是出现问题的事发现场。那么怎么
办？首先想到的是：怎么样去看一下程序运行时有多少个打开的文件？</p>

<h4 id="解决办法">解决办法</h4>
<ol>
  <li>先看一下fd的数量问题，运行ulimit -a命令看一下：</li>
</ol>

<p><img src="ulimit.png" alt="ulimit" /></p>

<p>文件fd的数量是1024，算一下进程正常运行需要的fd数量：module之间的pipe数量+线程
打开的文件数+log+binlog+synclog+marklog+mpstatue 差不多在300左右，远远小于1024
这样，可以排除这个问题应该不在这里；</p>
<ol>
  <li>那么下来就只能用lsof看一下了，用lsof -p pid得到如下：</li>
</ol>

<p><img src="lsof.png" alt="lsof" /></p>

<p>kao,那么多的文件，而且chunkfile和singlefine都存在。肯定是这里泄漏了。整理思绪，
在程序中，我们可能打开这些文件的地方是对文件的增删改查，还有一个就是sync。这里文件名
中带有m001，这个进程的业务id就是m001，这个并不能一次性的能确定是在那里。那么
我们通过lsof可以看到每个被打开文件的fd值，这就好办了，反正程序中打开文件的地方也不多，
索性在每个open的时候把fd给记录下来，结合lsof的fd，如果两个fd的值相同，比且出现在lsof
的命令输出里面，那么就是这个fd泄漏了。</p>

<p><br /></p>
<h4 id="现象-1">现象</h4>
<ol>
  <li>在fd的泄漏解决后，程序能长时间跑了，但是随着跑的时间越来越长，系统也变得越来越慢。
开始以为是不是磁盘被塞满了而导致的，那就把磁盘的空间释放出来。释放磁盘后，再次运行
程序，现象依旧。</li>
</ol>

<h4 id="初步诊断-1">初步诊断</h4>
<p>目前我们只有一个很浅显的系统越来越慢的现象，这个现象的形成99%的罪魁祸首是内存泄漏。
随着我们把磁盘的问题排除掉，那么剩下的选择真的不多了，不得不去面对让人头疼又无比痛苦的
内存泄漏问题。看一下程序，整个过程中内存的alloc和free都很多，不知道哪里可能会出现问题.
还是一个办法，需要查看程序runtime状态下的内存结构。</p>

<h4 id="解决办法-1">解决办法</h4>
<ol>
  <li>首先想到gdb，人工的去dump一个文件，然后对这个文件进行调试，可是理想是丰满的，
现实是骨感的。gdb好像并不能很好的去监控heap信息。看来此路不通，遂放弃。</li>
  <li>也想过用一些静态内存检查工具，但是我们的程序有大量的pool机制，对于这些静态内存
检查工具，干扰太多了，也并不是太适合，关键是一直没怎么用过，不熟悉。</li>
  <li>那就只能寻求于系统了。翻一下linux的工具箱，有一个叫pmap的工具可以查看进程的内存
情况，那就用pmap试试。结果不试不知道，一试吓一跳：</li>
</ol>

<p><img src="pmap.png" alt="pmap" /></p>

<p>好多的打开文件没有关闭，而且还有大小，挺详细。算了一下，一共泄漏了12g+的内存，幸好
哥的机器是16g内存。那么现在知道是什么原因了，但是和fd泄露一样，事发地点在那儿？</p>
<ol>
  <li>结合storage单机的时候可以稳定的运行，那八九不离十就是在sync部分了，那sync也分为
两部分，一部分是传给remote storage的，另一部分是从remote storage传过来的。看一下
pmap的出来的文件名，都是m001的文件，而这个进程的业务就是m001，那就是在发送的时候
发生了问题。现在范围又缩小了，但是通过工具也就只能缩小到这儿了，剩下的就只能看硬
看代码了。</li>
  <li>还好函数不长，经过仔细的查看代码，每个文件都会被一个yssc对象管理着，每次sync后
都会通过yssc的fd。mptr和len进行fd的关闭和mmap的释放。应该不存在问题。那么为什么还会
有内存在进程中呢？再看一下这些值，启动gdb，attach到运行的进程，监听到yssc被free的
哪个地方，看一下它的值：</li>
</ol>

<p><img src="gdb.png" alt="gdb" /></p>

<p>len=0？问题找到了，在mmap的时候，没有给yssc的len赋值，导致在free的时候，mmap的内存
一点都没释放，怪不得pmap的结果上的内存大小正好和upload的大小吻合呢。</p>

<h4 id="经验">经验</h4>
<ol>
  <li>像fd泄漏，内存泄漏这种bug必须要去查看现场，经验可以增加判断的准确度，但是不能作为
唯一的标准。</li>
  <li>必须要查看到runtime的信息，必须。</li>
  <li>合理的利用linux的工具，可以加快bug的确定。</li>
</ol>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2015/slove-fd-and-mmap-overfolw/</guid>
                <description>
                    
                </description>
                <pubDate>Wed, 23 Sep 2015 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
        
            <item>
                <title>使用bit解决跳位问题</title>
                <link>http://localhost:4000/blog/2014/bit-alg/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="背景">背景</h4>
<p>近期一直在做DFS的开发工作，在开发工作中碰到一个”跳目录”的问题。其实就是递增目录
的情况.</p>

<p>具体是这样的，
首先我们的DFS（名字叫ydb，一下就称ydb吧。）也就是ydb会对每个配置的挂载点进行格
式化。这个格式化其实就是建立文件夹。文件夹的数量(一下简称storerooms）是可配置的，比如你可以配置成64
也可以配置成128或者任何一个你想要的数，但是最大不能超过256(其实是255，0-FF）.那么ydb就会对每个挂
载点进行一次storeromes*storerooms的文件夹建立，最后文件夹的呈现这样一个情况：<br />
<img src="dirs.png" alt="dirs-style" /><br />
在ydb中，每个文件夹保存的文件数也是可以配置的（配置项为storecount），只要文件
夹内的文件存储量达到storecount，那么下一个文件将会存入下一个文件夹，比如当前存
储在00/03文件夹，那么下一次就会存储到00/04，如果storerooms为256，那么如果当前
文件夹为00/FF，那么下一次将会01/00（其实就是会跳母文件夹）。<br />
其实就是这个跳文件夹的功能，怎么样才能解决问题？</p>

<h4 id="解决方案">解决方案</h4>
<p>为了方便里面，我们把前面的p1设成母文件夹，p2设成子文件夹，就是这样p1/p2。</p>
<h5 id="人类的代码">人类的代码</h5>
<p>人类能理解的代码呢，基本上就是按部就班的解决这个问题，思路是这样的：</p>
<ol>
  <li>判断p2+1 是不是等于storerooms，如果没有，那就+1；</li>
  <li>如果等于storerooms，那么p2归零，p1+1；</li>
  <li>判断p1+1后是不是等于storerooms，如果不是，那么正常执行，如果是，那么p1，p2.<br />
全部归零，从头开始；或者根据mp的负载均衡配置，决定存储的mp。<br />
代码大概就是这样的；</li>
</ol>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12</pre></td><td class="code"><pre><span class="k">if</span><span class="p">(</span><span class="n">storerooms</span> <span class="o">==</span> <span class="n">p2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">){</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">storerooms</span> <span class="o">==</span> <span class="n">p1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">){</span>
        <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span>
        <span class="c1">//insert get mp by storemode
</span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">p1</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="n">p2</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
    <span class="w">
</span></pre></td></tr></tbody></table></code></pre></figure>

<p>这样勉强还算能看的下去，是吧？但是总归让人感觉不是很舒服，层级太多，判断太多了
，那么我们来一种计算机喜欢的方式。</p>
<h5 id="计算机喜欢的代码">计算机喜欢的代码</h5>
<p>这里我们使用了一个技巧，就是char和int之间的关系。<br />
<img src="int.jpg" alt="int" /><br />
如上图，一个int在内存中是4个byte，一个byte的最大值正好是255.完全符合我们的
storerooms的最大值。那么也就是说p1,p2是一个int的2个byte(分别为
        p2-&gt;byte0,p1-&gt;byte1,flag-&gt;byte2)，而且如果我们的最大值
正好设定为255，那么我们连跳级都不用了，直接就已经内置了（因为p2达到255，再加1
，正好向p1加1，p2归0）。所以我们就有如下的算法：</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16</pre></td><td class="code"><pre><span class="n">u32_t</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">u8_t</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">total</span> <span class="o">=</span> <span class="n">p1</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">p2</span><span class="p">;</span>
<span class="n">total</span><span class="o">++</span><span class="p">;</span>
<span class="n">flag</span> <span class="o">=</span> <span class="n">total</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">total</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
<span class="n">p2</span> <span class="o">=</span> <span class="n">total</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">storerooms</span> <span class="o">==</span> <span class="n">p2</span><span class="p">){</span>
    <span class="n">p1</span><span class="o">++</span><span class="p">;</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">storerooms</span> <span class="o">==</span> <span class="n">p1</span><span class="p">){</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
    <span class="w">
</span></pre></td></tr></tbody></table></code></pre></figure>

<p>解释一下：</p>
<ol>
  <li>首先，我们需要一个u32的临时变量，所有的数据都是在它内部变的；</li>
  <li>flag就是是不是需要重新获取mp或者说该mp下所有的目录都放满的标志；</li>
  <li>把p1和p2根据位置压入u32的临时变量，然后直接对这个变量+1；</li>
  <li>再把u32的变量分解成flag，p1和p2；</li>
  <li>然后判断母子目录要不要跳；</li>
  <li>最后根据flag，决定是否需要重新确定存储mp。</li>
</ol>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2014/bit-alg/</guid>
                <description>
                    
                </description>
                <pubDate>Thu, 04 Sep 2014 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
        
            <item>
                <title>vim配置</title>
                <link>http://localhost:4000/blog/2014/vim/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="摘要">摘要</h4>
<p>这次主要讲讲VIM对于一些”古怪”安静绑定的前因后果。这有助于我们更加了解VIM的历史
。然后再讲一下，在现在的键盘上，我们怎么通过”经济”的办法来达到使用VIM时，能保
证小手指尽量的舒适，一些按键能尽量的控制在键盘的大区内；然后，我会讲一下我的
VIM配置文件的组成，以及为什么我要用这种方法来配置我的VIM。最后当然是重头的VIM
配置文件。</p>

<h4 id="解放你的小手指">解放你的小手指</h4>
<p>讲VIM的小手指问题，我们得先讲讲VIM的出生年代。在Bill Joy开发VI的时候，其实他使
用的机器是ADM-3A。这款机器的键盘和现在机器的键盘是不一样的，详细看图：</p>

<p><img src="vim-kb.jpg" alt="ADM-3A的键盘" /></p>

<p>这是理解了吧。这不是Joy有意，实在是他使用的键盘CTRL的按键确实很方便，所以快捷
键很多都是CTRL。后来计算机键盘的发展把CTRL放到了下角，才导致了现在使用VIM的时
候，只要时间一长，小手指就像不是你的一样。<br />
再看一下键盘的上下左右按键，分别对应的是HJKL，所以VIM也就使用这几个键来作为基
本的移动按键。我觉得如果但是的键盘上有单独的上下左右按键，Joy应该也会随大流吧
。PS：其实后来有一款游戏CS（一款对战游戏）还重新定义了一种叫做WASD的移动风格。<br />
还有一个就是ESC，对于ESC按键，当初在键盘上的位置就在CTRL上边，就是现在我们TAB
键的位置，你按按TAB键试试，是不是很上手？<br />
那么面对这种情况，我们不是没有改变的办法，我们改变的办法就是重新绑定我们这几个
功能键，把它绑定到我们自己认为舒服的位置就可以。<br />
具体的方法就是，在你的HOME下新建一个.Xmodmap文件就可以，然后输入以下内容：</p>

<pre><code>
keycode 66 = Control_L
keycode 108 = Escape
clear Lock
add Control = Control_L
keycode 135 = Caps_Lock
add Lock = Caps_Lock
</code></pre>

<p>有的时候，你具体的键值可能是不一样的，这个时候你必须要使用软件来检测一下你的键
盘上CAPS、CTRP，ALT（right）和ESC的键值各是多少，然后根据你的实际情况换进去就
可以。<br />
如果你的米足够，并且是一个键盘党，那么这里推荐一款键盘，HHKB。其貌不扬的外观下
面是一颗静电容的芯。目前我使用的就是这款，它的键盘布局就非常适合Linux的CUI操作
用户，特别是VIMer。但是不适合Emacer（因为按键太少了，也没带脚踏板功能！)</p>

<p><img src="hhkb.jpg" alt="HHKB" /></p>

<h4 id="vim配置的进化">VIM配置的进化</h4>
<p>在很久之前，好像是3年吧。那个时候VIM的插件管理还没有什么好的办法。一般的做法都
是从vim.org上下载一个插件，然后解压，在cp到你的.vim目录下。如果有需要，再在
vimrc中配置一下插件，个性化一下或者重新绑定几个快捷键什么的。但是这种插件的管
理方法看似很简单，实则非常落后。主要是</p>
<ol>
  <li>乱，你的.vim文件夹的子文件夹内到处充满了不知道是什么插件的问题；</li>
  <li>不要禁用插件。当你想试用一下某个插件，等你安装完后觉得不爽，想删除的时候，
因为它是散落在多个文件夹的，所以你根本无法去删除或者是删除干净；</li>
  <li>版本不好控制。这种方式一般都是自己管理版本。把vimrc和.vim下面的文件全部签到
你自己的github或者googlecode上，这样就可以了，但是如果插件本身升级了，你还得手
动的去下载一个插件，覆盖掉你本地的插件，然后在签入自己的。或者你fork一个子项目
，然后定期更新什么的。反正比较麻烦。<br />
后来，估计是有几个VIMer对于这种方式实在恼火了，vundle这类”全家旅游，杀人越货”
级别的必备良药出现了。大家很快就使用了这种方式来管理。瞬间”这个世界变的清静了
“.</li>
</ol>

<h4 id="vim配置文件">VIM配置文件</h4>
<p>首先，我的配置文件由4个分文件构成。原因就是全部写在一个vimrc中的话，这个文件实
在太长了，也无法很好的定位和管理。所以我就把这个总的vimrc文件分成了4个文件。具
体如下:</p>
<ol>
  <li>main.vimrc 这个是主vimrc文件，里面加载另外的3个文件，并且一些基本的vim配置
都是在这个文件中完成；</li>
  <li>bundle.vimrc 这个vimrc文件主要配置了你需要使用的第三方插件；要使用这个文件
，必须先安装vundle插件；</li>
  <li>keymmaping.vimrc 这个文件是快捷键绑定文件，主要就是一些vim内置功能（不包括第
三方插件，第三方插件的快捷键在bundle.vimrc中配置）的快捷键；</li>
  <li>function.vimrc 这个文件主要管理一些自定义的功能函数。一般都是使用vim script
写的简单功能。</li>
</ol>
<pre><code>
"==========================================
" Base Settings  基本设置 main.vimrc
"==========================================
&lt;/br&gt;
:set nocompatible
&lt;/br&gt;
"""""""""""""""""""""""""""""""""""""""""""
" Include vimrc 读取子vimrc
"""""""""""""""""""""""""""""""""""""""""""
" install Vundle bundles
if filereadable(expand("~/.vim/myvim/bundle.vimrc"))
  source ~/.vim/myvim/bundle.vimrc
endif
&lt;/br&gt;
" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on
&lt;/br&gt;
"loading key-mapping
if filereadable(expand("~/.vim/myvim/keymapping.vimrc"))
  source ~/.vim/myvim/keymapping.vimrc
endif
&lt;/br&gt;
"loading function
if filereadable(expand("~/.vim/myvim/function.vimrc"))
  source ~/.vim/myvim/function.vimrc
endif
&lt;/br&gt;
"自动启用vimrc配置
autocmd! bufwritepost .vimrc source ~/.vimrc
:set switchbuf=useopen
"设置光标可以到最后一个字面后
set virtualedit=onemore
"设置快捷键等待时间
 " set timeout timeoutlen=300
 set timeout ttimeoutlen=-1
"设置退格键为删除键
set backspace=indent,eol,start
"设置移动命令在行首或者行尾时依然有效
set whichwrap+=b,s,&lt;,&gt;,[,]
set whichwrap+=&lt;,&gt;,h,l
"设置历史命令保存数
set history=1000
"关闭智能补全预览窗口
set completeopt=longest,menu
"设置鼠标可以选择文本
set selectmode+=mouse
"设置自动读取外面对于文件的变更
set autoread
"设置命令行高度为2
set cmdheight=1
set nobackup
set nowb
set noswapfile
"与windows共享剪贴板
set clipboard+=unnamed
"set clipboard+=unamedplus
"增强模式中的命令行自动完成操作
set wildmenu
"开启鼠标
set mouse=a
" 启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI
" 不让vim发出讨厌的滴滴声
set novisualbell         " don't beep
set noerrorbells
"自动切换当前目录为当前文件所在目录
set autochdir
"打开时忽略文件名后缀
set wildignore+=\*.o,\*.obj,\*.pyc,\*.db,\*.swp,\*.bak,\*.class
"默认就是全buffer搜索
set gdefault
"切换到当前tab打开文件的路径下
autocmd BufEnter * cd %:p:h
"检测文件类型
filetype on
"针对不同的文件类型采用不同的缩进格式
filetype indent on
"允许插件
filetype plugin on
"启动自动补全
filetype plugin indent on
"create undo file
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo
if v:version &gt;= 730
    set undofile                " keep a persistent backup file
    set undodir=/tmp/vimundo/
endif
" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
"set selection=exclusive
" set selection=inclusive
" set selectmode=mouse,key
" No annoying sound on errors
set title                " change the terminal's title
set t_vb=
set tm=500
" Remember info about open buffers on close"
set viminfo^=%
" For regular expressions turn magic on
set magic
&lt;/br&gt;
"==========================================
" Display Settings 展示/排版等界面格式设置
"==========================================
"设置一行字数
set tw=78
"折行
set lbr
"中文折行不断字
set fo+=mB
:set formatoptions+=mM "format for chinese
" 高亮显示匹配的括号
set showmatch
"带有如下符号的单词不要被换行分割
set iskeyword+=$,@,%,#,-,__
set ambiwidth=double
"开启行号显示
:set number
"显示当前的行号列号：
set ruler
""在状态栏显示正在输入的命令
set showcmd
" Show current mode
set showmode
" Set 7 lines to the cursor - when moving vertically using j/k 上下滚动,始终在中间
set scrolloff=7
" 命令行（在状态行下）的高度，默认为1，这里是2
 set statusline=%&lt;%f\ %h%m%r%=%k[%{(&amp;fenc==\"\")?&amp;enc:&amp;fenc}%{(&amp;bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Always show the status line
set laststatus=2
" 取消换行。
" set nowrap
" How many tenths of a second to blink when matching brackets
set mat=2
" 突出显示当前行等
" set cursorcolumn
set cursorline          " 突出显示当前行
&lt;/br&gt;
"设置文内智能搜索提示
" 高亮search命中的文本。
set hlsearch
" 搜索时忽略大小写
set ignorecase
" 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）
set incsearch
" 有一个或以上大写字母时仍大小写敏感
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
&lt;/br&gt;
" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 }
set foldmethod=marker
set foldlevel=1
&lt;/br&gt;
" 缩进配置
set smartindent   " Smart indent
set autoindent    " always set autoindenting on
set copyindent
" never add copyindent, case error   " copy the previous indentation on autoindenting
"c程序可以在v模式中按=格式化
set cin
set cursorline
&lt;/br&gt;
" tab相关变更
set tabstop=4     " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=4  " number of spaces to use for autoindenting
set softtabstop=4 " 按退格键时可以一次删掉 4 个空格
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set expandtab     " 将Tab自动转化成空格    [需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set shiftround    " use multiple of shiftwidth when indenting with '&lt;' and '&gt;'
set cindent shiftwidth=4
set autoindent shiftwidth=4
&lt;/br&gt;
" A buffer becomes hidden when it is abandoned
" 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set hidden
set autowrite
set wildmode=list:longest
set ttyfast
&lt;/br&gt;
"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
"好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=
&lt;/br&gt;
"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
&lt;/br&gt;
"如果帮助无法显示中文,增加这句试试:
set helplang=cn
&lt;/br&gt;
" 下面这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8
&lt;/br&gt;
" Use Unix as the standard file type
set ffs=unix,dos,mac
&lt;/br&gt;
" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
&lt;/br&gt;
" 合并两行中文时，不在中间加空格：
set formatoptions+=B
&lt;/br&gt;
if has("win32") || has("win64")
	set fileencoding=chinese
else
	set fileencodings=utf-8,chinese,latin-1
endif
&lt;/br&gt;
if !has("gui_running")
	:set tenc=utf-8,gb2312,chinese
endif
&lt;/br&gt;
"解决consle输出乱码
language messages zh_CN.utf-8
&lt;/br&gt;
"==========================================
" Theme Settings  主题设置
"==========================================
&lt;/br&gt;
" Set extra options when running in GUI mode
if has("gui_running")
    set guifont=Monaco:h14
    set guioptions-=T
    set guioptions+=e
    set guioptions-=r
    set guioptions-=L
    set guitablabel=%M\ %t
    set showtabline=1
    set linespace=2
    set noimd
    " set t_Co=256
    "定义givm的颜色和去掉gvim的工具栏
	set guioptions-=T
&lt;/br&gt;
    "高亮显示
    if &amp;t_Co &gt; 2
        syntax on
        set hlsearch
    endif
endif
&lt;/br&gt;
"当终端支持颜色显示时打开彩色显示
if &amp;t_Co &gt; 1
	syntax enable
endif
&lt;/br&gt;
" theme主题
"背景变暗dark，亮设置为light
set background=dark
"colorscheme solarized
" colorscheme elise
set t_Co=256
&lt;/br&gt;
hi cursorline guibg=#333333 	" highlight bg color of current line
hi CursorColumn guibg=#333333   " highlight cursor
&lt;/br&gt;
"设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange
&lt;/br&gt;
"" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
&lt;/br&gt;
"==========================================
" others 其它设置
"==========================================
autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。
&lt;/br&gt;
" 自动补全配置
"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=longest,menu
&lt;/br&gt;
"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
&lt;/br&gt;
" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
  au BufReadPost * if line("'\"") &gt; 1 &amp;&amp; line("'\"") &lt;= line("$") | exe "normal! g'\"" | endif
endif
</code></pre>
<p>&lt;/br&gt;</p>
<pre><code>  
"==========================================
    "配置插件管理 bundle.vimrc
"==========================================
filetype off
&lt;/br&gt;
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
&lt;/br&gt;
Bundle "vundle"
&lt;/br&gt;
" 多语言语法检查
Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol='&gt;&gt;'
let g:syntastic_warning_symbol='&gt;'
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting = 0
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
highlight SyntasticErrorSign guifg=white guibg=black
&lt;/br&gt;
Bundle 'genutils'
&lt;/br&gt;
Bundle 'xvhfeng/c.vim'
map &lt;c-x&gt;c \cc
map &lt;c-x&gt;u \co
&lt;/br&gt;
" Bundle 'The-NERD-Commenter'
Bundle 'ShowTrailingWhitespace'
&lt;/br&gt;
Bundle 'EasyMotion'
let g:EasyMotion_leader_key = 'f'
&lt;/br&gt;
Bundle 'FencView.vim'
&lt;/br&gt;
Bundle 'The-NERD-tree'
let NERDTreeWinPos = "left" "where NERD tree window is placed on the screen
let NERDTreeWinSize = 30 "size of the NERD tree
nmap &lt;F7&gt; &lt;ESC&gt;:NERDTreeToggle&lt;RETURN&gt;" Open and close the NERD_tree.vim separately
&lt;/br&gt;
Bundle 'auto_mkdir'
&lt;/br&gt;
Bundle 'bufexplorer.zip'
:vmap &lt;c-x&gt;b &lt;esc&gt;:w!&lt;esc&gt;,be
:nmap &lt;c-x&gt;b &lt;esc&gt;:w!&lt;esc&gt;,be
&lt;/br&gt;
Bundle 'CRefVim'
if !hasmapto('&lt;Plug&gt;CRV_CRefVimInvoke')
    map &lt;silent&gt; &lt;unique&gt; &lt;Leader&gt;ci &lt;Plug&gt;CRV_CRefVimInvoke
endif
&lt;/br&gt;
Bundle 'DoxygenToolkit.vim'
let g:DoxygenToolkit_briefTag_pre="@Remark:"
let g:DoxygenToolkit_paramTag_pre="@Param:"
let g:DoxygenToolkit_returnTag="@Returns:"
map &lt;c-x&gt;f &lt;ESC&gt;:Dox&lt;cr&gt;
&lt;/br&gt;
Bundle 'grep.vim'
:nmap &lt;c-g&gt; &lt;ESC&gt;:Grep&lt;CR&gt;
&lt;/br&gt;
Bundle 'lookupfile'
" lookup file with ignore case
        function! LookupFile_IgnoreCaseFunc(pattern)
        let _tags = &amp;tags
        try
            let &amp;tags = eval(g:LookupFile_TagExpr)
            let newpattern = '\c' . a:pattern
            let tags = taglist(newpattern)
        catch
            echohl ErrorMsg | echo "Exception: " . v:exception | echohl NONE
            return ""
        finally
            let &amp;tags = _tags
        endtry
    " Show the matches for what is typed so far.
        let files = map(tags, 'v:val["filename"]')
        return files
    endfunction
&lt;/br&gt;
let g:LookupFile_LookupFunc = 'LookupFile_IgnoreCaseFunc'
let g:LookupFile_MinPatLength = 2
let g:LookupFile_PreserveLastPattern = 0
let g:LookupFile_PreservePatternHistory = 1
let g:LookupFile_AlwaysAcceptFirst = 1
let g:LookupFile_AllowNewFiles = 0
"if filereadable("./filenametags")
"let g:LookupFile_TagExpr = '"./filenametags"'
"endif
nmap &lt;silent&gt; &lt;leader&gt;lf :LookupFile&lt;cr&gt;
nmap &lt;silent&gt; &lt;leader&gt;lb :LUBufs&lt;cr&gt;
nmap &lt;silent&gt; &lt;leader&gt;lw :LUWalk&lt;cr&gt;
&lt;/br&gt;
Bundle 'ShowMarks'
&lt;/br&gt;
Bundle 'statusline.vim'
&lt;/br&gt;
Bundle 'taglist.vim'
let Tlist_Exit_OnlyWindow = 1
"taglist窗口是否出现在右边，默认是左边
let Tlist_Use_Right_Window = 1
"是否在选择了taglist后自动关闭taglist窗口
let Tlist_Close_On_Select = 0
"是否在打开了taglist的同时把焦点设置到taglist窗口
let Tlist_GainFocus_On_ToggleOpen = 1
"当多个文件在taglist从显示的时候，只打开当前文件，折叠别的文件
let Tlist_File_Fold_Auto_Close = 0
let Tlist_Auto_Update = 1
"map &lt;silent&gt; &lt;leader&gt;tl :TlistToggle&lt;cr&gt;
map &lt;F8&gt; &lt;ESC&gt;:TlistToggle&lt;cr&gt;
&lt;/br&gt;
Bundle 'vmark.vim--Visual-Bookmarking'
&lt;/br&gt;
Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=1
let g:multi_cursor_next_key='&lt;C-n&gt;'
let g:multi_cursor_prev_key='&lt;C-p&gt;'
let g:multi_cursor_skip_key='&lt;C-k&gt;'
let g:multi_cursor_quit_key='&lt;Esc&gt;'
&lt;/br&gt;
Bundle 'Yggdroot/indentLine'
"config for indentLine
let g:indentLine_indentLevel = 5
let g:indentLine_enabled = 1
"hi Conceal ctermfg=red ctermbg=red
"let g:indentLine_char = '|'
&lt;/br&gt;
Bundle 'a.vim'
"设置c语言的header和c文件转换
:nmap &lt;C-x&gt;h &lt;ESC&gt;:w!&lt;ESC&gt;:A!&lt;CR&gt;
&lt;/br&gt;
Bundle 'Valloric/YouCompleteMe'
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_error_symbol = '&gt;&gt;'
let g:ycm_warning_symbol = '&gt;*'
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_min_num_identifier_candidate_chars = 0
" 直接触发自动补全
let g:ycm_key_invoke_completion = '&lt;c-x&gt;&lt;c-o&gt;'
let g:ycm_cache_omnifunc = 1
let g:ycm_auto_trigger = 0
let g:ycm_enable_diagnostic_signs = 0
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_echo_current_diagnostic = 1
"youcompleteme  默认tab  s-tab 和自动补全冲突
let g:ycm_key_list_select_completion=['&lt;c-n&gt;']
" let g:ycm_key_list_select_completion = ['&lt;Down&gt;']
let g:ycm_key_list_previous_completion=['&lt;c-p&gt;']
" let g:ycm_key_list_previous_completion = ['&lt;Up&gt;']
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
let g:ycm_collect_identifiers_from_tags_files = 1
nnoremap &lt;leader&gt;gd :YcmCompleter GoToDeclaration&lt;CR&gt;
nnoremap &lt;leader&gt;gi :YcmCompleter GoToDefinition&lt;CR&gt;
nnoremap &lt;leader&gt;gb :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;
nmap &lt;leader&gt;yd :YcmDiags&lt;CR&gt;
nmap &lt;F11&gt; :YcmRestartServer&lt;CR&gt;
&lt;/br&gt;
Bundle 'terryma/vim-expand-region'
map + &lt;Plug&gt;(expand_region_expand)
map _ &lt;Plug&gt;(expand_region_shrink)
&lt;/br&gt;
Bundle 'tpope/vim-commentary'
&lt;/br&gt;
" 代码片段快速插入
"Bundle 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
&lt;/br&gt;
"Bundle 'snipMate'
&lt;/br&gt;
Bundle 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = "&lt;tab&gt;"
let g:UltiSnipsJumpForwardTrigger = "&lt;tab&gt;"
" 定义存放代码片段的文件夹 .vim/additional_snippets下，使用自定义和默认的，将会的到全局，有冲突的会提示
let g:UltiSnipsSnippetDirectories=["additional_snippets", 'UltiSnips']
&lt;/br&gt;
" 自动补全html/xml标签
Bundle 'docunext/closetag.vim'
let g:closetag_html_style=1
&lt;/br&gt;
" 快速加入修改环绕字符
Bundle 'tpope/vim-surround'
&lt;/br&gt;
" for repeat -&gt; enhance surround.vim, . to repeat command
Bundle 'tpope/vim-repeat'
&lt;/br&gt;
" 快速去行尾空格 [, + &lt;Space&gt;]
Bundle 'bronson/vim-trailing-whitespace'
map &lt;leader&gt;es :FixWhitespace<cr>
&lt;/br&gt;
" 文件搜索
Bundle 'kien/ctrlp.vim'
let g:ctrlp_map = '&lt;leader&gt;p'
let g:ctrlp_cmd = 'CtrlP'
map &lt;leader&gt;f :CtrlPMRU&lt;CR&gt;
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
"\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
&lt;/br&gt;
"状态栏增强展示
" Bundle 'Lokaltog/vim-powerline'
"if want to use fancy,need to add font patch -&gt; git clone git://gist.github.com/1630581.git ~/.fonts/ttf-dejavu-powerline
"let g:Powerline_symbols = 'fancy'
" let g:Powerline_symbols = 'unicode'
&lt;/br&gt;
"括号显示增强
Bundle 'kien/rainbow_parentheses.vim'
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 40
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
&lt;/br&gt;
"################### 显示增强-主题 ###################"
&lt;/br&gt;
"主题 solarized
Bundle 'altercation/vim-colors-solarized'
"let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"
&lt;/br&gt;
"主题 molokai
Bundle 'tomasr/molokai'
"let g:molokai_original = 1
&lt;/br&gt;
"###### Python #########
" python fly check, 弥补syntastic只能打开和保存才检查语法的不足
Bundle 'kevinw/pyflakes-vim'
let g:pyflakes_use_quickfix = 0
&lt;/br&gt;
" for python.vim syntax highlight
Bundle 'hdima/python-syntax'
let python_highlight_all = 1
&lt;/br&gt;
"###### Markdown #########
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1
&lt;/br&gt;
"###### HTML/JS/JQUERY/CSS #########
&lt;/br&gt;
" for javascript
Bundle "pangloss/vim-javascript"
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"
&lt;/br&gt;
"for jquery
Bundle 'nono/jquery.vim'
&lt;/br&gt;
"###### Jinja2 #########
Bundle 'Glench/Vim-Jinja2-Syntax'
&lt;/br&gt;
"###### nginx #########
Bundle 'evanmiller/nginx-vim-syntax'
&lt;/br&gt;
Bundle 'SQLComplete.vim'
let g:sql_type_default = 'mysql'
"SQLSetType mysql
&lt;/br&gt;
"the markdown editer
Bundle 'plasticboy/vim-markdown'
&lt;/br&gt;
"the properties file editor
Bundle 'kamichidu/vim-edit-properties'
&lt;/br&gt;
"auto input the right ) ] or }
"Bundle 'jiangmiao/auto-pairs'
&lt;/br&gt;
"undo tree
Bundle 'mbbill/undotree'
nnoremap &lt;F12&gt; :UndotreeToggle&lt;cr&gt;
if has("persistent_undo")
    set undodir='~/.vim/undodir/'
    set undofile
endif
"
" golang
" " Go
" We are using cespare's modification,
" which uses bradfitz's goimports instead of gofmt.
" With goimports, you can add missing imports automatically.
" To install goimport:
"   go get github.com/bradfitz/goimports
" Bundle 'cespare/vim-golang'
" To install godef:
"   go get code.google.com/p/rog-go/exp/cmd/godef
" Bundle 'dgryski/vim-godef'
" To install gocode:
"   go get github.com/nsf/gocode
" Bundle 'Blackrush/vim-gocode'
" Bundle 'bradfitz/goimports'
" Bundle 'UltiSnips'
"Bundle 'AutoClose' -- this plug change the timeout and ttimeout fuck.
" 代码缩进
" https://github.com/nathanaelkane/vim-indent-guides
"Bundle 'nathanaelkane/vim-indent-guides'
"let g:indent_guides_auto_colors = 0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
"hi IndentGuidesOdd  guibg=red   ctermbg=3
"hi IndentGuidesEven guibg=green ctermbg=4
"hi IndentGuidesOdd  ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey
&lt;/br&gt;
filetype on
&lt;/code&gt;&lt;/pre&gt;
&lt;/br&gt;
<pre><code>
"==========================================
" HotKey Settings  自定义快捷键设置 keymmaping.vimrc
"==========================================
let mapleader = ","
nnoremap ; :
&lt;/br&gt;
" F1 - F6 设置
" F1 废弃这个键,防止调出系统帮助
" F2 行号开关，用于鼠标复制代码用
" F3 显示可打印字符开关
" F4 换行开关
" F5 粘贴模式paste_mode开关,用于有格式的代码粘贴
" F6 语法开关，关闭语法可以加快大文件的展示
&lt;/br&gt;
" I can type :help on my own, thanks.  Protect your fat fingers from the evils of &lt;F1&gt;
noremap &lt;F1&gt; &lt;Esc&gt;
""为方便复制，用&lt;F2&gt;开启/关闭行号显示:
function! HideNumber()
  if(&amp;relativenumber == &amp;number)
    set relativenumber! number!
  elseif(&amp;number)
    set number!
  else
    set relativenumber!
  endif
  set number?
endfunc
nnoremap &lt;F2&gt; :call HideNumber()&lt;CR&gt;
nnoremap &lt;F3&gt; :set list! list?&lt;CR&gt;
nnoremap &lt;F4&gt; :set wrap! wrap?&lt;CR&gt;
"set paste
"when in insert mode, press &lt;F5&gt; to go to
"paste mode, where you can paste mass data
"that won't be autoindented
set pastetoggle=&lt;F5&gt;
&lt;/br&gt;
" disbale paste mode when leaving insert mode
au InsertLeave * set nopaste
nnoremap &lt;F6&gt; :exec exists('syntax_on') ? 'syn off' : 'syn on'&lt;CR&gt;
&lt;/br&gt;
" 关闭方向键, 强迫自己用 hjkl
map &lt;Left&gt; &lt;Nop&gt;
map &lt;Right&gt; &lt;Nop&gt;
map &lt;Up&gt; &lt;Nop&gt;
map &lt;Down&gt; &lt;Nop&gt;
&lt;/br&gt;
"空格即选中当前项
inoremap &lt;expr&gt; &lt;Space&gt;       pumvisible() ? "\&lt;C-y&gt;\&lt;Space&gt;" : "\&lt;Space&gt;"
&lt;/br&gt;
"上下左右键的行为 会显示其他信息
inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? "\&lt;C-n&gt;" : "\&lt;Down&gt;"
inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? "\&lt;C-p&gt;" : "\&lt;Up&gt;"
inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? "\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;" : "\&lt;PageDown&gt;"
inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? "\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;" : "\&lt;PageUp&gt;"
&lt;/br&gt;
"tab 缩进
:nmap &lt;tab&gt;  v&gt;&lt;esc&gt;
:nmap &lt;s-tab&gt; v&lt;&lt;esc&gt;
:vmap &lt;tab&gt; &gt;gv
:vmap &lt;s-tab&gt; &lt;gv
"Reselect visual block after indent/outdent.调整缩进后自动选中，方便再次操作
" 在visual模式下缩进 (无限可重复)
:vnoremap &lt; &lt;gv
" 译释：:vnoremap 重定义了visual模式下 &lt; 符号的含义
" 把它定义成 &lt;gv
" 即：先&lt;向外缩进，然后gv重新选择上一次选择了的区域
" 这样在visual模式下就可以实现连续按<而连续缩进了 :vnoremap=""> &gt;gv
" 同里，内缩
":vmap &lt;tab&gt; &gt;gv
":imap &lt;s-tab&gt; &lt;Left&gt;
&lt;/br&gt;
"粘贴后剪切版不变
xnoremap p pgvy
noremap vp viwpgvy
noremap vy yiw
noremap Y y$
&lt;/br&gt;
"设置复制使用window粘贴板
:nmap &lt;C-p&gt; "+p
:vmap &lt;C-y&gt; "+y
:nmap Y y$
:vmap Y y$
" y$ -&gt; Y Make Y behave like other capitals
map Y y$
&lt;/br&gt;
"emacs style
":set winaltkeys=no
:imap &lt;C-e&gt; &lt;END&gt;
:imap &lt;C-a&gt; &lt;HOME&gt;
:imap &lt;C-b&gt; &lt;Left&gt;
:imap &lt;C-n&gt; &lt;Down&gt;
:imap &lt;C-p&gt; &lt;Up&gt;
:imap &lt;C-f&gt; &lt;Right&gt;
:imap &lt;C-v&gt; &lt;PageDown&gt;
:imap &lt;C-u&gt; &lt;PageUp&gt;
:imap &lt;C-d&gt; &lt;Delete&gt;
:imap &lt;C-r&gt; &lt;BackSpace&gt;
:imap &lt;c-w&gt;&lt;c-b&gt; &lt;s-left&gt;
:imap &lt;c-w&gt; &lt;s-right&gt;
:imap &lt;c-e&gt;&lt;c-b&gt; &lt;END&gt;&lt;Left&gt;
&lt;/br&gt;
nmap &lt;leader&gt;w :w!&lt;cr&gt;
nmap &lt;leader&gt;e :e&lt;SPACE&gt;
nmap &lt;leader&gt;s i&lt;space&gt;&lt;esc&gt;
nmap K i&lt;cr&gt;&lt;esc&gt;
&lt;/br&gt;
"格式化c语言块
:map &lt;leader&gt;fmt &lt;ESC&gt;=a{
&lt;/br&gt;
nmap &lt;c-e&gt;i &lt;esc&gt;guiw
nmap &lt;c-e&gt;u &lt;esc&gt;gUiw
&lt;/br&gt;
nmap wv     &lt;C-w&gt;v     " 垂直分割当前窗口
nmap wc     &lt;C-w&gt;c     " 关闭当前窗口
nmap ws     &lt;C-w&gt;s     " 水平分割当前窗口
&lt;/br&gt;
"set listchars=tab:./ ,trail:.   " 将制表符显示为'.   '
&lt;/br&gt;
"范围折叠
noremap &lt;c-x&gt;z &lt;esc&gt;zf%
&lt;/br&gt;
" 用空格键来开关折叠
nmap &lt;space&gt; za
&lt;/br&gt;
"清除c-x对于数字的按键，为组合键让步
map &lt;c-x&gt; &lt;ESC&gt;
&lt;/br&gt;
"the mapping for the cmd-line
" start of line
:cnoremap &lt;C-A&gt; &lt;Home&gt;
" back one character
:cnoremap &lt;C-B&gt; &lt;Left&gt;
" delete character under cursor
:cnoremap &lt;C-D&gt; &lt;Del&gt;
" end of line
:cnoremap &lt;C-E&gt; &lt;End&gt;
" forward one character
:cnoremap &lt;C-F&gt; &lt;Right&gt;
" recall newer command-line
:cnoremap &lt;C-N&gt; &lt;Down&gt;
" recall previous (older) command-line
:cnoremap &lt;C-P&gt; &lt;Up&gt;
" back one word
:cnoremap &lt;Esc&gt;&lt;C-B&gt; &lt;S-Left&gt;
" forward one word
:cnoremap &lt;Esc&gt;&lt;C-F&gt; &lt;S-Right&gt;
cnoremap &lt;C-j&gt; &lt;t_kd&gt;
cnoremap &lt;C-k&gt; &lt;t_ku&gt;
&lt;/br&gt;
"Treat long lines as break lines (useful when moving around in them)
"se swap之后，同物理行上线直接跳
map j gj
map k gk
&lt;/br&gt;
" Go to home and end using capitalized directions
noremap H ^
noremap L $l
&lt;/br&gt;
" select all
map &lt;Leader&gt;sa ggVG"
&lt;/br&gt;
" select block
nnoremap &lt;leader&gt;v V`}
&lt;/br&gt;
" w!! to sudo &amp; write a file
cmap w!! w !sudo tee &gt;/dev/null %
&lt;/br&gt;
" kj 替换 Esc
inoremap kj &lt;Esc&gt;
&lt;/br&gt;
" 滚动Speed up scrolling of the viewport slightly
nnoremap &lt;C-e&gt; 2&lt;C-e&gt;
nnoremap &lt;C-y&gt; 2&lt;C-y&gt;
&lt;/br&gt;
"Jump to start and end of line using the home row keys
nmap t o&lt;ESC&gt;k
nmap T O&lt;ESC&gt;j
&lt;/br&gt;
" Swap implementations of ` and ' jump to markers
" By default, ' jumps to the marked line, ` jumps to the marked line and
" column, so swap them
nnoremap ' `
nnoremap ` '
&lt;/br&gt;
" remap U to &lt;C-r&gt; for easier redo
nnoremap U &lt;C-r&gt;
&lt;/br&gt;
" Quickly edit/reload the vimrc file
nmap &lt;silent&gt; &lt;leader&gt;ev :e $MYVIMRC&lt;CR&gt;
nmap &lt;silent&gt; &lt;leader&gt;sv :so $MYVIMRC&lt;CR&gt;
&lt;/br&gt;
" 搜索相关
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v
&lt;/br&gt;
" 去掉搜索高亮
noremap &lt;silent&gt;&lt;leader&gt;/ :nohls&lt;CR&gt;
"Keep search pattern at the center of the screen."
nnoremap &lt;silent&gt; n nzz
nnoremap &lt;silent&gt; N Nzz
nnoremap &lt;silent&gt; * *zz
nnoremap &lt;silent&gt; # #zz
nnoremap &lt;silent&gt; g* g*zz
&lt;/code&gt;&lt;/pre&gt;

&lt;/br&gt;
<pre><code>
"==========================================
" Function Settings  自定义函数功能 function.vimrc
"==========================================
function! RunShell(Msg, Shell)
	echo a:Msg . '...'
	call system(a:Shell)
	echon 'done'
endfunction
&lt;/br&gt;
function! ReName()
    let old_name = expand("&lt;cword&gt;")
    let old_name = input("old name:",old_name)
	let new_name = input("new name:",old_name)
    let exec = input("are sure to refactor(y/n|Y/N):")
    if 'y' == exec || 'Y' == exec
        let cmd = printf("/opt/sys/settings/bin/vim/shell/ref.sh %s %s",old_name,new_name)
        echo cmd
        :call RunShell("refactoring",cmd)
    endif
endfunction
&lt;/br&gt;
let g:spx_begin = 0
&lt;/br&gt;
function! GetCurrentCursor()
    let g:spx_begin = line('.')
    let g:spx_begin = g:spx_begin + 0
    echo "get current line idx:".g:spx_begin
endfunction
&lt;/br&gt;
function! ClearCurrentCursor()
    let g:spx_begin = 0
    echo "clear current cursor is success"
endfunction
&lt;/br&gt;
function! CopyLinesToSystem()
    let begin_idx = 0
    if 0 != g:spx_begin
        let begin_idx = g:spx_begin
        let g:spx_cpy_begin = 0
    else
        let begin_idx = line(".")
        let begin_idx = input("begin line idx:",begin_idx)
    endif
    let end_idx = line(".")
    let end_idx = input("end line idx:",end_idx)
    let begin_idx = begin_idx + 0
    let end_idx = end_idx + 0
    if begin_idx &gt; end_idx
        let tmp = begin_idx
        let begin_idx = end_idx
        let end_idx = tmp
    endif
    let list = getline(begin_idx,end_idx)
    let lines = join(list,"\n")
    call setreg("+",lines)
    echo "copy lines to system begin:" . begin_idx . " end:" . end_idx
endfunction
&lt;/br&gt;
function! DeleteLines()
    let begin_idx = 0
    if 0 != g:spx_begin
        let begin_idx = g:spx_begin
        let g:spx_cpy_begin = 0
    else
        let begin_idx = line('.')
        let begin_idx = input("begin line idx:",begin_idx)
    endif
    let end_idx = line('.')
    let end_idx = input("end line idx:",end_idx)
    let begin_idx = begin_idx + 0
    let end_idx = end_idx + 0
    if begin_idx &gt; end_idx
        let tmp = begin_idx
        let begin_idx = end_idx
        let end_idx = tmp
    endif
    let cur = getpos('.')
    let cur[1] = begin_idx + 0
    let result = setpos('.',cur)
    if(0 != result)
        echo "delete lines begin:" . begin_idx . " end:" . end_idx ." is fail"
        return
    endif
    let lines = abs(begin_idx - end_idx) + 1 "add the line self
    "for fold
    execute ":". begin_idx . "," . end_idx . "de"
    echo "delete lines begin:" . begin_idx . " end:" . end_idx
endfunction
&lt;/br&gt;
noremap &lt;leader&gt;xg :call GetCurrentCursor()&lt;cr&gt;
noremap &lt;leader&gt;xc :cal ClearCurrentCursor()&lt;cr&gt;
noremap &lt;leader&gt;xy :call CopyLinesToSystem()&lt;cr&gt;
noremap &lt;leader&gt;xd :call DeleteLines()&lt;cr&gt;
noremap &lt;leader&gt;xr :call ReName()&lt;cr&gt;
&lt;/br&gt;
nmap &lt;M-g&gt; :call GetCurrentCursor()&lt;cr&gt;
nmap &lt;M-c&gt; :call ClearCurrentCursor()&lt;cr&gt;
nmap &lt;M-y&gt; :call CopyLinesToSystem()&lt;cr&gt;
nmap &lt;M-d&gt; :call DeleteLines()&lt;cr&gt;
nmap &lt;M-r&gt; :call ReName()&lt;cr&gt;
&lt;/br&gt;
"设定当前列高亮
function! SetColorColumn()
    let col_num = virtcol(".")
    let cc_list = split(&amp;cc, ',')
    if count(cc_list, string(col_num)) &lt;= 0
        execute "set cc+=".col_num
    else
        execute "set cc-=".col_num
    endif
endfunction
map &lt;leader&gt;ch :call SetColorColumn()&lt;CR&gt;
&lt;/br&gt;
" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py,*.md exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &amp;filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &amp;filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif
    if &amp;filetype == 'mkd' || &amp;filetype == 'md'
        call setline('.',"---")
        normal ==o
        call setline('.',"layout: post")
        normal ==o
        call setline('.',"categories: []")
        normal ==o
        call setline('.',"title: \" \"")
        normal ==o
        call setline('.',"tags: []")
        normal ==o
        call setline('.',"---")
        normal ==o
    endif

    normal G
    normal o
    normal o
endfunc
&lt;/br&gt;
" 保存文件时删除多余空格
" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.c :call DeleteTrailingWS()
autocmd BufWrite *.h :call DeleteTrailingWS()
autocmd BufWrite *.vimrc :call DeleteTrailingWS()
&lt;/br&gt;
" 相对行号      行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
  if(&amp;relativenumber == 1)
    set norelativenumber number
  else
    set relativenumber
  endif
endfunc
nnoremap &lt;C-t&gt; :call NumberToggle()&lt;cr&gt;
&lt;/br&gt;
function InsertHeadDef(firstLine, lastLine)
    if a:firstLine &lt;1 || a:lastLine&gt; line('$')
        echoerr 'InsertHeadDef : Range overflow !(FirstLine:'.a:firstLine.';LastLine:'.a:lastLine.';ValidRange:1~'.line('$').')'
        return ''
    endif
    let sourcefilename=expand("%:t")
    let definename=substitute(sourcefilename,' ','','g')
    let definename=substitute(definename,'\.','_','g')
    let definename = toupper(definename)
    exe 'normal '.a:firstLine.'GO'
    call setline('.', '#ifndef _'.definename."_")
    normal ==o
    call setline('.', '#define _'.definename."_")
    normal ==o
    call setline('.', '#ifdef __cplusplus')
    normal ==o
    call setline('.', 'extern "C" {')
    normal ==o
    call setline('.', '#endif')
    normal ==o
    exe 'normal =='.(a:lastLine-a:firstLine+1).'jo'
    call setline('.', '#ifdef __cplusplus')
    normal ==o
    call setline('.', '}')
    normal ==o
    call setline('.', '#endif')
    normal ==o
    call setline('.', '#endif')
    let goLn = a:firstLine+2
    exe 'normal =='.goLn.'G'
endfunction
function InsertHeadDefN()
    let firstLine = 1
    let lastLine = line('$')
    let n=1
    while n &lt; 20
        let line = getline(n)
        if n==1
            if line =~ '^\/\*.*$'
                let n = n + 1
                continue
            else
                break
            endif
        endif
        if line =~ '^.*\*\/$'
            let firstLine = n+1
            break
        endif
        let n = n + 1
    endwhile
    call InsertHeadDef(firstLine, lastLine)
endfunction
nmap ha :call InsertHeadDefN()&lt;CR&gt;
</code></pre>
</而连续缩进了></code></pre></cr></code></pre>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2014/vim/</guid>
                <description>
                    
                </description>
                <pubDate>Sat, 30 Aug 2014 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
        
            <item>
                <title>系统配置</title>
                <link>http://localhost:4000/blog/2014/system/</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="摘要">摘要</h4>
<p>多年来，具体来说5年了，我一直使用ub+awesome的工作环境。在过程中，被公司的同事
笑成为”生活在CUI”中的另类。我选中ub是因为方便，apt-get实在让我无法自拔，并且ub
对于desktop的支持也是很多别的linux发行版无法比拟的。cos等等都比较适合部署在
server环境上。选中awesome，是因为喜欢它简洁的界面，瓦片式的管理也让屏幕的任何
一部分都不会被浪费。再加上我本身就喜欢CUI，所以awesome就成了首选。这些年来，积
累了一些配置文件，个人觉得还算用着顺手，这里就拿出来分享一下。</p>

<p><img src="awesome.jpg" alt="awesome" /></p>

<ol>
  <li>声音。<br />
ub的root默认是不开的，我又不喜欢使用sudo，就是不喜欢那种隔一层纱的感觉，所以虽
然自知linux不推荐开启root，但是我还是喜欢使用root的直接。所以一般我第一件事情
就是把root开启。开启的root的命令是：
    <div class="highlighter-rouge"><pre class="highlight"><code>sudo pwsswd root
</code></pre>
    </div>
    <p>然后输入你的root密码，这样就算是打开了，但是还不能登陆。还需要更改登陆配置。找
到/etc/gdm/gdm.conf，然后把AllowRoot改为true。<br />
如果你的root账户还不能登陆，你还需要去”系统-&gt;系统管理-&gt;登陆窗口”中的安全页中把
“允许本地系统管理员登陆”选项打开。</p>
  </li>
  <li>声音。<br />
root登陆后，你会发现声音没了。对我这种上班就带上耳机的人来说这是相当不能接受的
。所以你也要把声音打开。找到pulseaudio文件，然后把文件内的两个选项改成以下这样：
    <div class="highlighter-rouge"><pre class="highlight"><code>PULSEAUDIO_SYSTEM_START=1
DISALLOW_MODULE_LOADING=0
</code></pre>
    </div>
    <p>重启，就会有声音了。但是还有一个问题就是不知道为什么，有的时候启动的时候也是没
有声音，但是重启一下就正常了，分析了一下日志也没发现有什么问题，如果你知道，请
你告诉我。</p>
  </li>
  <li>chrome在root下无法启动。<br />
ub的root环境下，chrome无法启动，所以必须得给它加一个脚本，自定义user-data-dir
参数，就可以了。
    <div class="highlighter-rouge"><pre class="highlight"><code># /bin/bash
google-chrome \-\-user-data-dir=/root/.config/google-chrome &amp;
</code></pre>
    </div>
  </li>
  <li>awesome<br />
安装awesome
    <div class="highlighter-rouge"><pre class="highlight"><code>apt-get install awesome
</code></pre>
    </div>
    <p>awesome在/etc/下有一个文件夹是有它的配置文件的，awesome的配置文件使用lua写的，
个人的配置文件如下：</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-lua" data-lang="lua">    <span class="c1">-- Standard awesome library</span>
    <span class="nb">require</span><span class="p">(</span><span class="s2">"awful"</span><span class="p">)</span>
    <span class="nb">require</span><span class="p">(</span><span class="s2">"awful.autofocus"</span><span class="p">)</span>
    <span class="nb">require</span><span class="p">(</span><span class="s2">"awful.rules"</span><span class="p">)</span>
    <span class="c1">-- Theme handling library</span>
    <span class="nb">require</span><span class="p">(</span><span class="s2">"beautiful"</span><span class="p">)</span>
    <span class="c1">-- Notification library</span>
    <span class="nb">require</span><span class="p">(</span><span class="s2">"naughty"</span><span class="p">)</span>
    <span class="c1">-- Load Debian menu entries</span>
    <span class="nb">require</span><span class="p">(</span><span class="s2">"debian.menu"</span><span class="p">)</span>

    <span class="c1">-- Themes define colours, icons, and wallpapers</span>
    <span class="n">beautiful</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="s2">"/usr/share/awesome/themes/default/theme.lua"</span><span class="p">)</span>

    <span class="c1">-- This is used later as the default terminal and editor to run.</span>
    <span class="n">terminal</span> <span class="o">=</span> <span class="s2">"x-terminal-emulator"</span>
    <span class="n">editor</span> <span class="o">=</span> <span class="nb">os.getenv</span><span class="p">(</span><span class="s2">"EDITOR"</span><span class="p">)</span> <span class="ow">or</span> <span class="s2">"editor"</span>
    <span class="n">editor_cmd</span> <span class="o">=</span> <span class="n">terminal</span> <span class="o">..</span> <span class="s2">" -e "</span> <span class="o">..</span> <span class="n">editor</span>

    <span class="c1">-- Default modkey.</span>
    <span class="c1">-- Usually, Mod4 is the key with a logo between Control and Alt.</span>
    <span class="c1">-- If you do not like this or do not have such a key,</span>
    <span class="c1">-- I suggest you to remap Mod4 to another key using xmodmap or other tools.</span>
    <span class="c1">-- However, you can use another modifier like Mod1, but it may interact with others.</span>

    <span class="n">modkey</span> <span class="o">=</span> <span class="s2">"Mod4"</span>
    <span class="c1">--modkey = "alt"</span>

    <span class="c1">-- Table of layouts to cover with awful.layout.inc, order matters.</span>
    <span class="n">layouts</span> <span class="o">=</span>
    <span class="p">{</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">floating</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">tile</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">tile</span><span class="p">.</span><span class="n">left</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">tile</span><span class="p">.</span><span class="n">bottom</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">tile</span><span class="p">.</span><span class="n">top</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">fair</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">fair</span><span class="p">.</span><span class="n">horizontal</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">spiral</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">spiral</span><span class="p">.</span><span class="n">dwindle</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">max</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">max</span><span class="p">.</span><span class="n">fullscreen</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">magnifier</span>
    <span class="p">}</span>

    <span class="c1">-- Define a tag table which hold all screen tags.</span>
    <span class="n">tags</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">screen</span><span class="p">.</span><span class="n">count</span><span class="p">()</span> <span class="k">do</span>
        <span class="c1">-- Each screen has its own tag table.</span>
        <span class="n">tags</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">({</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span> <span class="p">},</span> <span class="n">s</span><span class="p">,</span> <span class="n">layouts</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="k">end</span>

    <span class="c1">-- Create a laucher widget and a main menu</span>
    <span class="n">myawesomemenu</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">{</span> <span class="s2">"manual"</span><span class="p">,</span> <span class="n">terminal</span> <span class="o">..</span> <span class="s2">" -e man awesome"</span> <span class="p">},</span>
        <span class="p">{</span> <span class="s2">"edit config"</span><span class="p">,</span> <span class="n">editor_cmd</span> <span class="o">..</span> <span class="s2">" "</span> <span class="o">..</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">getdir</span><span class="p">(</span><span class="s2">"config"</span><span class="p">)</span> <span class="o">..</span> <span class="s2">"/rc.lua"</span> <span class="p">},</span>
        <span class="p">{</span> <span class="s2">"restart"</span><span class="p">,</span> <span class="n">awesome</span><span class="p">.</span><span class="n">restart</span> <span class="p">},</span>
        <span class="p">{</span> <span class="s2">"quit"</span><span class="p">,</span> <span class="n">awesome</span><span class="p">.</span><span class="n">quit</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">mymainmenu</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">menu</span><span class="p">({</span> <span class="n">items</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span> <span class="s2">"awesome"</span><span class="p">,</span> <span class="n">myawesomemenu</span><span class="p">,</span> <span class="n">beautiful</span><span class="p">.</span><span class="n">awesome_icon</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s2">"Linux"</span><span class="p">,</span> <span class="n">debian</span><span class="p">.</span><span class="n">menu</span><span class="p">.</span><span class="n">Debian_menu</span><span class="p">.</span><span class="n">Debian</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s2">"shell"</span><span class="p">,</span> <span class="n">terminal</span> <span class="p">},</span>
                    <span class="p">}</span>
                <span class="p">})</span>
    <span class="n">mylauncher</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">launcher</span><span class="p">({</span> <span class="n">image</span> <span class="o">=</span> <span class="n">image</span><span class="p">(</span><span class="n">beautiful</span><span class="p">.</span><span class="n">awesome_icon</span><span class="p">),</span>
    <span class="n">menu</span> <span class="o">=</span> <span class="n">mymainmenu</span> <span class="p">})</span>

    <span class="c1">-- Create a textclock widget</span>
    <span class="n">mytextclock</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">textclock</span><span class="p">({</span> <span class="n">align</span> <span class="o">=</span> <span class="s2">"right"</span> <span class="p">})</span>
    <span class="c1">-- Create a systray</span>
    <span class="n">mysystray</span> <span class="o">=</span> <span class="n">widget</span><span class="p">({</span> <span class="nb">type</span> <span class="o">=</span> <span class="s2">"systray"</span> <span class="p">})</span>
    <span class="c1">-- Create a wibox for each screen and add it</span>
    <span class="n">mywibox</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">mypromptbox</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">mylayoutbox</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">mytaglist</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">mytaglist</span><span class="p">.</span><span class="n">buttons</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewonly</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="n">modkey</span> <span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">movetotag</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewtoggle</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="n">modkey</span> <span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">toggletag</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">4</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewnext</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">5</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewprev</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">mytasklist</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">mytasklist</span><span class="p">.</span><span class="n">buttons</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">c</span><span class="p">:</span><span class="n">isvisible</span><span class="p">()</span> <span class="k">then</span>
            <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewonly</span><span class="p">(</span><span class="n">c</span><span class="p">:</span><span class="n">tags</span><span class="p">()[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">end</span>
        <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="o">=</span> <span class="n">c</span>
        <span class="n">c</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span>
    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span>
        <span class="k">if</span> <span class="n">instance</span> <span class="k">then</span>
            <span class="n">instance</span><span class="p">:</span><span class="n">hide</span><span class="p">()</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="kc">nil</span>
        <span class="k">else</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">menu</span><span class="p">.</span><span class="n">clients</span><span class="p">({</span> <span class="n">width</span><span class="o">=</span><span class="mi">250</span> <span class="p">})</span>
        <span class="k">end</span>
    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">4</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="k">then</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span> <span class="k">end</span>
    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">5</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="k">then</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span> <span class="k">end</span>
    <span class="k">end</span><span class="p">))</span>

    <span class="k">for</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">screen</span><span class="p">.</span><span class="n">count</span><span class="p">()</span> <span class="k">do</span>
        <span class="c1">-- Create a promptbox for each screen</span>
        <span class="n">mypromptbox</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">prompt</span><span class="p">({</span> <span class="n">layout</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">horizontal</span><span class="p">.</span><span class="n">leftright</span> <span class="p">})</span>
        <span class="c1">-- Create an imagebox widget which will contains an icon indicating which layout we're using.</span>
        <span class="c1">-- We need one layoutbox per screen.</span>
        <span class="n">mylayoutbox</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">layoutbox</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">mylayoutbox</span><span class="p">[</span><span class="n">s</span><span class="p">]:</span><span class="n">buttons</span><span class="p">(</span><span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">layouts</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">layouts</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">4</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">layouts</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">5</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">layouts</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">)))</span>
        <span class="c1">-- Create a taglist widget</span>
        <span class="n">mytaglist</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">taglist</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">taglist</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">all</span><span class="p">,</span> <span class="n">mytaglist</span><span class="p">.</span><span class="n">buttons</span><span class="p">)</span>
        <span class="c1">-- Create a tasklist widget</span>
        <span class="n">mytasklist</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">tasklist</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">tasklist</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">currenttags</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
        <span class="k">end</span><span class="p">,</span> <span class="n">mytasklist</span><span class="p">.</span><span class="n">buttons</span><span class="p">)</span>
        <span class="c1">-- Create the wibox</span>
        <span class="n">mywibox</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">wibox</span><span class="p">({</span> <span class="n">position</span> <span class="o">=</span> <span class="s2">"top"</span><span class="p">,</span> <span class="n">screen</span> <span class="o">=</span> <span class="n">s</span> <span class="p">})</span>
        <span class="c1">-- Add widgets to the wibox - order matters</span>
        <span class="n">mywibox</span><span class="p">[</span><span class="n">s</span><span class="p">].</span><span class="n">widgets</span> <span class="o">=</span> <span class="p">{</span>
            <span class="p">{</span>
                <span class="n">mylauncher</span><span class="p">,</span>
                <span class="n">mytaglist</span><span class="p">[</span><span class="n">s</span><span class="p">],</span>
                <span class="n">mypromptbox</span><span class="p">[</span><span class="n">s</span><span class="p">],</span>
                <span class="n">layout</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">horizontal</span><span class="p">.</span><span class="n">leftright</span>
            <span class="p">},</span>
            <span class="n">mylayoutbox</span><span class="p">[</span><span class="n">s</span><span class="p">],</span>
            <span class="n">mytextclock</span><span class="p">,</span>
            <span class="n">s</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">mysystray</span> <span class="ow">or</span> <span class="kc">nil</span><span class="p">,</span>
            <span class="n">mytasklist</span><span class="p">[</span><span class="n">s</span><span class="p">],</span>
            <span class="n">layout</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">widget</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">horizontal</span><span class="p">.</span><span class="n">rightleft</span>
        <span class="p">}</span>
    <span class="k">end</span>

    <span class="n">root</span><span class="p">.</span><span class="n">buttons</span><span class="p">(</span><span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">mymainmenu</span><span class="p">:</span><span class="n">toggle</span><span class="p">()</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">4</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewnext</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">5</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewprev</span><span class="p">)</span>
    <span class="p">))</span>

    <span class="n">globalkeys</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"Left"</span><span class="p">,</span>   <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewprev</span>       <span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"Right"</span><span class="p">,</span>  <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewnext</span>       <span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"Escape"</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">history</span><span class="p">.</span><span class="n">restore</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"j"</span><span class="p">,</span>
    <span class="k">function</span> <span class="p">()</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="k">then</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span> <span class="k">end</span>
    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"k"</span><span class="p">,</span>
    <span class="k">function</span> <span class="p">()</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="k">then</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span> <span class="k">end</span>
    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"w"</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">mymainmenu</span><span class="p">:</span><span class="n">show</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>        <span class="k">end</span><span class="p">),</span>
    <span class="c1">-- Layout manipulation</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Shift"</span>   <span class="p">},</span> <span class="s2">"j"</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">swap</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span>  <span class="mi">1</span><span class="p">)</span>    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Shift"</span>   <span class="p">},</span> <span class="s2">"k"</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">swap</span><span class="p">.</span><span class="n">byidx</span><span class="p">(</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">","</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">screen</span><span class="p">.</span><span class="n">focus_relative</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"."</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">screen</span><span class="p">.</span><span class="n">focus_relative</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"u"</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">urgent</span><span class="p">.</span><span class="n">jumpto</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"Tab"</span><span class="p">,</span>
    <span class="k">function</span> <span class="p">()</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">history</span><span class="p">.</span><span class="n">previous</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="k">then</span>
            <span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span>
        <span class="k">end</span>
    <span class="k">end</span><span class="p">),</span>
    <span class="c1">-- Standard program</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"Return"</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="n">terminal</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="p">},</span> <span class="s2">"XF86AudioRaiseVolume"</span><span class="p">,</span>    <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">"amixer set Master 3+"</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="p">},</span> <span class="s2">"XF86AudioLowerVolume"</span><span class="p">,</span>    <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">"amixer set Master 3-"</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="c1">--define by myself</span>
    <span class="c1">--              awful.key({ modkey,           }, "F11", function () awful.util.spawn("dmenu_run") end),</span>
    <span class="c1">--awful.key({ modkey,           }, "v", function () awful.util.spawn("gnome-volume-control-applet") end),</span>
    <span class="c1">--awful.key({ modkey,"Control"  }, "n", function () awful.util.spawn("nm-applet") end),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>		    <span class="p">},</span> <span class="s2">"x"</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">"xlock"</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Control"</span> <span class="p">},</span> <span class="s2">"r"</span><span class="p">,</span> <span class="n">awesome</span><span class="p">.</span><span class="n">restart</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Shift"</span>	  <span class="p">},</span> <span class="s2">"q"</span><span class="p">,</span> <span class="n">awesome</span><span class="p">.</span><span class="n">quit</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"l"</span><span class="p">,</span>     <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incmwfact</span><span class="p">(</span> <span class="mi">0</span><span class="p">.</span><span class="mi">05</span><span class="p">)</span>    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"h"</span><span class="p">,</span>     <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incmwfact</span><span class="p">(</span><span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">05</span><span class="p">)</span>    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Shift"</span>   <span class="p">},</span> <span class="s2">"h"</span><span class="p">,</span>     <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incnmaster</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span>      <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Shift"</span>   <span class="p">},</span> <span class="s2">"l"</span><span class="p">,</span>     <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incnmaster</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>      <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Control"</span> <span class="p">},</span> <span class="s2">"h"</span><span class="p">,</span>     <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incncol</span><span class="p">(</span> <span class="mi">1</span><span class="p">)</span>         <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Control"</span> <span class="p">},</span> <span class="s2">"l"</span><span class="p">,</span>     <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">incncol</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>         <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"space"</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">layouts</span><span class="p">,</span>  <span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Shift"</span>   <span class="p">},</span> <span class="s2">"space"</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">inc</span><span class="p">(</span><span class="n">layouts</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">end</span><span class="p">),</span>
    <span class="c1">-- Prompt</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span> <span class="p">},</span>            <span class="s2">"r"</span><span class="p">,</span>     <span class="k">function</span> <span class="p">()</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span><span class="s2">"dmenu_run"</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="n">clientkeys</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"f"</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">.</span><span class="n">fullscreen</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">fullscreen</span>  <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>		  <span class="p">},</span> <span class="s2">"c"</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">:</span><span class="n">kill</span><span class="p">()</span>                         <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Control"</span> <span class="p">},</span> <span class="s2">"space"</span><span class="p">,</span>  <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">floating</span><span class="p">.</span><span class="n">toggle</span>                     <span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Control"</span> <span class="p">},</span> <span class="s2">"Return"</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">:</span><span class="n">swap</span><span class="p">(</span><span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">getmaster</span><span class="p">())</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"o"</span><span class="p">,</span>      <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">movetoscreen</span>                        <span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Shift"</span>   <span class="p">},</span> <span class="s2">"r"</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">:</span><span class="n">redraw</span><span class="p">()</span>                       <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"n"</span><span class="p">,</span>      <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">.</span><span class="n">minimized</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">minimized</span>    <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span>           <span class="p">},</span> <span class="s2">"m"</span><span class="p">,</span>
    <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="n">c</span><span class="p">.</span><span class="n">maximized_horizontal</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">maximized_horizontal</span>
        <span class="n">c</span><span class="p">.</span><span class="n">maximized_vertical</span>   <span class="o">=</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">maximized_vertical</span>
    <span class="k">end</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="c1">-- Compute the maximum number of digit we need, limited to 9</span>
    <span class="n">keynumber</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">screen</span><span class="p">.</span><span class="n">count</span><span class="p">()</span> <span class="k">do</span>
        <span class="n">keynumber</span> <span class="o">=</span> <span class="nb">math.min</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="nb">math.max</span><span class="p">(</span><span class="o">#</span><span class="n">tags</span><span class="p">[</span><span class="n">s</span><span class="p">],</span> <span class="n">keynumber</span><span class="p">));</span>
    <span class="k">end</span>
    <span class="c1">-- Bind all key numbers to tags.</span>
    <span class="c1">-- Be careful: we use keycodes to make it works on any keyboard layout.</span>
    <span class="c1">-- This should map on the top row of your keyboard, usually 1 to 9.</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">keynumber</span> <span class="k">do</span>
        <span class="n">globalkeys</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">globalkeys</span><span class="p">,</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span> <span class="p">},</span> <span class="s2">"#"</span> <span class="o">..</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span>
        <span class="k">function</span> <span class="p">()</span>
            <span class="kd">local</span> <span class="n">screen</span> <span class="o">=</span> <span class="n">mouse</span><span class="p">.</span><span class="n">screen</span>
            <span class="k">if</span> <span class="n">tags</span><span class="p">[</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">then</span>
                <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewonly</span><span class="p">(</span><span class="n">tags</span><span class="p">[</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
            <span class="k">end</span>
        <span class="k">end</span><span class="p">),</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Control"</span> <span class="p">},</span> <span class="s2">"#"</span> <span class="o">..</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span>
        <span class="k">function</span> <span class="p">()</span>
            <span class="kd">local</span> <span class="n">screen</span> <span class="o">=</span> <span class="n">mouse</span><span class="p">.</span><span class="n">screen</span>
            <span class="k">if</span> <span class="n">tags</span><span class="p">[</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">then</span>
                <span class="n">awful</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="n">viewtoggle</span><span class="p">(</span><span class="n">tags</span><span class="p">[</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
            <span class="k">end</span>
        <span class="k">end</span><span class="p">),</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span><span class="s2">"Control"</span><span class="p">,</span>     	<span class="p">},</span> <span class="s2">"#"</span> <span class="o">..</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span>
        <span class="k">function</span> <span class="p">()</span>
            <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="ow">and</span> <span class="n">tags</span><span class="p">[</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">then</span>
                <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">movetotag</span><span class="p">(</span><span class="n">tags</span><span class="p">[</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
            <span class="k">end</span>
        <span class="k">end</span><span class="p">),</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">key</span><span class="p">({</span> <span class="n">modkey</span><span class="p">,</span> <span class="s2">"Control"</span><span class="p">,</span> <span class="s2">"Shift"</span> <span class="p">},</span> <span class="s2">"#"</span> <span class="o">..</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">9</span><span class="p">,</span>
        <span class="k">function</span> <span class="p">()</span>
            <span class="k">if</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="ow">and</span> <span class="n">tags</span><span class="p">[</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="k">then</span>
                <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">toggletag</span><span class="p">(</span><span class="n">tags</span><span class="p">[</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">screen</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
            <span class="k">end</span>
        <span class="k">end</span><span class="p">))</span>
    <span class="k">end</span>
    <span class="n">clientbuttons</span> <span class="o">=</span> <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">table</span><span class="p">.</span><span class="n">join</span><span class="p">(</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span> <span class="n">c</span><span class="p">:</span><span class="n">raise</span><span class="p">()</span> <span class="k">end</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="n">modkey</span> <span class="p">},</span> <span class="mi">1</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">mouse</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">move</span><span class="p">),</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">button</span><span class="p">({</span> <span class="n">modkey</span> <span class="p">},</span> <span class="mi">3</span><span class="p">,</span> <span class="n">awful</span><span class="p">.</span><span class="n">mouse</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">resize</span><span class="p">))</span>
    <span class="c1">-- Set keys</span>
    <span class="n">root</span><span class="p">.</span><span class="n">keys</span><span class="p">(</span><span class="n">globalkeys</span><span class="p">)</span>

    <span class="n">awful</span><span class="p">.</span><span class="n">rules</span><span class="p">.</span><span class="n">rules</span> <span class="o">=</span> <span class="p">{</span>
        <span class="c1">-- All clients will match this rule.</span>
        <span class="p">{</span> <span class="n">rule</span> <span class="o">=</span> <span class="p">{</span> <span class="p">},</span>
        <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">border_width</span> <span class="o">=</span> <span class="n">beautiful</span><span class="p">.</span><span class="n">border_width</span><span class="p">,</span>
        <span class="n">border_color</span> <span class="o">=</span> <span class="n">beautiful</span><span class="p">.</span><span class="n">border_normal</span><span class="p">,</span>
        <span class="n">focus</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
        <span class="n">keys</span> <span class="o">=</span> <span class="n">clientkeys</span><span class="p">,</span>
        <span class="n">buttons</span> <span class="o">=</span> <span class="n">clientbuttons</span> <span class="p">}</span> <span class="p">},</span>
        <span class="p">{</span> <span class="n">rule</span> <span class="o">=</span> <span class="p">{</span> <span class="n">class</span> <span class="o">=</span> <span class="s2">"MPlayer"</span> <span class="p">},</span>
        <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">floating</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">},</span>
        <span class="p">{</span> <span class="n">rule</span> <span class="o">=</span> <span class="p">{</span> <span class="n">class</span> <span class="o">=</span> <span class="s2">"pinentry"</span> <span class="p">},</span>
        <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">floating</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">},</span>
        <span class="p">{</span> <span class="n">rule</span> <span class="o">=</span> <span class="p">{</span> <span class="n">class</span> <span class="o">=</span> <span class="s2">"gimp"</span> <span class="p">},</span>
        <span class="n">properties</span> <span class="o">=</span> <span class="p">{</span> <span class="n">floating</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">},</span>
        <span class="c1">-- Set Firefox to always map on tags number 2 of screen 1.</span>
        <span class="c1">-- { rule = { class = "Firefox" },</span>
        <span class="c1">--   properties = { tag = tags[1][2] } },</span>
    <span class="p">}</span>

    <span class="c1">-- Signal function to execute when a new client appears.</span>
    <span class="n">client</span><span class="p">.</span><span class="n">add_signal</span><span class="p">(</span><span class="s2">"manage"</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">startup</span><span class="p">)</span>
        <span class="c1">-- Add a titlebar</span>
        <span class="c1">-- awful.titlebar.add(c, { modkey = modkey })</span>
        <span class="c1">-- Enable sloppy focus</span>
        <span class="n">c</span><span class="p">:</span><span class="n">add_signal</span><span class="p">(</span><span class="s2">"mouse::enter"</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">screen</span><span class="p">)</span> <span class="o">~=</span> <span class="n">awful</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">suit</span><span class="p">.</span><span class="n">magnifier</span>
                <span class="ow">and</span> <span class="n">awful</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">focus</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">then</span>
                <span class="n">client</span><span class="p">.</span><span class="n">focus</span> <span class="o">=</span> <span class="n">c</span>
            <span class="k">end</span>
        <span class="k">end</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">startup</span> <span class="k">then</span>
            <span class="c1">-- Set the windows at the slave,</span>
            <span class="c1">-- i.e. put it at the end of others instead of setting it master.</span>
            <span class="c1">-- awful.client.setslave(c)</span>
            <span class="c1">-- Put windows in a smart way, only if they does not set an initial position.</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">size_hints</span><span class="p">.</span><span class="n">user_position</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">c</span><span class="p">.</span><span class="n">size_hints</span><span class="p">.</span><span class="n">program_position</span> <span class="k">then</span>
                <span class="n">awful</span><span class="p">.</span><span class="n">placement</span><span class="p">.</span><span class="n">no_overlap</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
                <span class="n">awful</span><span class="p">.</span><span class="n">placement</span><span class="p">.</span><span class="n">no_offscreen</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
            <span class="k">end</span>
        <span class="k">end</span>
    <span class="k">end</span><span class="p">)</span>

    <span class="n">client</span><span class="p">.</span><span class="n">add_signal</span><span class="p">(</span><span class="s2">"focus"</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">.</span><span class="n">border_color</span> <span class="o">=</span> <span class="n">beautiful</span><span class="p">.</span><span class="n">border_focus</span> <span class="k">end</span><span class="p">)</span>
    <span class="n">client</span><span class="p">.</span><span class="n">add_signal</span><span class="p">(</span><span class="s2">"unfocus"</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="p">.</span><span class="n">border_color</span> <span class="o">=</span> <span class="n">beautiful</span><span class="p">.</span><span class="n">border_normal</span> <span class="k">end</span><span class="p">)</span>

    <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn_with_shell</span><span class="p">(</span><span class="s2">"nm-applet"</span><span class="p">)</span>
    <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn_with_shell</span><span class="p">(</span><span class="s2">"gnome-sound-applet"</span><span class="p">)</span> <span class="c1">--sine ubuntu 12.04.02</span>
    <span class="c1">--awful.util.spawn_with_shell("gnome-volume-control-applet")</span>
    <span class="c1">--            awful.util.spawn_with_shell("xautolock -time 10 -locker 'xlock -lockdelay 10'")</span>
    <span class="c1">--                awful.util.run_once("xautolock -time 1 -locker 'xlock -lockdelay 1'")</span>
    <span class="k">function</span> <span class="nf">run_once</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
        <span class="n">findme</span> <span class="o">=</span> <span class="n">cmd</span>
        <span class="n">firstspace</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">:</span><span class="n">find</span><span class="p">(</span><span class="s2">" "</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">firstspace</span> <span class="k">then</span>
            <span class="n">findme</span> <span class="o">=</span> <span class="n">cmd</span><span class="p">:</span><span class="n">sub</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">firstspace</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">end</span>
        <span class="n">awful</span><span class="p">.</span><span class="n">util</span><span class="p">.</span><span class="n">spawn_with_shell</span><span class="p">(</span><span class="s2">"pgrep -u $USER -x "</span> <span class="o">..</span> <span class="n">findme</span> <span class="o">..</span> <span class="s2">" &gt; /dev/null || ("</span> <span class="o">..</span> <span class="n">cmd</span> <span class="o">..</span> <span class="s2">")"</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">run_once</span><span class="p">(</span><span class="s2">"xautolock -time 30 -locker 'xlock -lockdelay 30'"</span><span class="p">);</span></code></pre></figure>

<p>&lt;/br&gt;
在使用awesome的过程中，需要dmenu加以配合，这样你的CUI才能真正的用起来，算起来
。</p>
<ol>
  <li>关机<br />
关机需要xlockmore和xautolock两个软件进行配合，使用apt-get就可以。<br />
xlockmore是锁屏和关机的，xautolock是自动启动屏保啥的。<br />
然后在增加一个shutdown的bash文件，你就可以使用这个文件来关机或者休眠了。</li>
</ol>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#! /bin/sh</span>

<span class="nv">ACTION</span><span class="o">=</span><span class="sb">`</span>zenity --width<span class="o">=</span>90 --height<span class="o">=</span>200 --list --radiolist --text<span class="o">=</span><span class="s2">"Select logout action"</span> --title<span class="o">=</span><span class="s2">"Logout"</span> --column <span class="s2">"Choice"</span> --column <span class="s2">"Action"</span> TRUE Shutdown FALSE Reboot FALSE LockScreen FALSE Suspend<span class="sb">`</span>

<span class="k">if</span> <span class="o">[</span> -n <span class="s2">"</span><span class="k">${</span><span class="nv">ACTION</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span>;<span class="k">then
  case</span> <span class="nv">$ACTION</span> <span class="k">in
  </span>Shutdown<span class="p">)</span>
    shutdown -h now
    <span class="c">## or via ConsoleKit</span>
    <span class="c"># dbus-send --system --dest=org.freedesktop.ConsoleKit.Manager </span>
    <span class="c"># /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop</span>
    <span class="p">;;</span>
  Reboot<span class="p">)</span>
    reboot
    <span class="c">## Or via ConsoleKit</span>
    <span class="c"># dbus-send --system --dest=org.freedesktop.ConsoleKit.Manager </span>
    <span class="c"># /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Restart</span>
    <span class="p">;;</span>
  Suspend<span class="p">)</span>
    <span class="c">#gksudo pm-suspend</span>
    dbus-send --system --print-reply --dest<span class="o">=</span>org.freedesktop.Hal 
    /org/freedesktop/Hal/devices/computer 
    org.freedesktop.Hal.Device.SystemPowerManagement.Suspend int32:0
    <span class="c"># HAL is deprecated in newer systems in favor of UPower etc.</span>
    <span class="c"># dbus-send --system --dest=org.freedesktop.UPower /org/freedesktop/UPower org.freedesktop.UPower.Suspend</span>
    <span class="p">;;</span>
  LockScreen<span class="p">)</span>
    slock
    <span class="c"># Or gnome-screensaver-command -l</span>
    <span class="p">;;</span>
  <span class="k">esac</span>
<span class="k">fi</span></code></pre></figure>

<ol>
  <li>小红点<br />
因为一直使用Thinkpad的笔记本，但是ub对于小红点的支持貌似不是太好，刚刚开始的几
个ub的版本好像还不支持小红点，所以就使用一个第三方的软件来加以支持，这个软件叫
gpointing-device-settings,安装以后还是相当好用的，但是你还需要加一个配置文件。
当然，后来的ub好像已经开始支持小红点了，具体忘了，很久没用Thinkpad了。</li>
</ol>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#! /bin/sh</span>
<span class="c">#close touch</span>
synclient <span class="nv">TouchpadOff</span><span class="o">=</span>1
&lt;/br&gt;
<span class="c">#开启小红帽+中键</span>
xinput <span class="nb">set</span>-int-prop <span class="s2">"TPPS/2 IBM TrackPoint"</span> <span class="s2">"Evdev Wheel Emulation"</span> 8 1
xinput <span class="nb">set</span>-int-prop <span class="s2">"TPPS/2 IBM TrackPoint"</span> <span class="s2">"Evdev Wheel Emulation Button"</span> 8 2
xinput <span class="nb">set</span>-int-prop <span class="s2">"TPPS/2 IBM TrackPoint"</span> <span class="s2">"Evdev Wheel Emulation Y Axis"</span> 8 4 5
xinput <span class="nb">set</span>-int-prop <span class="s2">"TPPS/2 IBM TrackPoint"</span> <span class="s2">"Evdev Wheel Emulation X Axis"</span> 8 6 7</code></pre></figure>

<ol>
  <li>CUI中文件夹的颜色<br />
当你使用CUI的时候，使用ls列出来的文件和文件夹都是一样的颜色，你也不能很好的辨
认出来，所以，你增加一个dircolors文件，并且做一个软连接到这个文件就可以：</li>
</ol>

<figure class="highlight"><pre><code class="language-properties" data-lang="properties"><span class="err">\</span><span class="c"># Configuration file for dircolors, a utility to help you set the
</span><span class="err">\</span><span class="c"># LS_COLORS environment variable used by GNU ls with the --color option.
</span><span class="err">\</span><span class="c"># Copyright (C) 1996, 1999-2011 Free Software Foundation, Inc.
</span><span class="err">\</span><span class="c"># Copying and distribution of this file, with or without modification,
</span><span class="err">\</span><span class="c"># are permitted provided the copyright notice and this notice are preserved.
</span><span class="err">\</span><span class="c"># The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the
</span><span class="err">\</span><span class="c"># slackware version of dircolors) are recognized but ignored.
</span><span class="err">\</span><span class="c"># Below, there should be one TERM entry for each termtype that is colorizable
</span><span class="err">TERM</span> <span class="err">Eterm</span>
<span class="err">TERM</span> <span class="err">ansi</span>
<span class="err">TERM</span> <span class="err">color-xterm</span>
<span class="err">TERM</span> <span class="err">con132x25</span>
<span class="err">TERM</span> <span class="err">con132x30</span>
<span class="err">TERM</span> <span class="err">con132x43</span>
<span class="err">TERM</span> <span class="err">con132x60</span>
<span class="err">TERM</span> <span class="err">con80x25</span>
<span class="err">TERM</span> <span class="err">con80x28</span>
<span class="err">TERM</span> <span class="err">con80x30</span>
<span class="err">TERM</span> <span class="err">con80x43</span>
<span class="err">TERM</span> <span class="err">con80x50</span>
<span class="err">TERM</span> <span class="err">con80x60</span>
<span class="err">TERM</span> <span class="err">cons25</span>
<span class="err">TERM</span> <span class="err">console</span>
<span class="err">TERM</span> <span class="err">cygwin</span>
<span class="err">TERM</span> <span class="err">dtterm</span>
<span class="err">TERM</span> <span class="err">eterm-color</span>
<span class="err">TERM</span> <span class="err">gnome</span>
<span class="err">TERM</span> <span class="err">gnome-256color</span>
<span class="err">TERM</span> <span class="err">jfbterm</span>
<span class="err">TERM</span> <span class="err">konsole</span>
<span class="err">TERM</span> <span class="err">kterm</span>
<span class="err">TERM</span> <span class="err">linux</span>
<span class="err">TERM</span> <span class="err">linux-c</span>
<span class="err">TERM</span> <span class="err">mach-color</span>
<span class="err">TERM</span> <span class="err">mlterm</span>
<span class="err">TERM</span> <span class="err">putty</span>
<span class="err">TERM</span> <span class="err">rxvt</span>
<span class="err">TERM</span> <span class="err">rxvt-256color</span>
<span class="err">TERM</span> <span class="err">rxvt-cygwin</span>
<span class="err">TERM</span> <span class="err">rxvt-cygwin-native</span>
<span class="err">TERM</span> <span class="err">rxvt-unicode</span>
<span class="err">TERM</span> <span class="err">rxvt-unicode-256color</span>
<span class="err">TERM</span> <span class="err">rxvt-unicode256</span>
<span class="err">TERM</span> <span class="err">screen</span>
<span class="err">TERM</span> <span class="err">screen-256color</span>
<span class="err">TERM</span> <span class="err">screen-256color-bce</span>
<span class="err">TERM</span> <span class="err">screen-bce</span>
<span class="err">TERM</span> <span class="err">screen-w</span>
<span class="err">TERM</span> <span class="err">screen.Eterm</span>
<span class="err">TERM</span> <span class="err">screen.rxvt</span>
<span class="err">TERM</span> <span class="err">screen.linux</span>
<span class="err">TERM</span> <span class="err">terminator</span>
<span class="err">TERM</span> <span class="err">vt100</span>
<span class="err">TERM</span> <span class="err">xterm</span>
<span class="err">TERM</span> <span class="err">xterm-16color</span>
<span class="err">TERM</span> <span class="err">xterm-256color</span>
<span class="err">TERM</span> <span class="err">xterm-88color</span>
<span class="err">TERM</span> <span class="err">xterm-color</span>
<span class="err">TERM</span> <span class="err">xterm-debian</span>
<span class="err">\</span><span class="c"># Below are the color init strings for the basic file types. A color init
</span><span class="err">\</span><span class="c"># string consists of one or more of the following numeric codes:
</span><span class="err">\</span><span class="c"># Attribute codes:
</span><span class="err">\</span><span class="c"># 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed
</span><span class="err">\</span><span class="c"># Text color codes:
</span><span class="err">\</span><span class="c"># 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white
</span><span class="err">\</span><span class="c"># Background color codes:
</span><span class="err">\</span><span class="c"># 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white
</span><span class="err">\</span><span class="c">#NORMAL 00 # no color code at all
</span><span class="err">\</span><span class="c">#FILE 00 # regular file: use no color at all
</span><span class="err">RESET</span> <span class="err">0</span> <span class="c"># reset to "normal" color
</span><span class="err">DIR</span> <span class="err">01;34</span> <span class="c"># directory
</span><span class="err">LINK</span> <span class="err">01;36</span> <span class="c"># symbolic link. (If you set this to 'target' instead of a
</span><span class="err">\</span><span class="c"># numerical value, the color is as for the file pointed to.)
</span><span class="err">MULTIHARDLINK</span> <span class="err">00</span> <span class="c"># regular file with more than one link
</span><span class="err">FIFO</span> <span class="err">40;33</span> <span class="c"># pipe
</span><span class="err">SOCK</span> <span class="err">01;35</span> <span class="c"># socket
</span><span class="err">DOOR</span> <span class="err">01;35</span> <span class="c"># door
</span><span class="err">BLK</span> <span class="err">40;33;01</span> <span class="c"># block device driver
</span><span class="err">CHR</span> <span class="err">40;33;01</span> <span class="c"># character device driver
</span><span class="err">ORPHAN</span> <span class="err">40;31;01</span> <span class="c"># symlink to nonexistent file, or non-stat'able file
</span><span class="err">SETUID</span> <span class="err">37;41</span> <span class="c"># file that is setuid (u+s)
</span><span class="err">SETGID</span> <span class="err">30;43</span> <span class="c"># file that is setgid (g+s)
</span><span class="err">CAPABILITY</span> <span class="err">30;41</span> <span class="c"># file with capability
</span><span class="err">STICKY_OTHER_WRITABLE</span> <span class="err">01;34</span> <span class="c"># dir that is sticky and other-writable (+t,o+w)
</span><span class="err">OTHER_WRITABLE</span> <span class="err">01;34</span> <span class="c"># dir that is other-writable (o+w) and not sticky
</span><span class="err">STICKY</span> <span class="err">01;34</span> <span class="c"># dir with the sticky bit set (+t) and not other-writable
</span><span class="err">\</span><span class="c"># This is for files with execute permission:
</span><span class="err">EXEC</span> <span class="err">01;32</span>
<span class="err">\</span><span class="c"># List any file extensions like '.gz' or '.tar' that you would like ls
</span><span class="err">\</span><span class="c"># to colorize below. Put the extension, a space, and the color init string.
</span><span class="err">\</span><span class="c"># (and any comments you want to add after a '#')
</span><span class="err">\</span><span class="c"># If you use DOS-style suffixes, you may want to uncomment the following:
</span><span class="err">\</span><span class="c">#.cmd 01;32 # executables (bright green)
</span><span class="err">\</span><span class="c">#.exe 01;32
</span><span class="err">\</span><span class="c">#.com 01;32
</span><span class="err">\</span><span class="c">#.btm 01;32
</span><span class="err">\</span><span class="c">#.bat 01;32
</span><span class="err">\</span><span class="c"># Or if you want to colorize scripts even if they do not have the
</span><span class="err">\</span><span class="c"># executable bit actually set.
</span><span class="err">\</span><span class="c">#.sh 01;32
</span><span class="err">\</span><span class="c">#.csh 01;32
</span><span class="err">\</span><span class="c"># archives or compressed (bright red)
</span><span class="err">.tar</span> <span class="err">01;31</span>
<span class="err">.tgz</span> <span class="err">01;31</span>
<span class="err">.arj</span> <span class="err">01;31</span>
<span class="err">.taz</span> <span class="err">01;31</span>
<span class="err">.lzh</span> <span class="err">01;31</span>
<span class="err">.lzma</span> <span class="err">01;31</span>
<span class="err">.tlz</span> <span class="err">01;31</span>
<span class="err">.txz</span> <span class="err">01;31</span>
<span class="err">.zip</span> <span class="err">01;31</span>
<span class="err">.z</span> <span class="err">01;31</span>
<span class="err">.Z</span> <span class="err">01;31</span>
<span class="err">.dz</span> <span class="err">01;31</span>
<span class="err">.gz</span> <span class="err">01;31</span>
<span class="err">.lz</span> <span class="err">01;31</span>
<span class="err">.xz</span> <span class="err">01;31</span>
<span class="err">.bz2</span> <span class="err">01;31</span>
<span class="err">.bz</span> <span class="err">01;31</span>
<span class="err">.tbz</span> <span class="err">01;31</span>
<span class="err">.tbz2</span> <span class="err">01;31</span>
<span class="err">.tz</span> <span class="err">01;31</span>
<span class="err">.deb</span> <span class="err">01;31</span>
<span class="err">.rpm</span> <span class="err">01;31</span>
<span class="err">.jar</span> <span class="err">01;31</span>
<span class="err">.war</span> <span class="err">01;31</span>
<span class="err">.ear</span> <span class="err">01;31</span>
<span class="err">.sar</span> <span class="err">01;31</span>
<span class="err">.rar</span> <span class="err">01;31</span>
<span class="err">.ace</span> <span class="err">01;31</span>
<span class="err">.zoo</span> <span class="err">01;31</span>
<span class="err">.cpio</span> <span class="err">01;31</span>
<span class="err">.7z</span> <span class="err">01;31</span>
<span class="err">.rz</span> <span class="err">01;31</span>
<span class="err">\</span><span class="c"># image formats
</span><span class="err">.jpg</span> <span class="err">01;35</span>
<span class="err">.jpeg</span> <span class="err">01;35</span>
<span class="err">.gif</span> <span class="err">01;35</span>
<span class="err">.bmp</span> <span class="err">01;35</span>
<span class="err">.pbm</span> <span class="err">01;35</span>
<span class="err">.pgm</span> <span class="err">01;35</span>
<span class="err">.ppm</span> <span class="err">01;35</span>
<span class="err">.tga</span> <span class="err">01;35</span>
<span class="err">.xbm</span> <span class="err">01;35</span>
<span class="err">.xpm</span> <span class="err">01;35</span>
<span class="err">.tif</span> <span class="err">01;35</span>
<span class="err">.tiff</span> <span class="err">01;35</span>
<span class="err">.png</span> <span class="err">01;35</span>
<span class="err">.svg</span> <span class="err">01;35</span>
<span class="err">.svgz</span> <span class="err">01;35</span>
<span class="err">.mng</span> <span class="err">01;35</span>
<span class="err">.pcx</span> <span class="err">01;35</span>
<span class="err">.mov</span> <span class="err">01;35</span>
<span class="err">.mpg</span> <span class="err">01;35</span>
<span class="err">.mpeg</span> <span class="err">01;35</span>
<span class="err">.m2v</span> <span class="err">01;35</span>
<span class="err">.mkv</span> <span class="err">01;35</span>
<span class="err">.webm</span> <span class="err">01;35</span>
<span class="err">.ogm</span> <span class="err">01;35</span>
<span class="err">.mp4</span> <span class="err">01;35</span>
<span class="err">.m4v</span> <span class="err">01;35</span>
<span class="err">.mp4v</span> <span class="err">01;35</span>
<span class="err">.vob</span> <span class="err">01;35</span>
<span class="err">.qt</span> <span class="err">01;35</span>
<span class="err">.nuv</span> <span class="err">01;35</span>
<span class="err">.wmv</span> <span class="err">01;35</span>
<span class="err">.asf</span> <span class="err">01;35</span>
<span class="err">.rm</span> <span class="err">01;35</span>
<span class="err">.rmvb</span> <span class="err">01;35</span>
<span class="err">.flc</span> <span class="err">01;35</span>
<span class="err">.avi</span> <span class="err">01;35</span>
<span class="err">.fli</span> <span class="err">01;35</span>
<span class="err">.flv</span> <span class="err">01;35</span>
<span class="err">.gl</span> <span class="err">01;35</span>
<span class="err">.dl</span> <span class="err">01;35</span>
<span class="err">.xcf</span> <span class="err">01;35</span>
<span class="err">.xwd</span> <span class="err">01;35</span>
<span class="err">.yuv</span> <span class="err">01;35</span>
<span class="err">.cgm</span> <span class="err">01;35</span>
<span class="err">.emf</span> <span class="err">01;35</span>
<span class="err">\</span><span class="c"># http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions
</span><span class="err">.axv</span> <span class="err">01;35</span>
<span class="err">.anx</span> <span class="err">01;35</span>
<span class="err">.ogv</span> <span class="err">01;35</span>
<span class="err">.ogx</span> <span class="err">01;35</span>
<span class="err">\</span><span class="c"># audio formats
</span><span class="err">.aac</span> <span class="err">00;36</span>
<span class="err">.au</span> <span class="err">00;36</span>
<span class="err">.flac</span> <span class="err">00;36</span>
<span class="err">.mid</span> <span class="err">00;36</span>
<span class="err">.midi</span> <span class="err">00;36</span>
<span class="err">.mka</span> <span class="err">00;36</span>
<span class="err">.mp3</span> <span class="err">00;36</span>
<span class="err">.mpc</span> <span class="err">00;36</span>
<span class="err">.ogg</span> <span class="err">00;36</span>
<span class="err">.ra</span> <span class="err">00;36</span>
<span class="err">.wav</span> <span class="err">00;36</span>
<span class="err">\</span><span class="c"># http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions
</span><span class="err">.axa</span> <span class="err">00;36</span>
<span class="err">.oga</span> <span class="err">00;36</span>
<span class="err">.spx</span> <span class="err">00;36</span>
<span class="err">.xspf</span> <span class="err">00;36</span></code></pre></figure>

<ol>
  <li>外接投影仪或者显示器
外接显示器或者投影器，你必须使用xrand来支持。开机的时候awesome好像默认会检测你
的屏幕数量然后加以显示。如果没有自动，那么你只需要运行一下一下的代码就可以了。</li>
</ol>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="se">\#</span>/usr/bin/env bash
<span class="k">case</span> <span class="nv">$1</span> <span class="k">in</span>
	<span class="s2">"-c"</span><span class="p">)</span>
		<span class="c"># 打开外接显示器(--auto:最高分辨率)，与笔记本液晶屏幕显示同样内容（克隆）</span>
		xrandr --output VGA1 --same-as LVDS1 --auto
		<span class="p">;;</span>
	<span class="s2">"-cs"</span><span class="p">)</span>
		<span class="c"># 打开外接显示器(分辨率为1280x1024)，与笔记本液晶屏幕显示同样内容（克隆）</span>
		xrandr --output VGA1 --same-as LVDS1 --mode 1280x1024
		<span class="p">;;</span>
	<span class="s2">"-el"</span><span class="p">)</span>
		<span class="c"># 打开外接显示器(--auto:最高分辨率)，设置为右侧扩展屏幕</span>
		xrandr --output VGA1 --left-of LVDS1 --auto 
		<span class="p">;;</span>
	<span class="s2">"-er"</span><span class="p">)</span>
		<span class="c"># 打开外接显示器(--auto:最高分辨率)，设置为右侧扩展屏幕</span>
		xrandr --output VGA1 --right-of LVDS1 --auto
		<span class="p">;;</span>
	<span class="s2">"-f"</span><span class="p">)</span>
		<span class="c"># 关闭外接显示器</span>
		xrandr --output VGA1 --off
		<span class="p">;;</span>
	<span class="s2">"-oe"</span><span class="p">)</span>
		<span class="c"># 打开外接显示器，同时关闭笔记本液晶屏幕（只用外接显示器工作）</span>
		xrandr --output VGA1 --auto --output LVDS1 --off
		<span class="p">;;</span>
	<span class="s2">"-oo"</span><span class="p">)</span>
		<span class="c"># 关闭外接显示器，同时打开笔记本液晶屏幕 （只用笔记本液晶屏）</span>
		xrandr --output VGA1 --off --output LVDS1 --auto
		<span class="p">;;</span>
	<span class="s2">""</span><span class="p">)</span>
		<span class="nb">echo</span> <span class="s2">"-c: 打开外接显示器(--auto:最高分辨率)，与笔记本液晶屏幕显示同样内容（克隆）"</span>
		<span class="nb">echo</span> <span class="s2">"-cs: 打开外接显示器(分辨率为1280x1024)，与笔记本液晶屏幕显示同样内容（克隆）"</span>
		<span class="nb">echo</span> <span class="s2">"-er: 打开外接显示器(--auto:最高分辨率)，设置为右侧扩展屏幕"</span>
		<span class="nb">echo</span> <span class="s2">"-el: 打开外接显示器(--auto:最高分辨率)，设置为left侧扩展屏幕"</span>
		<span class="nb">echo</span> <span class="s2">"-f: 关闭外接显示器"</span>
		<span class="nb">echo</span> <span class="s2">"-oe: 打开外接显示器，同时关闭笔记本液晶屏幕（只用外接显示器工作）"</span>
		<span class="nb">echo</span> <span class="s2">"-oo: 关闭外接显示器，同时打开笔记本液晶屏幕 （只用笔记本液晶屏）"</span>
		<span class="nb">echo</span> <span class="s2">"如果使用awesome，modkey+ctrl+j,modkey+ctrl+k,切换不同的screen"</span>
		<span class="p">;;</span>

	<span class="s2">"-h"</span><span class="p">)</span>
		<span class="nb">echo</span> <span class="s2">"-c: 打开外接显示器(--auto:最高分辨率)，与笔记本液晶屏幕显示同样内容（克隆）"</span>
		<span class="nb">echo</span> <span class="s2">"-cs: 打开外接显示器(分辨率为1280x1024)，与笔记本液晶屏幕显示同样内容（克隆）"</span>
		<span class="nb">echo</span> <span class="s2">"-e: 打开外接显示器(--auto:最高分辨率)，设置为右侧扩展屏幕"</span>
		<span class="nb">echo</span> <span class="s2">"-f: 关闭外接显示器"</span>
		<span class="nb">echo</span> <span class="s2">"-oe: 打开外接显示器，同时关闭笔记本液晶屏幕（只用外接显示器工作）"</span>
		<span class="nb">echo</span> <span class="s2">"-oo: 关闭外接显示器，同时打开笔记本液晶屏幕 （只用笔记本液晶屏）"</span>
		<span class="nb">echo</span> <span class="s2">"如果使用awesome，modkey+ctrl+j,modkey+ctrl+k,切换不同的screen"</span>
		<span class="p">;;</span>
<span class="k">esac</span></code></pre></figure>

<p><br /></p>
<h4 id="结束语">结束语</h4>
<p>这些配置文件都是可以直接拿来用的，我已经经过了测试。保证可以使用。<br />
因为现在也不太用ub+awesome了，改用了mac，但是说实话，mac没有ub+awesome好用和自
如。如果还能选择，我想还是ub+awesome来的更适合我一些。</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/blog/2014/system/</guid>
                <description>
                    
                </description>
                <pubDate>Fri, 29 Aug 2014 00:00:00 +0800</pubDate>
                <author>94geek.com by Seapeak.Xu</author>
            </item>
        
    
  </channel>
</rss>
